!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FIELD_DESCRIPTION!Ruby	mixin	/how the class or module is mixed in (mixin:HOW:MODULE)/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Man	S,subsection	/sub sections/
!_TAG_KIND_DESCRIPTION!Man	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Man	t,title	/titles/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Perl	c,constant	/constants/
!_TAG_KIND_DESCRIPTION!Perl	f,format	/formats/
!_TAG_KIND_DESCRIPTION!Perl	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Perl	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Perl	s,subroutine	/subroutines/
!_TAG_KIND_DESCRIPTION!PowerShell	c,class	/classes/
!_TAG_KIND_DESCRIPTION!PowerShell	f,function	/functions/
!_TAG_KIND_DESCRIPTION!PowerShell	g,enum	/enum names/
!_TAG_KIND_DESCRIPTION!PowerShell	i,filter	/filter/
!_TAG_KIND_DESCRIPTION!PowerShell	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Ruby	A,accessor	/accessors/
!_TAG_KIND_DESCRIPTION!Ruby	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!Ruby	L,library	/libraries/
!_TAG_KIND_DESCRIPTION!Ruby	S,singletonMethod	/singleton methods/
!_TAG_KIND_DESCRIPTION!Ruby	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Ruby	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Ruby	f,method	/methods/
!_TAG_KIND_DESCRIPTION!Ruby	m,module	/modules/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!Vim	C,constant	/constant definitions/
!_TAG_KIND_DESCRIPTION!Vim	a,augroup	/autocommand groups/
!_TAG_KIND_DESCRIPTION!Vim	c,command	/user-defined commands/
!_TAG_KIND_DESCRIPTION!Vim	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!Vim	m,map	/maps/
!_TAG_KIND_DESCRIPTION!Vim	n,filename	/vimball filename/
!_TAG_KIND_DESCRIPTION!Vim	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_KIND_DESCRIPTION!Zsh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Zsh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Zsh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Zsh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Man	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Perl	0.0	/current.age/
!_TAG_PARSER_VERSION!PowerShell	0.0	/current.age/
!_TAG_PARSER_VERSION!Ruby	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!Vim	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PARSER_VERSION!Zsh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Users/oemer/dotfiles/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Ruby!library	loaded	/loaded by "load" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	required	/loaded by "require" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	requiredRel	/loaded by "require_relative" method/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
!_TAG_ROLE_DESCRIPTION!Zsh!function	autoloaded	/function name passed to autoload built-in command/
!_TAG_ROLE_DESCRIPTION!Zsh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Zsh!script	autoloaded	/autoloaded/
!_TAG_ROLE_DESCRIPTION!Zsh!script	loaded	/loaded/
"\\033[2J" is an ANSI escape sequence for clearing the screen.	./vim/plugged/fzf/ADVANCED.md	/^# "\\033[2J" is an ANSI escape sequence for clearing the screen.$/;"	c
$PATH	./.vimrc	/^  let $PATH = s:vim_bin_path . ':' . $PATH$/;"	v
$PATH	./.vimrc	/^  let $PATH = s:vim_bin_path . ';' . $PATH$/;"	v
(section,	./vim/plugged/vim-airline/autoload/airline/themes.vim	/^      map(section, (_, v) => type(v) != type('') ? string(v) : v)$/;"	m
* Press alt-enter to switch to fzf-only filtering	./vim/plugged/fzf/ADVANCED.md	/^#    * Press alt-enter to switch to fzf-only filtering$/;"	c
- Easier to write multiple options	./vim/plugged/fzf/CHANGELOG.md	/^  # - Easier to write multiple options$/;"	c
- This style is still supported, but it's deprecated	./vim/plugged/fzf/CHANGELOG.md	/^  # - This style is still supported, but it's deprecated$/;"	c
0.21.1	./vim/plugged/fzf/CHANGELOG.md	/^0.21.1$/;"	s	chapter:CHANGELOG
0.22.0	./vim/plugged/fzf/CHANGELOG.md	/^0.22.0$/;"	s	chapter:CHANGELOG
0.23.0	./vim/plugged/fzf/CHANGELOG.md	/^0.23.0$/;"	s	chapter:CHANGELOG
0.23.1	./vim/plugged/fzf/CHANGELOG.md	/^0.23.1$/;"	s	chapter:CHANGELOG
0.24.0	./vim/plugged/fzf/CHANGELOG.md	/^0.24.0$/;"	s	chapter:CHANGELOG
0.24.1	./vim/plugged/fzf/CHANGELOG.md	/^0.24.1$/;"	s	chapter:CHANGELOG
0.24.2	./vim/plugged/fzf/CHANGELOG.md	/^0.24.2$/;"	s	chapter:CHANGELOG
0.24.3	./vim/plugged/fzf/CHANGELOG.md	/^0.24.3$/;"	s	chapter:CHANGELOG
0.24.4	./vim/plugged/fzf/CHANGELOG.md	/^0.24.4$/;"	s	chapter:CHANGELOG
0.25.0	./vim/plugged/fzf/CHANGELOG.md	/^0.25.0$/;"	s	chapter:CHANGELOG
0.25.1	./vim/plugged/fzf/CHANGELOG.md	/^0.25.1$/;"	s	chapter:CHANGELOG
0.26.0	./vim/plugged/fzf/CHANGELOG.md	/^0.26.0$/;"	s	chapter:CHANGELOG
0.27.0	./vim/plugged/fzf/CHANGELOG.md	/^0.27.0$/;"	s	chapter:CHANGELOG
0.27.1	./vim/plugged/fzf/CHANGELOG.md	/^0.27.1$/;"	s	chapter:CHANGELOG
0.27.2	./vim/plugged/fzf/CHANGELOG.md	/^0.27.2$/;"	s	chapter:CHANGELOG
0.27.3	./vim/plugged/fzf/CHANGELOG.md	/^0.27.3$/;"	s	chapter:CHANGELOG
0.28.0	./vim/plugged/fzf/CHANGELOG.md	/^0.28.0$/;"	s	chapter:CHANGELOG
0.29.0	./vim/plugged/fzf/CHANGELOG.md	/^0.29.0$/;"	s	chapter:CHANGELOG
0.30.0	./vim/plugged/fzf/CHANGELOG.md	/^0.30.0$/;"	s	chapter:CHANGELOG
0.31.0	./vim/plugged/fzf/CHANGELOG.md	/^0.31.0$/;"	s	chapter:CHANGELOG
0.32.0	./vim/plugged/fzf/CHANGELOG.md	/^0.32.0$/;"	s	chapter:CHANGELOG
0.32.1	./vim/plugged/fzf/CHANGELOG.md	/^0.32.1$/;"	s	chapter:CHANGELOG
0.33.0	./vim/plugged/fzf/CHANGELOG.md	/^0.33.0$/;"	s	chapter:CHANGELOG
0.34.0	./vim/plugged/fzf/CHANGELOG.md	/^0.34.0$/;"	s	chapter:CHANGELOG
0.35.0	./vim/plugged/fzf/CHANGELOG.md	/^0.35.0$/;"	s	chapter:CHANGELOG
0.35.1	./vim/plugged/fzf/CHANGELOG.md	/^0.35.1$/;"	s	chapter:CHANGELOG
0.36.0	./vim/plugged/fzf/CHANGELOG.md	/^0.36.0$/;"	s	chapter:CHANGELOG
0.37.0	./vim/plugged/fzf/CHANGELOG.md	/^0.37.0$/;"	s	chapter:CHANGELOG
0.38.0	./vim/plugged/fzf/CHANGELOG.md	/^0.38.0$/;"	s	chapter:CHANGELOG
0.39.0	./vim/plugged/fzf/CHANGELOG.md	/^0.39.0$/;"	s	chapter:CHANGELOG
0.40.0	./vim/plugged/fzf/CHANGELOG.md	/^0.40.0$/;"	s	chapter:CHANGELOG
0.41.0	./vim/plugged/fzf/CHANGELOG.md	/^0.41.0$/;"	s	chapter:CHANGELOG
0.41.1	./vim/plugged/fzf/CHANGELOG.md	/^0.41.1$/;"	s	chapter:CHANGELOG
0.42.0	./vim/plugged/fzf/CHANGELOG.md	/^0.42.0$/;"	s	chapter:CHANGELOG
0.43.0	./vim/plugged/fzf/CHANGELOG.md	/^0.43.0$/;"	s	chapter:CHANGELOG
0.44.0	./vim/plugged/fzf/CHANGELOG.md	/^0.44.0$/;"	s	chapter:CHANGELOG
0.44.1	./vim/plugged/fzf/CHANGELOG.md	/^0.44.1$/;"	s	chapter:CHANGELOG
0.45.0	./vim/plugged/fzf/CHANGELOG.md	/^0.45.0$/;"	s	chapter:CHANGELOG
0.46.0	./vim/plugged/fzf/CHANGELOG.md	/^0.46.0$/;"	s	chapter:CHANGELOG
0.46.1	./vim/plugged/fzf/CHANGELOG.md	/^0.46.1$/;"	s	chapter:CHANGELOG
0.47.0	./vim/plugged/fzf/CHANGELOG.md	/^0.47.0$/;"	s	chapter:CHANGELOG
0.48.0	./vim/plugged/fzf/CHANGELOG.md	/^0.48.0$/;"	s	chapter:CHANGELOG
0.48.1	./vim/plugged/fzf/CHANGELOG.md	/^0.48.1$/;"	s	chapter:CHANGELOG
0.49.0	./vim/plugged/fzf/CHANGELOG.md	/^0.49.0$/;"	s	chapter:CHANGELOG
0.50.0	./vim/plugged/fzf/CHANGELOG.md	/^0.50.0$/;"	s	chapter:CHANGELOG
0.51.0	./vim/plugged/fzf/CHANGELOG.md	/^0.51.0$/;"	s	chapter:CHANGELOG
0.52.0	./vim/plugged/fzf/CHANGELOG.md	/^0.52.0$/;"	s	chapter:CHANGELOG
0.52.1	./vim/plugged/fzf/CHANGELOG.md	/^0.52.1$/;"	s	chapter:CHANGELOG
0.53.0	./vim/plugged/fzf/CHANGELOG.md	/^0.53.0$/;"	s	chapter:CHANGELOG
0.54.0	./vim/plugged/fzf/CHANGELOG.md	/^0.54.0$/;"	s	chapter:CHANGELOG
0.54.1	./vim/plugged/fzf/CHANGELOG.md	/^0.54.1$/;"	s	chapter:CHANGELOG
0.54.2	./vim/plugged/fzf/CHANGELOG.md	/^0.54.2$/;"	s	chapter:CHANGELOG
0.54.3	./vim/plugged/fzf/CHANGELOG.md	/^0.54.3$/;"	s	chapter:CHANGELOG
0.55.0	./vim/plugged/fzf/CHANGELOG.md	/^0.55.0$/;"	s	chapter:CHANGELOG
0.56.0	./vim/plugged/fzf/CHANGELOG.md	/^0.56.0$/;"	s	chapter:CHANGELOG
0.56.1	./vim/plugged/fzf/CHANGELOG.md	/^0.56.1$/;"	s	chapter:CHANGELOG
0.56.2	./vim/plugged/fzf/CHANGELOG.md	/^0.56.2$/;"	s	chapter:CHANGELOG
0.56.3	./vim/plugged/fzf/CHANGELOG.md	/^0.56.3$/;"	s	chapter:CHANGELOG
0.57.0	./vim/plugged/fzf/CHANGELOG.md	/^0.57.0$/;"	s	chapter:CHANGELOG
0.58.0	./vim/plugged/fzf/CHANGELOG.md	/^0.58.0$/;"	s	chapter:CHANGELOG
0.59.0	./vim/plugged/fzf/CHANGELOG.md	/^0.59.0$/;"	s	chapter:CHANGELOG
0.60.0	./vim/plugged/fzf/CHANGELOG.md	/^0.60.0$/;"	s	chapter:CHANGELOG
0.60.1	./vim/plugged/fzf/CHANGELOG.md	/^0.60.1$/;"	s	chapter:CHANGELOG
0.60.2	./vim/plugged/fzf/CHANGELOG.md	/^0.60.2$/;"	s	chapter:CHANGELOG
0.60.3	./vim/plugged/fzf/CHANGELOG.md	/^0.60.3$/;"	s	chapter:CHANGELOG
0.61.0	./vim/plugged/fzf/CHANGELOG.md	/^0.61.0$/;"	s	chapter:CHANGELOG
0.61.1	./vim/plugged/fzf/CHANGELOG.md	/^0.61.1$/;"	s	chapter:CHANGELOG
0.61.2	./vim/plugged/fzf/CHANGELOG.md	/^0.61.2$/;"	s	chapter:CHANGELOG
0.61.3	./vim/plugged/fzf/CHANGELOG.md	/^0.61.3$/;"	s	chapter:CHANGELOG
0.62.0	./vim/plugged/fzf/CHANGELOG.md	/^0.62.0$/;"	s	chapter:CHANGELOG
0.63.0	./vim/plugged/fzf/CHANGELOG.md	/^0.63.0$/;"	s	chapter:CHANGELOG
0.64.0	./vim/plugged/fzf/CHANGELOG.md	/^0.64.0$/;"	s	chapter:CHANGELOG
0.65.0	./vim/plugged/fzf/CHANGELOG.md	/^0.65.0$/;"	s	chapter:CHANGELOG
0.65.1	./vim/plugged/fzf/CHANGELOG.md	/^0.65.1$/;"	s	chapter:CHANGELOG
1. Installation	./vim/plugged/vim-airline/CONTRIBUTING.md	/^## 1. Installation$/;"	s	chapter:Testing
1. Search for text in files using Ripgrep	./vim/plugged/fzf/ADVANCED.md	/^# 1. Search for text in files using Ripgrep$/;"	c
1. Update the list of processes by pressing CTRL-R	./vim/plugged/fzf/README.md	/^#### 1. Update the list of processes by pressing CTRL-R$/;"	t	subsection:Advanced topics""Reloading the candidate list
2. Interactively restart Ripgrep with reload action	./vim/plugged/fzf/ADVANCED.md	/^# 2. Interactively restart Ripgrep with reload action$/;"	c
2. Running tests	./vim/plugged/vim-airline/CONTRIBUTING.md	/^## 2. Running tests$/;"	s	chapter:Testing
2. Switch between sources by pressing CTRL-D or CTRL-F	./vim/plugged/fzf/README.md	/^#### 2. Switch between sources by pressing CTRL-D or CTRL-F$/;"	t	subsection:Advanced topics""Reloading the candidate list
3. Interactive ripgrep integration	./vim/plugged/fzf/README.md	/^#### 3. Interactive ripgrep integration$/;"	t	subsection:Advanced topics""Reloading the candidate list
3. Open the file in Vim	./vim/plugged/fzf/ADVANCED.md	/^# 3. Open the file in Vim$/;"	c
3.0.0	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 3.0.0$/;"	t	chapter:NERDTree Change Log
3.0.1	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 3.0.1$/;"	t	chapter:NERDTree Change Log
3.1.0	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 3.1.0$/;"	t	chapter:NERDTree Change Log
3.1.1	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 3.1.1$/;"	t	chapter:NERDTree Change Log
4.0.0	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 4.0.0$/;"	t	chapter:NERDTree Change Log
4.1.0	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 4.1.0$/;"	t	chapter:NERDTree Change Log
4.2.0	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 4.2.0$/;"	t	chapter:NERDTree Change Log
5.0.0	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 5.0.0$/;"	t	chapter:NERDTree Change Log
5.1	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 5.1$/;"	t	chapter:NERDTree Change Log
5.2	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 5.2$/;"	t	chapter:NERDTree Change Log
5.3	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 5.3$/;"	t	chapter:NERDTree Change Log
6.0	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.0$/;"	t	chapter:NERDTree Change Log
6.1	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.1$/;"	t	chapter:NERDTree Change Log
6.10	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.10$/;"	t	chapter:NERDTree Change Log
6.2	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.2$/;"	t	chapter:NERDTree Change Log
6.3	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.3$/;"	t	chapter:NERDTree Change Log
6.4	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.4$/;"	t	chapter:NERDTree Change Log
6.5	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.5$/;"	t	chapter:NERDTree Change Log
6.6	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.6$/;"	t	chapter:NERDTree Change Log
6.7	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.7$/;"	t	chapter:NERDTree Change Log
6.8	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.8$/;"	t	chapter:NERDTree Change Log
6.9	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 6.9$/;"	t	chapter:NERDTree Change Log
7.0	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 7.0$/;"	t	chapter:NERDTree Change Log
7.1	./vim/plugged/nerdtree/CHANGELOG.md	/^#### 7.1$/;"	t	chapter:NERDTree Change Log
<	./.vimrc	/^nnoremap <silent> < :bprevious<CR>$/;"	m
<	./.vimrc	/^vnoremap <silent> < <gv$/;"	m
<C-+>	./.vimrc	/^nnoremap <silent> <C-+> :vertical resize =<CR>$/;"	m
<C-Down>	./.vimrc	/^nnoremap <silent> <C-Down> :resize -2<CR>$/;"	m
<C-Left>	./.vimrc	/^nnoremap <silent> <C-Left> :vertical resize +2<CR>$/;"	m
<C-Right>	./.vimrc	/^nnoremap <silent> <C-Right> :vertical resize -2<CR>$/;"	m
<C-Space>	./.vimrc	/^inoremap <C-Space> <C-x><C-o>$/;"	m
<C-Up>	./.vimrc	/^nnoremap <silent> <C-Up> :resize +2<CR>$/;"	m
<C-]>	./.vimrc	/^inoremap <C-]> <C-x><C-]>$/;"	m
<C-d>	./.vimrc	/^nnoremap <silent> <C-d> <C-d>zz$/;"	m
<C-e>	./.vimrc	/^nnoremap <silent> <C-e> :silent! NERDTreeToggle<CR>$/;"	m
<C-h>	./.vimrc	/^inoremap <silent> <C-h> <C-w>$/;"	m
<C-h>	./.vimrc	/^nnoremap <silent> <C-h> <C-w>h$/;"	m
<C-j>	./.vimrc	/^nnoremap <silent> <C-j> <C-w>j$/;"	m
<C-k>	./.vimrc	/^nnoremap <silent> <C-k> <C-w>k$/;"	m
<C-l>	./.vimrc	/^nnoremap <silent> <C-l> <C-w>l$/;"	m
<C-q>	./.vimrc	/^nnoremap <silent> <C-q> :bd<CR>$/;"	m
<C-s>	./.vimrc	/^nnoremap <silent> <C-s> :w<CR>$/;"	m
<C-u>	./.vimrc	/^nnoremap <silent> <C-u> <C-u>zz$/;"	m
<CR>	./.vimrc	/^inoremap <expr> <CR> pumvisible() ? "\\<C-y>" : "\\<CR>"$/;"	m
<Plug>(-fzf-complete-finish)	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l$/;"	m
<Plug>(-fzf-complete-finish)	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <silent> <Plug>(-fzf-complete-finish) a$/;"	m
<Plug>(-fzf-complete-trigger)	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(fzf-insert)	./vim/plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-insert) i$/;"	m
<Plug>(fzf-normal)	./vim/plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-normal) <Nop>$/;"	m
<Plug>AirlineSelectNextTab	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>$/;"	m
<Plug>AirlineSelectNextTab	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectNextTab :<C-U>exe repeat(':tabn\\|', v:count1)<cr>$/;"	m
<Plug>AirlineSelectPrevTab	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>$/;"	m
<Plug>AirlineSelectPrevTab	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectPrevTab gT$/;"	m
<Plug>XTablineCdCurrent	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doaut/;"	m
<Plug>XTablineCdDown1	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doa/;"	m
<Plug>XTablineCdDown2	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#d/;"	m
<Plug>XTablineCdDown3	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util/;"	m
<Plug>XTablineCdHome	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd/;"	m
<Plug>XTablineNextBuffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer$/;"	m
<Plug>XTablinePrevBuffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer$/;"	m
<Plug>XTablineReopen	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab$/;"	m
<Plug>XTablineSelectBuffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer$/;"	m
<Plug>XTablineToggleFiltering	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering$/;"	m
<Plug>XTablineToggleTabs	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs$/;"	m
<S-Tab>	./.vimrc	/^inoremap <expr> <S-Tab> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<SID>NextBuffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>NextBuffer airline#extensions#tabline#xtabline#next_buffer(v:c/;"	m
<SID>PrevBuffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>PrevBuffer airline#extensions#tabline#xtabline#prev_buffer(v:c/;"	m
<SID>ReopenLastTab	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ReopenLastTab :XTabReopen<cr>$/;"	m
<SID>SelectBuffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>SelectBuffer g:xtabline_changing_buffer ? "\\<C-c>" : ":<C-u>c/;"	m
<SID>ToggleFiltering	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleFiltering :call airline#extensions#tabline#xtabline#toggle_buff/;"	m
<SID>ToggleTabs	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleTabs :call airline#extensions#tabline#xtabline#toggle_tabs()<cr/;"	m
<Tab>	./.vimrc	/^inoremap <expr> <Tab> pumvisible() ? "\\<C-n>" : "\\<Tab>"$/;"	m
<cr>	./vim/autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<leader>cd2	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd2 <Plug>XTablineCdDown2$/;"	m
<leader>cd3	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd3 <Plug>XTablineCdDown3$/;"	m
<leader>cdc	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdc <Plug>XTablineCdCurrent$/;"	m
<leader>cdd	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdd <Plug>XTablineCdDown1$/;"	m
<leader>cdh	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdh <Plug>XTablineCdHome$/;"	m
<leader>ct	./.vimrc	/^nnoremap <silent> <leader>ct :CtagsGenerate<CR>$/;"	m
<leader>da	./.vimrc	/^nnoremap <silent> <leader>da ggVGd$/;"	m
<leader>fG	./.vimrc	/^nnoremap <silent> <leader>fG :Commits<CR>$/;"	m
<leader>fH	./.vimrc	/^nnoremap <silent> <leader>fH :Helptags<CR>$/;"	m
<leader>fL	./.vimrc	/^nnoremap <silent> <leader>fL :Lines<CR>$/;"	m
<leader>fT	./.vimrc	/^nnoremap <silent> <leader>fT :Tags<CR>$/;"	m
<leader>fb	./.vimrc	/^nnoremap <silent> <leader>fb :Buffers<CR>$/;"	m
<leader>fc	./.vimrc	/^nnoremap <silent> <leader>fc :Commands<CR>$/;"	m
<leader>ff	./.vimrc	/^nnoremap <silent> <leader>ff :Files<CR>$/;"	m
<leader>fg	./.vimrc	/^nnoremap <silent> <leader>fg :GFiles<CR>$/;"	m
<leader>fh	./.vimrc	/^nnoremap <silent> <leader>fh :History<CR>$/;"	m
<leader>fl	./.vimrc	/^nnoremap <silent> <leader>fl :BLines<CR>$/;"	m
<leader>fr	./.vimrc	/^  nnoremap <silent> <leader>fr :Rg<CR>$/;"	m
<leader>fs	./.vimrc	/^nnoremap <silent> <leader>fs :History\/<CR>$/;"	m
<leader>ft	./.vimrc	/^nnoremap <silent> <leader>ft :BTags<CR>$/;"	m
<leader>k	./.vimrc	/^nnoremap <silent> <leader>k :call PreviewTag()<CR>$/;"	m
<leader>rn	./.vimrc	/^nnoremap <silent> <leader>rn :call RenameSymbol()<CR>$/;"	m
<leader>sc	./.vimrc	/^nnoremap <silent> <leader>sc :close<CR>$/;"	m
<leader>sh	./.vimrc	/^nnoremap <silent> <leader>sh :split<CR>$/;"	m
<leader>sr	./.vimrc	/^vnoremap <silent> <leader>sr :<C-u>call VisualBlockSearchReplace()<CR>$/;"	m
<leader>sv	./.vimrc	/^nnoremap <silent> <leader>sv :vsplit<CR>$/;"	m
<leader>ya	./.vimrc	/^nnoremap <silent> <leader>ya ggVGy$/;"	m
<plug>(-fzf-/)	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-file)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-path)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<plug>(fzf-maps-x)	./vim/plugged/fzf.vim/plugin/fzf.vim	/^xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>$/;"	m
<plug>(plug-preview)	./vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
>	./.vimrc	/^nnoremap <silent> > :bnext<CR>$/;"	m
>	./.vimrc	/^vnoremap <silent> > >gv$/;"	m
ACTION ARGUMENT	./vim/plugged/fzf/man/man1/fzf.1	/^.SS ACTION ARGUMENT$/;"	S	section:fzf""KEY/EVENT BINDINGS
ACTION COMPOSITION	./vim/plugged/fzf/man/man1/fzf.1	/^.SS ACTION COMPOSITION$/;"	S	section:fzf""KEY/EVENT BINDINGS
ADVANCED	./vim/plugged/fzf/man/man1/fzf.1	/^.SS ADVANCED$/;"	S	section:fzf""OPTIONS
AUTHOR	./vim/plugged/fzf/man/man1/fzf.1	/^.SH AUTHOR$/;"	s	title:fzf
AVAILABLE ACTIONS:	./vim/plugged/fzf/man/man1/fzf.1	/^.SS AVAILABLE ACTIONS:$/;"	S	section:fzf""KEY/EVENT BINDINGS
AVAILABLE EVENTS:	./vim/plugged/fzf/man/man1/fzf.1	/^.SS AVAILABLE EVENTS:$/;"	S	section:fzf""KEY/EVENT BINDINGS
AVAILABLE KEYS:    (SYNONYMS)	./vim/plugged/fzf/man/man1/fzf.1	/^.SS AVAILABLE KEYS:    (SYNONYMS)$/;"	S	section:fzf""KEY/EVENT BINDINGS
AcceptNth	./vim/plugged/fzf/src/options.go	/^	AcceptNth         func(Delimiter) func([]Token, int32) string$/;"	m	struct:fzf.Options	typeref:typename:func(Delimiter) func([]Token, int32) string
Add	./vim/plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f	struct:fzf.ChunkCache
Add	./vim/plugged/fzf/src/util/concurrent_set.go	/^func (s *ConcurrentSet[T]) Add(item T) {$/;"	f	unknown:util.T
Advanced customization	./vim/plugged/fzf.vim/README.md	/^### Advanced customization$/;"	S	section:fzf :heart: vim""Customization
Advanced fzf examples	./vim/plugged/fzf/ADVANCED.md	/^Advanced fzf examples$/;"	c
Advanced topics	./vim/plugged/fzf/README.md	/^Advanced topics$/;"	s
AirlineExtensions	./vim/plugged/vim-airline/plugin/airline.vim	/^command! AirlineExtensions   call s:airline_extensions()$/;"	c
AirlineRefresh	./vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar -bang AirlineRefresh call s:airline_refresh(<q-bang>)$/;"	c
AirlineTheme	./vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar -nargs=? -complete=customlist,<sid>get_airline_themes AirlineTheme call <sid>airli/;"	c
AirlineToggle	./vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggle  call s:airline_toggle()$/;"	c
AirlineToggleWhitespace	./vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggleWhitespace call airline#extensions#whitespace#toggle()$/;"	c
Algo	./vim/plugged/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []ru/;"	t	package:algo	typeref:typename:func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int)
Alt	./vim/plugged/fzf/src/tui/tui.go	/^	Alt    bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Alt	./vim/plugged/fzf/src/tui/tui.go	/^	Alt$/;"	c	package:tui
AltBackspace	./vim/plugged/fzf/src/tui/tui.go	/^	AltBackspace$/;"	c	package:tui
AltBg	./vim/plugged/fzf/src/tui/tui.go	/^	AltBg            ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
AltDown	./vim/plugged/fzf/src/tui/tui.go	/^	AltDown$/;"	c	package:tui
AltKey	./vim/plugged/fzf/src/tui/tui.go	/^func AltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
AltLeft	./vim/plugged/fzf/src/tui/tui.go	/^	AltLeft$/;"	c	package:tui
AltRight	./vim/plugged/fzf/src/tui/tui.go	/^	AltRight$/;"	c	package:tui
AltShiftDown	./vim/plugged/fzf/src/tui/tui.go	/^	AltShiftDown$/;"	c	package:tui
AltShiftLeft	./vim/plugged/fzf/src/tui/tui.go	/^	AltShiftLeft$/;"	c	package:tui
AltShiftRight	./vim/plugged/fzf/src/tui/tui.go	/^	AltShiftRight$/;"	c	package:tui
AltShiftUp	./vim/plugged/fzf/src/tui/tui.go	/^	AltShiftUp$/;"	c	package:tui
AltUp	./vim/plugged/fzf/src/tui/tui.go	/^	AltUp$/;"	c	package:tui
Ambidouble	./vim/plugged/fzf/src/options.go	/^	Ambidouble        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Anchored\\-match	./vim/plugged/fzf/man/man1/fzf.1	/^.SS Anchored\\-match$/;"	S	section:fzf""EXTENDED SEARCH MODE
Ansi	./vim/plugged/fzf/src/options.go	/^	Ansi              bool$/;"	m	struct:fzf.Options	typeref:typename:bool
AsEvent	./vim/plugged/fzf/src/tui/tui.go	/^func (t EventType) AsEvent() Event {$/;"	f	type:tui.EventType	typeref:typename:Event
AsString	./vim/plugged/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f	struct:fzf.Item	typeref:typename:string
AsString	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
AsUint16	./vim/plugged/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f	package:util	typeref:typename:uint16
AtExit	./vim/plugged/fzf/src/util/atexit.go	/^func AtExit(fn func()) {$/;"	f	package:util
AtomicBool	./vim/plugged/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	s	package:util
Attr	./vim/plugged/fzf/src/tui/dummy.go	/^type Attr int32$/;"	t	package:tui	typeref:typename:int32
Attr	./vim/plugged/fzf/src/tui/tcell.go	/^type Attr int32$/;"	t	package:tui	typeref:typename:int32
Attr	./vim/plugged/fzf/src/tui/tui.go	/^	Attr  Attr$/;"	m	struct:tui.ColorAttr	typeref:typename:Attr
Attr	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Attr() Attr {$/;"	f	struct:tui.ColorPair	typeref:typename:Attr
AttrClear	./vim/plugged/fzf/src/tui/dummy.go	/^	AttrClear     = Attr(1 << 9)$/;"	c	package:tui
AttrClear	./vim/plugged/fzf/src/tui/tcell.go	/^	AttrClear     = Attr(1 << 8)$/;"	c	package:tui
AttrRegular	./vim/plugged/fzf/src/tui/dummy.go	/^	AttrRegular   = Attr(1 << 8)$/;"	c	package:tui
AttrRegular	./vim/plugged/fzf/src/tui/tcell.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c	package:tui
AttrUndefined	./vim/plugged/fzf/src/tui/dummy.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
AttrUndefined	./vim/plugged/fzf/src/tui/tcell.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
Automatic truncation	./vim/plugged/vim-airline/README.md	/^## Automatic truncation$/;"	s	chapter:Installation
BASE	./vim/plugged/fzf/test/lib/common.rb	/^BASE = File.expand_path('..\/..', __dir__)$/;"	C
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYARM8)$/;"	m
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYLOONG64)$/;"	m
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYPPC64LE)$/;"	m
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYRISCV64)$/;"	m
BINARY	./vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYS390)$/;"	m
BINARY32	./vim/plugged/fzf/Makefile	/^BINARY32       := fzf-$(GOOS)_386$/;"	m
BINARY64	./vim/plugged/fzf/Makefile	/^BINARY64       := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	./vim/plugged/fzf/Makefile	/^BINARYARM5     := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	./vim/plugged/fzf/Makefile	/^BINARYARM6     := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	./vim/plugged/fzf/Makefile	/^BINARYARM7     := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	./vim/plugged/fzf/Makefile	/^BINARYARM8     := fzf-$(GOOS)_arm8$/;"	m
BINARYLOONG64	./vim/plugged/fzf/Makefile	/^BINARYLOONG64  := fzf-$(GOOS)_loong64$/;"	m
BINARYPPC64LE	./vim/plugged/fzf/Makefile	/^BINARYPPC64LE  := fzf-$(GOOS)_ppc64le$/;"	m
BINARYRISCV64	./vim/plugged/fzf/Makefile	/^BINARYRISCV64  := fzf-$(GOOS)_riscv64$/;"	m
BINARYS390	./vim/plugged/fzf/Makefile	/^BINARYS390     := fzf-$(GOOS)_s390x$/;"	m
BUILD_FLAGS	./vim/plugged/fzf/Makefile	/^BUILD_FLAGS    := -a -ldflags "-s -w -X main.version=$(VERSION) -X main.revision=$(REVISION)" -t/;"	m
Backspace	./vim/plugged/fzf/src/tui/tui.go	/^	Backspace$/;"	c	package:tui
BackwardEOF	./vim/plugged/fzf/src/tui/tui.go	/^	BackwardEOF$/;"	c	package:tui
Bash	./vim/plugged/fzf/src/options.go	/^	Bash              bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Become	./vim/plugged/fzf/src/util/util_unix.go	/^func (x *Executor) Become(stdin *os.File, environ []string, command string) {$/;"	f	struct:util.Executor
Become	./vim/plugged/fzf/src/util/util_windows.go	/^func (x *Executor) Become(stdin *os.File, environ []string, command string) {$/;"	f	struct:util.Executor
Bell	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Bell()                              {}$/;"	f	unknown:tui.FullscreenRenderer
Bell	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Bell() {$/;"	f	unknown:tui.LightRenderer
Bell	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Bell() {$/;"	f	unknown:tui.FullscreenRenderer
Bell	./vim/plugged/fzf/src/tui/tui.go	/^	Bell()$/;"	n	interface:tui.Renderer
BenchmarkExtractColor	./vim/plugged/fzf/src/ansi_test.go	/^func BenchmarkExtractColor(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence	./vim/plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence_Regex	./vim/plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence_Regex(b *testing.B) {$/;"	f	package:fzf
Bg	./vim/plugged/fzf/src/tui/tui.go	/^	Bg               ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Bg	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
Binary releases	./vim/plugged/fzf/README.md	/^### Binary releases$/;"	S	section:Installation
Black	./vim/plugged/fzf/src/options.go	/^	Black             bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Blink	./vim/plugged/fzf/src/tui/dummy.go	/^	Blink         = Attr(1 << 4)$/;"	c	package:tui
Blink	./vim/plugged/fzf/src/tui/tcell.go	/^	Blink              = Attr(tcell.AttrBlink)$/;"	c	package:tui
Blink2	./vim/plugged/fzf/src/tui/dummy.go	/^	Blink2        = Attr(1 << 5)$/;"	c	package:tui
BlockProfile	./vim/plugged/fzf/src/options.go	/^	BlockProfile      string$/;"	m	struct:fzf.Options	typeref:typename:string
Bold	./vim/plugged/fzf/src/options.go	/^	Bold              bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Bold	./vim/plugged/fzf/src/tui/dummy.go	/^	Bold          = Attr(1)$/;"	c	package:tui
Bold	./vim/plugged/fzf/src/tui/tcell.go	/^	Bold          Attr = Attr(tcell.AttrBold)$/;"	c	package:tui	typeref:type:Attr
BoldForce	./vim/plugged/fzf/src/tui/dummy.go	/^	BoldForce     = Attr(1 << 10)$/;"	c	package:tui
BoldForce	./vim/plugged/fzf/src/tui/tcell.go	/^	BoldForce     = Attr(1 << 10)$/;"	c	package:tui
Bookmark	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=? Bookmark :call nerdtree#ui_glue#bookmarkNode('<args>')$/;"	c
BookmarkToRoot	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=+ BookmarkToRoot cal/;"	c
Border	./vim/plugged/fzf/src/options.go	/^func (o *previewOpts) Border() tui.BorderShape {$/;"	f	struct:fzf.previewOpts	typeref:typename:tui.BorderShape
Border	./vim/plugged/fzf/src/tui/tui.go	/^	Border           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
BorderBlock	./vim/plugged/fzf/src/tui/tui.go	/^	BorderBlock$/;"	c	package:tui
BorderBold	./vim/plugged/fzf/src/tui/tui.go	/^	BorderBold$/;"	c	package:tui
BorderBottom	./vim/plugged/fzf/src/tui/tui.go	/^	BorderBottom$/;"	c	package:tui
BorderCharacter	./vim/plugged/fzf/src/tui/tui.go	/^type BorderCharacter int$/;"	t	package:tui	typeref:typename:int
BorderDouble	./vim/plugged/fzf/src/tui/tui.go	/^	BorderDouble$/;"	c	package:tui
BorderHorizontal	./vim/plugged/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c	package:tui
BorderLabel	./vim/plugged/fzf/src/options.go	/^	BorderLabel       labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
BorderLabel	./vim/plugged/fzf/src/tui/tui.go	/^	BorderLabel      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
BorderLeft	./vim/plugged/fzf/src/tui/tui.go	/^	BorderLeft$/;"	c	package:tui
BorderLine	./vim/plugged/fzf/src/tui/tui.go	/^	BorderLine$/;"	c	package:tui
BorderNone	./vim/plugged/fzf/src/tui/tui.go	/^	BorderNone$/;"	c	package:tui
BorderPhantom	./vim/plugged/fzf/src/tui/tui.go	/^	BorderPhantom$/;"	c	package:tui
BorderRight	./vim/plugged/fzf/src/tui/tui.go	/^	BorderRight$/;"	c	package:tui
BorderRounded	./vim/plugged/fzf/src/tui/tui.go	/^	BorderRounded$/;"	c	package:tui
BorderShape	./vim/plugged/fzf/src/options.go	/^	BorderShape       tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
BorderShape	./vim/plugged/fzf/src/tui/tui.go	/^type BorderShape int$/;"	t	package:tui	typeref:typename:int
BorderSharp	./vim/plugged/fzf/src/tui/tui.go	/^	BorderSharp$/;"	c	package:tui
BorderStyle	./vim/plugged/fzf/src/tui/tui.go	/^type BorderStyle struct {$/;"	s	package:tui
BorderThinBlock	./vim/plugged/fzf/src/tui/tui.go	/^	BorderThinBlock$/;"	c	package:tui
BorderTop	./vim/plugged/fzf/src/tui/tui.go	/^	BorderTop$/;"	c	package:tui
BorderUndefined	./vim/plugged/fzf/src/tui/tui.go	/^	BorderUndefined BorderShape = iota$/;"	c	package:tui	typeref:type:BorderShape
BorderVertical	./vim/plugged/fzf/src/tui/tui.go	/^	BorderVertical$/;"	c	package:tui
BracketedPasteBegin	./vim/plugged/fzf/src/tui/tui.go	/^	BracketedPasteBegin$/;"	c	package:tui
BracketedPasteEnd	./vim/plugged/fzf/src/tui/tui.go	/^	BracketedPasteEnd$/;"	c	package:tui
Bugs	./vim/plugged/vim-airline/CONTRIBUTING.md	/^# Bugs$/;"	c
Build instructions	./vim/plugged/fzf/BUILD.md	/^Build instructions$/;"	s	chapter:Building fzf
BuildPattern	./vim/plugged/fzf/src/pattern.go	/^func BuildPattern(cache *ChunkCache, patternCache map[string]*Pattern, fuzzy bool, fuzzyAlgo alg/;"	f	package:fzf	typeref:typename:*Pattern
Building fzf	./vim/plugged/fzf/BUILD.md	/^Building fzf$/;"	c
Building fzf	./vim/plugged/fzf/README.md	/^Building fzf$/;"	s
ByOrder	./vim/plugged/fzf/src/result.go	/^type ByOrder []Offset$/;"	t	package:fzf	typeref:typename:[]Offset
ByRelevance	./vim/plugged/fzf/src/result.go	/^type ByRelevance []Result$/;"	t	package:fzf	typeref:typename:[]Result
ByRelevanceTac	./vim/plugged/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t	package:fzf	typeref:typename:[]Result
Byte	./vim/plugged/fzf/src/tui/tui.go	/^func (t EventType) Byte() byte {$/;"	f	type:tui.EventType	typeref:typename:byte
Bytes	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f	struct:util.Chars	typeref:typename:[]byte
CFill	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
CFill	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
CFill	./vim/plugged/fzf/src/tui/tui.go	/^	CFill(fg Color, bg Color, attr Attr, text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
CHANGE PREVIEW WINDOW ATTRIBUTES	./vim/plugged/fzf/man/man1/fzf.1	/^.SS CHANGE PREVIEW WINDOW ATTRIBUTES$/;"	S	section:fzf""KEY/EVENT BINDINGS
CHANGELOG	./vim/plugged/fzf/CHANGELOG.md	/^CHANGELOG$/;"	c
COMMAND EXECUTION	./vim/plugged/fzf/man/man1/fzf.1	/^.SS COMMAND EXECUTION$/;"	S	section:fzf""KEY/EVENT BINDINGS
CPUProfile	./vim/plugged/fzf/src/options.go	/^	CPUProfile        string$/;"	m	struct:fzf.Options	typeref:typename:string
CPrint	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.LightWindow
CPrint	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.TcellWindow
CPrint	./vim/plugged/fzf/src/tui/tui.go	/^	CPrint(color ColorPair, text string)$/;"	n	interface:tui.Window
CR	./vim/plugged/fzf/src/tui/light.go	/^const CR string = DIM + "␍"$/;"	c	package:tui	typeref:typename:string
CacheKey	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
Can I have the same NERDTree on every tab automatically?	./vim/plugged/nerdtree/README.markdown	/^### Can I have the same NERDTree on every tab automatically?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Can NERDTree access remote files via scp or ftp?	./vim/plugged/nerdtree/README.markdown	/^### Can NERDTree access remote files via scp or ftp?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Can be now written as	./vim/plugged/fzf/CHANGELOG.md	/^  # Can be now written as$/;"	c
Case	./vim/plugged/fzf/src/options.go	/^	Case              Case$/;"	m	struct:fzf.Options	typeref:typename:Case
Case	./vim/plugged/fzf/src/options.go	/^type Case int$/;"	t	package:fzf	typeref:typename:int
CaseIgnore	./vim/plugged/fzf/src/options.go	/^	CaseIgnore$/;"	c	package:fzf
CaseRespect	./vim/plugged/fzf/src/options.go	/^	CaseRespect$/;"	c	package:fzf
CaseSmart	./vim/plugged/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c	package:fzf	typeref:type:Case
Change	./vim/plugged/fzf/src/tui/tui.go	/^	Change$/;"	c	package:tui
Change Log	./vim/plugged/vim-airline/CHANGELOG.md	/^# Change Log$/;"	c
Char	./vim/plugged/fzf/src/tui/tui.go	/^	Char       rune$/;"	m	struct:tui.Event	typeref:typename:rune
Chars	./vim/plugged/fzf/src/util/chars.go	/^type Chars struct {$/;"	s	package:util
Chunk	./vim/plugged/fzf/src/chunklist.go	/^type Chunk struct {$/;"	s	package:fzf
ChunkCache	./vim/plugged/fzf/src/cache.go	/^type ChunkCache struct {$/;"	s	package:fzf
ChunkList	./vim/plugged/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	s	package:fzf
Clear	./vim/plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Clear() {$/;"	f	struct:fzf.ChunkCache
Clear	./vim/plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Clear() {$/;"	f	struct:fzf.ChunkList
Clear	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()                             {}$/;"	f	unknown:tui.FullscreenRenderer
Clear	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f	struct:tui.LightRenderer
Clear	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f	unknown:tui.FullscreenRenderer
Clear	./vim/plugged/fzf/src/tui/tui.go	/^	Clear()$/;"	n	interface:tui.Renderer
Clear	./vim/plugged/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f	type:util.Events
ClearAllBookmarks	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ClearAllBookmarks call g:NERDTreeBookmark.ClearAll() <bar> call b:/;"	c
ClearBookmarks	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=* ClearBookmarks cal/;"	c
ClearOnExit	./vim/plugged/fzf/src/options.go	/^	ClearOnExit       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
ClickFooter	./vim/plugged/fzf/src/tui/tui.go	/^	ClickFooter$/;"	c	package:tui
ClickHeader	./vim/plugged/fzf/src/tui/tui.go	/^	ClickHeader$/;"	c	package:tui
Close	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()                             {}$/;"	f	unknown:tui.FullscreenRenderer
Close	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f	struct:tui.LightRenderer
Close	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f	unknown:tui.FullscreenRenderer
Close	./vim/plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Renderer
ColBorder	./vim/plugged/fzf/src/tui/tui.go	/^	ColBorder               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColBorderLabel	./vim/plugged/fzf/src/tui/tui.go	/^	ColBorderLabel          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrent	./vim/plugged/fzf/src/tui/tui.go	/^	ColCurrent              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursor	./vim/plugged/fzf/src/tui/tui.go	/^	ColCurrentCursor        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursorEmpty	./vim/plugged/fzf/src/tui/tui.go	/^	ColCurrentCursorEmpty   ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentMarker	./vim/plugged/fzf/src/tui/tui.go	/^	ColCurrentMarker        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentMatch	./vim/plugged/fzf/src/tui/tui.go	/^	ColCurrentMatch         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelectedEmpty	./vim/plugged/fzf/src/tui/tui.go	/^	ColCurrentSelectedEmpty ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursor	./vim/plugged/fzf/src/tui/tui.go	/^	ColCursor               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursorEmpty	./vim/plugged/fzf/src/tui/tui.go	/^	ColCursorEmpty          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColDisabled	./vim/plugged/fzf/src/tui/tui.go	/^	ColDisabled             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColFooter	./vim/plugged/fzf/src/tui/tui.go	/^	ColFooter               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColFooterBorder	./vim/plugged/fzf/src/tui/tui.go	/^	ColFooterBorder         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColFooterLabel	./vim/plugged/fzf/src/tui/tui.go	/^	ColFooterLabel          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColGapLine	./vim/plugged/fzf/src/tui/tui.go	/^	ColGapLine              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColGhost	./vim/plugged/fzf/src/tui/tui.go	/^	ColGhost                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColHeader	./vim/plugged/fzf/src/tui/tui.go	/^	ColHeader               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColHeaderBorder	./vim/plugged/fzf/src/tui/tui.go	/^	ColHeaderBorder         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColHeaderLabel	./vim/plugged/fzf/src/tui/tui.go	/^	ColHeaderLabel          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInfo	./vim/plugged/fzf/src/tui/tui.go	/^	ColInfo                 ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInput	./vim/plugged/fzf/src/tui/tui.go	/^	ColInput                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInputBorder	./vim/plugged/fzf/src/tui/tui.go	/^	ColInputBorder          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInputLabel	./vim/plugged/fzf/src/tui/tui.go	/^	ColInputLabel           ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColListBorder	./vim/plugged/fzf/src/tui/tui.go	/^	ColListBorder           ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColListLabel	./vim/plugged/fzf/src/tui/tui.go	/^	ColListLabel            ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColMarker	./vim/plugged/fzf/src/tui/tui.go	/^	ColMarker               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColMatch	./vim/plugged/fzf/src/tui/tui.go	/^	ColMatch                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColNormal	./vim/plugged/fzf/src/tui/tui.go	/^	ColNormal               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreview	./vim/plugged/fzf/src/tui/tui.go	/^	ColPreview              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewBorder	./vim/plugged/fzf/src/tui/tui.go	/^	ColPreviewBorder        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewLabel	./vim/plugged/fzf/src/tui/tui.go	/^	ColPreviewLabel         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewScrollbar	./vim/plugged/fzf/src/tui/tui.go	/^	ColPreviewScrollbar     ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewSpinner	./vim/plugged/fzf/src/tui/tui.go	/^	ColPreviewSpinner       ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPrompt	./vim/plugged/fzf/src/tui/tui.go	/^	ColPrompt               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColScrollbar	./vim/plugged/fzf/src/tui/tui.go	/^	ColScrollbar            ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSelected	./vim/plugged/fzf/src/tui/tui.go	/^	ColSelected             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSelectedMatch	./vim/plugged/fzf/src/tui/tui.go	/^	ColSelectedMatch        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSeparator	./vim/plugged/fzf/src/tui/tui.go	/^	ColSeparator            ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSpinner	./vim/plugged/fzf/src/tui/tui.go	/^	ColSpinner              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
Color	./vim/plugged/fzf/src/tui/tui.go	/^	Color Color$/;"	m	struct:tui.ColorAttr	typeref:typename:Color
Color	./vim/plugged/fzf/src/tui/tui.go	/^type Color int32$/;"	t	package:tui	typeref:typename:int32
ColorAttr	./vim/plugged/fzf/src/tui/tui.go	/^type ColorAttr struct {$/;"	s	package:tui
ColorPair	./vim/plugged/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	s	package:tui
ColorTheme	./vim/plugged/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	s	package:tui
Colored	./vim/plugged/fzf/src/tui/tui.go	/^	Colored          bool$/;"	m	struct:tui.ColorTheme	typeref:typename:bool
Colors	./vim/plugged/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f	struct:fzf.Item	typeref:typename:[]ansiOffset
Columns	./vim/plugged/fzf/src/tui/tui.go	/^	Columns  int$/;"	m	struct:tui.TermSize	typeref:typename:int
Command-level fzf options	./vim/plugged/fzf.vim/README.md	/^#### Command-level fzf options$/;"	t	subsection:fzf :heart: vim""Customization""Configuration options for fzf.vim
Command-level options	./vim/plugged/fzf.vim/README.md	/^#### Command-level options$/;"	t	subsection:fzf :heart: vim""Customization""Configuration options for fzf.vim
Commands	./vim/plugged/fzf.vim/README.md	/^Commands$/;"	s	chapter:fzf :heart: vim
Comparable	./vim/plugged/fzf/src/tui/tui.go	/^func (e Event) Comparable() Event {$/;"	f	unknown:tui.Event	typeref:typename:Event
CompareVersions	./vim/plugged/fzf/src/util/util.go	/^func CompareVersions(v1, v2 string) int {$/;"	f	package:util	typeref:typename:int
Complete-Installation	./install.ps1	/^function Complete-Installation { }$/;"	f
Completion functions	./vim/plugged/fzf.vim/README.md	/^Completion functions$/;"	s	chapter:fzf :heart: vim
CompletionTest	./vim/plugged/fzf/test/test_shell_integration.rb	/^module CompletionTest$/;"	m	module:TestShell
ConcurrentSet	./vim/plugged/fzf/src/util/concurrent_set.go	/^type ConcurrentSet[T comparable] struct {$/;"	t	package:util	typeref:typename:[T comparable] struct { lock sync.RWMutex; items map[T]struct{};}
Confidentiality	./vim/plugged/fzf/SECURITY.md	/^## Confidentiality$/;"	s	chapter:Security Reporting
Configurable and extensible	./vim/plugged/vim-airline/README.md	/^## Configurable and extensible$/;"	s	chapter:Installation
Configuration	./vim/plugged/fzf/README-VIM.md	/^### Configuration$/;"	S	section:FZF Vim integration""`:FZF[!]`
Configuration options for fzf.vim	./vim/plugged/fzf.vim/README.md	/^### Configuration options for fzf.vim$/;"	S	section:fzf :heart: vim""Customization
Configuration options of the base plugin	./vim/plugged/fzf.vim/README.md	/^### Configuration options of the base plugin$/;"	S	section:fzf :heart: vim""Customization
Constrain	./vim/plugged/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f	package:util	typeref:typename:int
Constrain32	./vim/plugged/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f	package:util	typeref:typename:int32
Contributions	./vim/plugged/vim-airline/CONTRIBUTING.md	/^# Contributions$/;"	c
Copy-WithBackup	./install.ps1	/^function Copy-WithBackup {$/;"	f
CopyRunes	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune, from int) {$/;"	f	struct:util.Chars
CountItems	./vim/plugged/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f	package:fzf	typeref:typename:int
Criteria	./vim/plugged/fzf/src/options.go	/^	Criteria          []criterion$/;"	m	struct:fzf.Options	typeref:typename:[]criterion
CtagsGenerate	./.vimrc	/^  command! -nargs=* CtagsGenerate silent! !ctags -R \\\\$/;"	c
Ctrl	./vim/plugged/fzf/src/tui/tui.go	/^	Ctrl   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
CtrlA	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlA$/;"	c	package:tui
CtrlAlt	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlAlt$/;"	c	package:tui
CtrlAltKey	./vim/plugged/fzf/src/tui/tui.go	/^func CtrlAltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
CtrlB	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlB$/;"	c	package:tui
CtrlBackSlash	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlBackSlash$/;"	c	package:tui
CtrlC	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlC$/;"	c	package:tui
CtrlCaret	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlCaret$/;"	c	package:tui
CtrlD	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlD$/;"	c	package:tui
CtrlDelete	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlDelete$/;"	c	package:tui
CtrlE	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlE$/;"	c	package:tui
CtrlF	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlF$/;"	c	package:tui
CtrlG	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlG$/;"	c	package:tui
CtrlH	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlH$/;"	c	package:tui
CtrlJ	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c	package:tui
CtrlK	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlK$/;"	c	package:tui
CtrlL	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlL$/;"	c	package:tui
CtrlN	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlN$/;"	c	package:tui
CtrlO	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlO$/;"	c	package:tui
CtrlP	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlP$/;"	c	package:tui
CtrlQ	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c	package:tui
CtrlR	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlR$/;"	c	package:tui
CtrlRightBracket	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlRightBracket$/;"	c	package:tui
CtrlS	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlS$/;"	c	package:tui
CtrlSlash	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlSlash$/;"	c	package:tui
CtrlSpace	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c	package:tui
CtrlT	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlT$/;"	c	package:tui
CtrlU	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlU$/;"	c	package:tui
CtrlV	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlV$/;"	c	package:tui
CtrlW	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlW$/;"	c	package:tui
CtrlX	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlX$/;"	c	package:tui
CtrlY	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlY$/;"	c	package:tui
CtrlZ	./vim/plugged/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c	package:tui
Current	./vim/plugged/fzf/src/terminal.go	/^	Current    *StatusItem  `json:"current"`$/;"	m	struct:fzf.Status	typeref:typename:*StatusItem
Current	./vim/plugged/fzf/src/tui/tui.go	/^	Current          ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
CurrentMatch	./vim/plugged/fzf/src/tui/tui.go	/^	CurrentMatch     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Cursor	./vim/plugged/fzf/src/tui/tui.go	/^	Cursor           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
CursorLine	./vim/plugged/fzf/src/options.go	/^	CursorLine        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Custom completion	./vim/plugged/fzf.vim/README.md	/^Custom completion$/;"	s	chapter:fzf :heart: vim
Custom fuzzy completion	./vim/plugged/fzf/README.md	/^### Custom fuzzy completion$/;"	S	section:Fuzzy completion for bash and zsh
Custom statusline	./vim/plugged/fzf.vim/README.md	/^### Custom statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Customization	./vim/plugged/fzf.vim/README.md	/^Customization$/;"	s	chapter:fzf :heart: vim
Customizing completion source for paths and directories	./vim/plugged/fzf/README.md	/^### Customizing completion source for paths and directories$/;"	S	section:Fuzzy completion for bash and zsh
Customizing for different types of input	./vim/plugged/fzf/README.md	/^### Customizing for different types of input$/;"	S	section:Advanced topics
Customizing fzf options for completion	./vim/plugged/fzf/README.md	/^### Customizing fzf options for completion$/;"	S	section:Fuzzy completion for bash and zsh
Customizing the look	./vim/plugged/fzf/README.md	/^### Customizing the look$/;"	S	section:Usage
Cycle	./vim/plugged/fzf/src/options.go	/^	Cycle             bool$/;"	m	struct:fzf.Options	typeref:typename:bool
D	./vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
DEBUG	./vim/plugged/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v	package:algo	typeref:typename:bool
DEFAULT_TIMEOUT	./vim/plugged/fzf/test/lib/common.rb	/^DEFAULT_TIMEOUT = 10$/;"	C
DESCRIPTION	./vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SH DESCRIPTION$/;"	s	title:fzf\\-tmux
DESCRIPTION	./vim/plugged/fzf/man/man1/fzf.1	/^.SH DESCRIPTION$/;"	s	title:fzf
DIM	./vim/plugged/fzf/src/tui/light.go	/^const DIM string = "\\x1b[2m"$/;"	c	package:tui	typeref:typename:string
DIRECTORY TRAVERSAL	./vim/plugged/fzf/man/man1/fzf.1	/^.SS DIRECTORY TRAVERSAL$/;"	S	section:fzf""OPTIONS
DISPLAY MODE	./vim/plugged/fzf/man/man1/fzf.1	/^.SS DISPLAY MODE$/;"	S	section:fzf""OPTIONS
Dark256	./vim/plugged/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DarkBg	./vim/plugged/fzf/src/tui/tui.go	/^	DarkBg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Default16	./vim/plugged/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DefaultBorderShape	./vim/plugged/fzf/src/tui/dummy.go	/^var DefaultBorderShape = BorderRounded$/;"	v	package:tui
DefaultBorderShape	./vim/plugged/fzf/src/tui/tcell.go	/^var DefaultBorderShape BorderShape = BorderSharp$/;"	v	package:tui	typeref:typename:BorderShape
DefaultTheme	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) DefaultTheme() *ColorTheme          { return nil }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:*ColorTheme
DefaultTheme	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) DefaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
DefaultTheme	./vim/plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) DefaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
DefaultTheme	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) DefaultTheme() *ColorTheme {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:*ColorTheme
DefaultTheme	./vim/plugged/fzf/src/tui/tui.go	/^	DefaultTheme() *ColorTheme$/;"	n	interface:tui.Renderer	typeref:typename:*ColorTheme
DefaultTtyDevice	./vim/plugged/fzf/src/tui/light.go	/^const DefaultTtyDevice string = "\/dev\/tty"$/;"	c	package:tui	typeref:typename:string
Delete	./vim/plugged/fzf/src/tui/tui.go	/^	Delete$/;"	c	package:tui
Delimiter	./vim/plugged/fzf/src/options.go	/^	Delimiter         Delimiter$/;"	m	struct:fzf.Options	typeref:typename:Delimiter
Delimiter	./vim/plugged/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	s	package:fzf
Demo	./vim/plugged/fzf/README.md	/^### Demo$/;"	S	section:Usage
Dependencies	./vim/plugged/fzf.vim/README.md	/^### Dependencies$/;"	S	section:fzf :heart: vim""Installation
Dim	./vim/plugged/fzf/src/tui/dummy.go	/^	Dim           = Attr(1 << 1)$/;"	c	package:tui
Dim	./vim/plugged/fzf/src/tui/tcell.go	/^	Dim                = Attr(tcell.AttrDim)$/;"	c	package:tui
Disabled	./vim/plugged/fzf/src/tui/tui.go	/^	Disabled         ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Display modes	./vim/plugged/fzf/ADVANCED.md	/^Display modes$/;"	s	chapter:Advanced fzf examples
Display modes	./vim/plugged/fzf/README.md	/^### Display modes$/;"	S	section:Usage
Documentation	./vim/plugged/vim-airline/README.md	/^# Documentation$/;"	c
DotfilesDir	./install.ps1	/^$DotfilesDir = $ScriptDir$/;"	v
Double	./vim/plugged/fzf/src/tui/tui.go	/^	Double bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
DoubleClick	./vim/plugged/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c	package:tui
Down	./vim/plugged/fzf/src/tui/tui.go	/^	Down   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Down	./vim/plugged/fzf/src/tui/tui.go	/^	Down$/;"	c	package:tui
DrawBorder	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) DrawBorder() {$/;"	f	struct:tui.LightWindow
DrawBorder	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) DrawBorder() {$/;"	f	struct:tui.TcellWindow
DrawBorder	./vim/plugged/fzf/src/tui/tui.go	/^	DrawBorder()$/;"	n	interface:tui.Window
DrawHBorder	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) DrawHBorder() {$/;"	f	struct:tui.LightWindow
DrawHBorder	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) DrawHBorder() {$/;"	f	struct:tui.TcellWindow
DrawHBorder	./vim/plugged/fzf/src/tui/tui.go	/^	DrawHBorder()$/;"	n	interface:tui.Window
DurWithin	./vim/plugged/fzf/src/util/util.go	/^func DurWithin($/;"	f	package:util	typeref:typename:time.Duration
Dynamic reloading of the list	./vim/plugged/fzf/ADVANCED.md	/^Dynamic reloading of the list$/;"	s	chapter:Advanced fzf examples
ENVIRONMENT VARIABLES	./vim/plugged/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:fzf
ENVIRONMENT VARIABLES EXPORTED TO CHILD PROCESSES	./vim/plugged/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES EXPORTED TO CHILD PROCESSES$/;"	s	title:fzf
EOF	./vim/plugged/fzf/shell/update-common.sh	/^    cat <<EOF$/;"	h
EXIT STATUS	./vim/plugged/fzf/man/man1/fzf.1	/^.SH EXIT STATUS$/;"	s	title:fzf
EXTENDED SEARCH MODE	./vim/plugged/fzf/man/man1/fzf.1	/^.SH EXTENDED SEARCH MODE$/;"	s	title:fzf
EditBookmarks	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 EditBookmarks call g:NERDTreeBookmark.Edit()$/;"	c
Ellipsis	./vim/plugged/fzf/src/options.go	/^	Ellipsis          *string$/;"	m	struct:fzf.Options	typeref:typename:*string
EmptyMerger	./vim/plugged/fzf/src/merger.go	/^func EmptyMerger(revision revision) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
EmptyTheme	./vim/plugged/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
Enabled	./vim/plugged/fzf/src/terminal.go	/^func (s resumableState) Enabled() bool {$/;"	f	type:fzf.resumableState	typeref:typename:bool
Enclose	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
Enclose	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
Enclose	./vim/plugged/fzf/src/tui/tui.go	/^	Enclose(y int, x int) bool$/;"	n	interface:tui.Window	typeref:typename:bool
EncloseX	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) EncloseX(x int) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
EncloseX	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) EncloseX(x int) bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
EncloseX	./vim/plugged/fzf/src/tui/tui.go	/^	EncloseX(x int) bool$/;"	n	interface:tui.Window	typeref:typename:bool
EncloseY	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) EncloseY(y int) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
EncloseY	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) EncloseY(y int) bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
EncloseY	./vim/plugged/fzf/src/tui/tui.go	/^	EncloseY(y int) bool$/;"	n	interface:tui.Window	typeref:typename:bool
End	./vim/plugged/fzf/src/algo/algo.go	/^	End   int$/;"	m	struct:algo.Result	typeref:typename:int
End	./vim/plugged/fzf/src/tui/tui.go	/^	End$/;"	c	package:tui
Enter	./vim/plugged/fzf/src/tui/tui.go	/^	Enter$/;"	c	package:tui
Environment variables	./vim/plugged/fzf/README.md	/^### Environment variables$/;"	S	section:Usage
Environment variables / Aliases	./vim/plugged/fzf/README.md	/^### Environment variables \/ Aliases$/;"	S	section:Fuzzy completion for bash and zsh
EqualMatch	./vim/plugged/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []ru/;"	f	package:algo	typeref:typename:(Result, *[]int)
Erase	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f	struct:tui.LightWindow
Erase	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f	struct:tui.TcellWindow
Erase	./vim/plugged/fzf/src/tui/tui.go	/^	Erase()$/;"	n	interface:tui.Window
EraseMaybe	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) EraseMaybe() bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
EraseMaybe	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) EraseMaybe() bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
EraseMaybe	./vim/plugged/fzf/src/tui/tui.go	/^	EraseMaybe() bool$/;"	n	interface:tui.Window	typeref:typename:bool
ErrorActionPreference	./install.ps1	/^$ErrorActionPreference = 'Stop'$/;"	v
Esc	./vim/plugged/fzf/src/tui/tui.go	/^	Esc$/;"	c	package:tui
Event	./vim/plugged/fzf/src/tui/tui.go	/^type Event struct {$/;"	s	package:tui
EventBox	./vim/plugged/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	s	package:util
EventType	./vim/plugged/fzf/src/tui/tui.go	/^type EventType int$/;"	t	package:tui	typeref:typename:int
EventType	./vim/plugged/fzf/src/util/eventbox.go	/^type EventType int$/;"	t	package:util	typeref:typename:int
Events	./vim/plugged/fzf/src/util/eventbox.go	/^type Events map[EventType]any$/;"	t	package:util	typeref:typename:map[EventType]any
EvtHeader	./vim/plugged/fzf/src/constants.go	/^	EvtHeader$/;"	c	package:fzf
EvtQuit	./vim/plugged/fzf/src/constants.go	/^	EvtQuit$/;"	c	package:fzf
EvtReadFin	./vim/plugged/fzf/src/constants.go	/^	EvtReadFin$/;"	c	package:fzf
EvtReadFin	./vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c	package:util
EvtReadNew	./vim/plugged/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
EvtReadNew	./vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c	package:util	typeref:typename:EventType
EvtReady	./vim/plugged/fzf/src/constants.go	/^	EvtReady$/;"	c	package:fzf
EvtSearchFin	./vim/plugged/fzf/src/constants.go	/^	EvtSearchFin$/;"	c	package:fzf
EvtSearchFin	./vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c	package:util
EvtSearchNew	./vim/plugged/fzf/src/constants.go	/^	EvtSearchNew$/;"	c	package:fzf
EvtSearchNew	./vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c	package:util
EvtSearchProgress	./vim/plugged/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c	package:fzf
EvtSearchProgress	./vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c	package:util
ExactMatchBoundary	./vim/plugged/fzf/src/algo/algo.go	/^func ExactMatchBoundary(caseSensitive bool, normalize bool, forward bool, text *util.Chars, patt/;"	f	package:algo	typeref:typename:(Result, *[]int)
ExactMatchNaive	./vim/plugged/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern/;"	f	package:algo	typeref:typename:(Result, *[]int)
Exact\\-boundary\\-match (quoted both ends)	./vim/plugged/fzf/man/man1/fzf.1	/^.SS Exact\\-boundary\\-match (quoted both ends)$/;"	S	section:fzf""EXTENDED SEARCH MODE
Exact\\-match (quoted)	./vim/plugged/fzf/man/man1/fzf.1	/^.SS Exact\\-match (quoted)$/;"	S	section:fzf""EXTENDED SEARCH MODE
Exact\\-match by default	./vim/plugged/fzf/man/man1/fzf.1	/^.SS Exact\\-match by default$/;"	S	section:fzf""EXTENDED SEARCH MODE
Example: Customizing `Files` command	./vim/plugged/fzf.vim/README.md	/^#### Example: Customizing `Files` command$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `git grep` wrapper	./vim/plugged/fzf.vim/README.md	/^#### Example: `git grep` wrapper$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Examples	./vim/plugged/fzf/README-VIM.md	/^#### Examples$/;"	t	subsection:FZF Vim integration""`:FZF[!]`""Configuration
Examples	./vim/plugged/fzf/README.md	/^Examples$/;"	s
Examples	./vim/plugged/fzf/man/man1/fzf.1	/^.SS Examples$/;"	S	section:fzf""FIELD INDEX EXPRESSION
ExecCommand	./vim/plugged/fzf/src/util/util_unix.go	/^func (x *Executor) ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	struct:util.Executor	typeref:typename:*exec.Cmd
ExecCommand	./vim/plugged/fzf/src/util/util_windows.go	/^func (x *Executor) ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	struct:util.Executor	typeref:typename:*exec.Cmd
Executing external programs	./vim/plugged/fzf/README.md	/^### Executing external programs$/;"	S	section:Advanced topics
Executor	./vim/plugged/fzf/src/util/util_unix.go	/^type Executor struct {$/;"	s	package:util
Executor	./vim/plugged/fzf/src/util/util_windows.go	/^type Executor struct {$/;"	s	package:util
Exit0	./vim/plugged/fzf/src/options.go	/^	Exit0             bool$/;"	m	struct:fzf.Options	typeref:typename:bool
ExitBecome	./vim/plugged/fzf/src/constants.go	/^	ExitBecome    = 126$/;"	c	package:fzf
ExitError	./vim/plugged/fzf/src/constants.go	/^	ExitError     = 2$/;"	c	package:fzf
ExitInterrupt	./vim/plugged/fzf/src/constants.go	/^	ExitInterrupt = 130$/;"	c	package:fzf
ExitNoMatch	./vim/plugged/fzf/src/constants.go	/^	ExitNoMatch   = 1$/;"	c	package:fzf
ExitOk	./vim/plugged/fzf/src/constants.go	/^	ExitOk        = 0$/;"	c	package:fzf
Expect	./vim/plugged/fzf/src/options.go	/^	Expect            map[tui.Event]string$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event]string
Explanation of `g:fzf_colors`	./vim/plugged/fzf/README-VIM.md	/^##### Explanation of `g:fzf_colors`$/;"	T	subsubsection:FZF Vim integration""`:FZF[!]`""Configuration""Examples
Extended	./vim/plugged/fzf/src/options.go	/^	Extended          bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Extensible pipeline	./vim/plugged/vim-airline/README.md	/^#### Extensible pipeline$/;"	t	section:Installation""Configurable and extensible
Extras	./vim/plugged/vim-airline/README.md	/^## Extras$/;"	s	chapter:Installation
F1	./vim/plugged/fzf/src/tui/tui.go	/^	F1$/;"	c	package:tui
F10	./vim/plugged/fzf/src/tui/tui.go	/^	F10$/;"	c	package:tui
F11	./vim/plugged/fzf/src/tui/tui.go	/^	F11$/;"	c	package:tui
F12	./vim/plugged/fzf/src/tui/tui.go	/^	F12$/;"	c	package:tui
F2	./vim/plugged/fzf/src/tui/tui.go	/^	F2$/;"	c	package:tui
F3	./vim/plugged/fzf/src/tui/tui.go	/^	F3$/;"	c	package:tui
F4	./vim/plugged/fzf/src/tui/tui.go	/^	F4$/;"	c	package:tui
F5	./vim/plugged/fzf/src/tui/tui.go	/^	F5$/;"	c	package:tui
F6	./vim/plugged/fzf/src/tui/tui.go	/^	F6$/;"	c	package:tui
F7	./vim/plugged/fzf/src/tui/tui.go	/^	F7$/;"	c	package:tui
F8	./vim/plugged/fzf/src/tui/tui.go	/^	F8$/;"	c	package:tui
F9	./vim/plugged/fzf/src/tui/tui.go	/^	F9$/;"	c	package:tui
FAQ	./vim/plugged/vim-airline/README.md	/^# FAQ$/;"	c
FIELD INDEX EXPRESSION	./vim/plugged/fzf/man/man1/fzf.1	/^.SH FIELD INDEX EXPRESSION$/;"	s	title:fzf
FIFONAME	./vim/plugged/fzf/test/lib/common.rb	/^  FIFONAME = Dir::Tmpname.create(%w[fzf-fifo]) {}$/;"	C	class:TestBase
FILE	./vim/plugged/fzf/test/lib/common.rb	/^FILE = File.expand_path(__FILE__)$/;"	C
FOOTER	./vim/plugged/fzf/man/man1/fzf.1	/^.SS FOOTER$/;"	S	section:fzf""OPTIONS
FZF	./vim/plugged/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FZF	./vim/plugged/fzf/test/lib/common.rb	/^FZF = "FZF_DEFAULT_OPTS=\\"--no-scrollbar --pointer \\\\> --marker \\\\>\\" FZF_DEFAULT_COMMAND=/;"	C
FZF Vim integration	./vim/plugged/fzf/README-VIM.md	/^FZF Vim integration$/;"	c
Fatal	./vim/plugged/fzf/src/tui/tui.go	/^	Fatal$/;"	c	package:tui
Features	./vim/plugged/vim-airline/README.md	/^# Features$/;"	c
Fg	./vim/plugged/fzf/src/tui/tui.go	/^	Fg               ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Fg	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
FileWord	./vim/plugged/fzf/src/options.go	/^	FileWord          bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Files	./.vimrc	/^command! -bang -nargs=? -complete=dir Files$/;"	c
Files and directories	./vim/plugged/fzf/README.md	/^### Files and directories$/;"	S	section:Fuzzy completion for bash and zsh
Fill	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
Fill	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
Fill	./vim/plugged/fzf/src/tui/tui.go	/^	Fill(text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
FillContinue	./vim/plugged/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c	package:tui	typeref:type:FillReturn
FillNextLine	./vim/plugged/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c	package:tui
FillReturn	./vim/plugged/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t	package:tui	typeref:typename:int
FillSuspend	./vim/plugged/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c	package:tui
Filter	./vim/plugged/fzf/src/options.go	/^	Filter            *string$/;"	m	struct:fzf.Options	typeref:typename:*string
FindIndex	./vim/plugged/fzf/src/merger.go	/^func (mg *Merger) FindIndex(itemIndex int32) int {$/;"	f	struct:fzf.Merger	typeref:typename:int
FindReferences	./.vimrc	/^function! FindReferences()$/;"	f
Fine-tuned configuration	./vim/plugged/vim-airline/README.md	/^#### Fine-tuned configuration$/;"	t	section:Installation""Configurable and extensible
FinishFill	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f	struct:tui.LightWindow
FinishFill	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f	struct:tui.TcellWindow
FinishFill	./vim/plugged/fzf/src/tui/tui.go	/^	FinishFill()$/;"	n	interface:tui.Window
First	./vim/plugged/fzf/src/merger.go	/^func (mg *Merger) First() Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
Fish	./vim/plugged/fzf/src/options.go	/^	Fish              bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Fish shell	./vim/plugged/fzf/README.md	/^### Fish shell$/;"	S	section:Tips
Focus	./vim/plugged/fzf/src/tui/tui.go	/^	Focus$/;"	c	package:tui
Footer	./vim/plugged/fzf/src/options.go	/^	Footer            []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Footer	./vim/plugged/fzf/src/tui/tui.go	/^	Footer           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
FooterBg	./vim/plugged/fzf/src/tui/tui.go	/^	FooterBg         ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
FooterBorder	./vim/plugged/fzf/src/tui/tui.go	/^	FooterBorder     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
FooterBorderShape	./vim/plugged/fzf/src/options.go	/^	FooterBorderShape tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
FooterLabel	./vim/plugged/fzf/src/options.go	/^	FooterLabel       labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
FooterLabel	./vim/plugged/fzf/src/tui/tui.go	/^	FooterLabel      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
ForEach	./vim/plugged/fzf/src/util/concurrent_set.go	/^func (s *ConcurrentSet[T]) ForEach(fn func(item T)) {$/;"	f	unknown:util.T
Force	./vim/plugged/fzf/src/terminal.go	/^func (s *resumableState) Force(flag bool) {$/;"	f	type:fzf.resumableState
ForceTtyIn	./vim/plugged/fzf/src/options.go	/^	ForceTtyIn        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Frequently Asked Questions	./vim/plugged/nerdtree/README.markdown	/^## Frequently Asked Questions$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
FullBg	./vim/plugged/fzf/src/tui/dummy.go	/^	FullBg        = Attr(1 << 11)$/;"	c	package:tui
FullBg	./vim/plugged/fzf/src/tui/tcell.go	/^	FullBg        = Attr(1 << 11)$/;"	c	package:tui
FullscreenRenderer	./vim/plugged/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	s	package:tui
Fuzzy	./vim/plugged/fzf/src/options.go	/^	Fuzzy             bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Fuzzy completion for bash and zsh	./vim/plugged/fzf/README.md	/^Fuzzy completion for bash and zsh$/;"	s
FuzzyAlgo	./vim/plugged/fzf/src/options.go	/^	FuzzyAlgo         algo.Algo$/;"	m	struct:fzf.Options	typeref:typename:algo.Algo
FuzzyMatchV1	./vim/plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []/;"	f	package:algo	typeref:typename:(Result, *[]int)
FuzzyMatchV2	./vim/plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern [/;"	f	package:algo	typeref:typename:(Result, *[]int)
GLOBAL STYLE	./vim/plugged/fzf/man/man1/fzf.1	/^.SS GLOBAL STYLE$/;"	S	section:fzf""OPTIONS
GO	./vim/plugged/fzf/Makefile	/^GO             ?= go$/;"	m
GOOS	./vim/plugged/fzf/Makefile	/^GOOS           ?= $(shell $(GO) env GOOS)$/;"	m
Gap	./vim/plugged/fzf/src/options.go	/^	Gap               int$/;"	m	struct:fzf.Options	typeref:typename:int
GapLine	./vim/plugged/fzf/src/options.go	/^	GapLine           *string$/;"	m	struct:fzf.Options	typeref:typename:*string
GapLine	./vim/plugged/fzf/src/tui/tui.go	/^	GapLine          ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Get	./vim/plugged/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
Get	./vim/plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Get	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f	struct:util.Chars	typeref:typename:rune
GetChar	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event { return Event{} }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
GetChar	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	./vim/plugged/fzf/src/tui/tui.go	/^	GetChar() Event$/;"	n	interface:tui.Renderer	typeref:typename:Event
Getting Started	./vim/plugged/nerdtree/README.markdown	/^## Getting Started$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Ghost	./vim/plugged/fzf/src/options.go	/^	Ghost             string$/;"	m	struct:fzf.Options	typeref:typename:string
Ghost	./vim/plugged/fzf/src/tui/tui.go	/^	Ghost            ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Global options supported by `fzf#wrap`	./vim/plugged/fzf/README-VIM.md	/^### Global options supported by `fzf#wrap`$/;"	S	section:FZF Vim integration""`fzf#wrap`
Gutter	./vim/plugged/fzf/src/tui/tui.go	/^	Gutter           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HEADER	./vim/plugged/fzf/man/man1/fzf.1	/^.SS HEADER$/;"	S	section:fzf""OPTIONS
HELP	./vim/plugged/fzf/man/man1/fzf.1	/^.SS HELP$/;"	S	section:fzf""OPTIONS
HISTORY	./vim/plugged/fzf/man/man1/fzf.1	/^.SS HISTORY$/;"	S	section:fzf""OPTIONS
HasBg	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) HasBg() bool {$/;"	f	struct:tui.ColorPair	typeref:typename:bool
HasBottom	./vim/plugged/fzf/src/tui/tui.go	/^func (s BorderShape) HasBottom() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
HasFullscreenRenderer	./vim/plugged/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasFullscreenRenderer	./vim/plugged/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasLeft	./vim/plugged/fzf/src/tui/tui.go	/^func (s BorderShape) HasLeft() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
HasRight	./vim/plugged/fzf/src/tui/tui.go	/^func (s BorderShape) HasRight() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
HasTop	./vim/plugged/fzf/src/tui/tui.go	/^func (s BorderShape) HasTop() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
Header	./vim/plugged/fzf/src/options.go	/^	Header            []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Header	./vim/plugged/fzf/src/tui/tui.go	/^	Header           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HeaderBg	./vim/plugged/fzf/src/tui/tui.go	/^	HeaderBg         ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HeaderBorder	./vim/plugged/fzf/src/tui/tui.go	/^	HeaderBorder     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HeaderBorderShape	./vim/plugged/fzf/src/options.go	/^	HeaderBorderShape tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
HeaderFirst	./vim/plugged/fzf/src/options.go	/^	HeaderFirst       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HeaderLabel	./vim/plugged/fzf/src/options.go	/^	HeaderLabel       labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
HeaderLabel	./vim/plugged/fzf/src/tui/tui.go	/^	HeaderLabel      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HeaderLines	./vim/plugged/fzf/src/options.go	/^	HeaderLines       int$/;"	m	struct:fzf.Options	typeref:typename:int
HeaderLinesShape	./vim/plugged/fzf/src/options.go	/^	HeaderLinesShape  tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
Height	./vim/plugged/fzf/src/options.go	/^	Height            heightSpec$/;"	m	struct:fzf.Options	typeref:typename:heightSpec
Height	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Height	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Height	./vim/plugged/fzf/src/tui/tui.go	/^	Height() int$/;"	n	interface:tui.Window	typeref:typename:int
Help	./vim/plugged/fzf/src/options.go	/^	Help              bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HexToColor	./vim/plugged/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f	package:tui	typeref:typename:Color
Hide statusline	./vim/plugged/fzf.vim/README.md	/^### Hide statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Hide statusline	./vim/plugged/fzf/README-VIM.md	/^### Hide statusline$/;"	S	section:FZF Vim integration""Tips
HideCursor	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) HideCursor()                        {}$/;"	f	unknown:tui.FullscreenRenderer
HideCursor	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) HideCursor() {$/;"	f	struct:tui.LightRenderer
HideCursor	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) HideCursor() {$/;"	f	unknown:tui.FullscreenRenderer
HideCursor	./vim/plugged/fzf/src/tui/tui.go	/^	HideCursor()$/;"	n	interface:tui.Renderer
Highlights	./vim/plugged/fzf/README.md	/^Highlights$/;"	s
History	./vim/plugged/fzf/src/history.go	/^type History struct {$/;"	s	package:fzf
History	./vim/plugged/fzf/src/options.go	/^	History           *History$/;"	m	struct:fzf.Options	typeref:typename:*History
Home	./vim/plugged/fzf/src/tui/tui.go	/^	Home$/;"	c	package:tui
HomeDir	./install.ps1	/^$HomeDir = $env:USERPROFILE$/;"	v
Host names	./vim/plugged/fzf/README.md	/^### Host names$/;"	S	section:Fuzzy completion for bash and zsh
How can I change the default arrows?	./vim/plugged/nerdtree/README.markdown	/^### How can I change the default arrows?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I close Vim or a tab automatically when NERDTree is the last window?	./vim/plugged/nerdtree/README.markdown	/^### How can I close Vim or a tab automatically when NERDTree is the last window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I map a specific key or shortcut to open NERDTree?	./vim/plugged/nerdtree/README.markdown	/^### How can I map a specific key or shortcut to open NERDTree?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I prevent other buffers replacing NERDTree in its window?	./vim/plugged/nerdtree/README.markdown	/^### How can I prevent other buffers replacing NERDTree in its window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I show lines of files?	./vim/plugged/nerdtree/README.markdown	/^### How can I show lines of files?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How do I open NERDTree automatically when Vim starts?	./vim/plugged/nerdtree/README.markdown	/^### How do I open NERDTree automatically when Vim starts?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Hscroll	./vim/plugged/fzf/src/options.go	/^	Hscroll           bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HscrollOff	./vim/plugged/fzf/src/options.go	/^	HscrollOff        int$/;"	m	struct:fzf.Options	typeref:typename:int
I16	./vim/plugged/fzf/src/util/slab.go	/^	I16 []int16$/;"	m	struct:util.Slab	typeref:typename:[]int16
I32	./vim/plugged/fzf/src/util/slab.go	/^	I32 []int32$/;"	m	struct:util.Slab	typeref:typename:[]int32
INPUT SECTION	./vim/plugged/fzf/man/man1/fzf.1	/^.SS INPUT SECTION$/;"	S	section:fzf""OPTIONS
INPUT/OUTPUT	./vim/plugged/fzf/man/man1/fzf.1	/^.SS INPUT\/OUTPUT$/;"	S	section:fzf""OPTIONS
Index	./vim/plugged/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f	struct:fzf.Item	typeref:typename:int32
Index	./vim/plugged/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f	struct:fzf.Result	typeref:typename:int32
Index	./vim/plugged/fzf/src/terminal.go	/^	Index int    `json:"index"`$/;"	m	struct:fzf.StatusItem	typeref:typename:int
Index	./vim/plugged/fzf/src/util/chars.go	/^	Index int32$/;"	m	struct:util.Chars	typeref:typename:int32
Info	./vim/plugged/fzf/src/tui/tui.go	/^	Info             ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
InfoCommand	./vim/plugged/fzf/src/options.go	/^	InfoCommand       string$/;"	m	struct:fzf.Options	typeref:typename:string
InfoPrefix	./vim/plugged/fzf/src/options.go	/^	InfoPrefix        string$/;"	m	struct:fzf.Options	typeref:typename:string
InfoStyle	./vim/plugged/fzf/src/options.go	/^	InfoStyle         infoStyle$/;"	m	struct:fzf.Options	typeref:typename:infoStyle
Init	./vim/plugged/fzf/src/algo/algo.go	/^func Init(scheme string) bool {$/;"	f	package:algo	typeref:typename:bool
Init	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init() error                        { return nil }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:error
Init	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() error {$/;"	f	struct:tui.LightRenderer	typeref:typename:error
Init	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() error {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:error
Init	./vim/plugged/fzf/src/tui/tui.go	/^	Init() error$/;"	n	interface:tui.Renderer	typeref:typename:error
InitTheme	./vim/plugged/fzf/src/tui/tui.go	/^func InitTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool, hasInputWindow bool, h/;"	f	package:tui
Input	./vim/plugged/fzf/src/options.go	/^	Input             chan string$/;"	m	struct:fzf.Options	typeref:typename:chan string
Input	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) Input() (bool, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []rune)
Input	./vim/plugged/fzf/src/tui/tui.go	/^	Input            ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
InputBg	./vim/plugged/fzf/src/tui/tui.go	/^	InputBg          ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
InputBorder	./vim/plugged/fzf/src/tui/tui.go	/^	InputBorder      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
InputBorderShape	./vim/plugged/fzf/src/options.go	/^	InputBorderShape  tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
InputLabel	./vim/plugged/fzf/src/options.go	/^	InputLabel        labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
InputLabel	./vim/plugged/fzf/src/tui/tui.go	/^	InputLabel       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Inputless	./vim/plugged/fzf/src/options.go	/^	Inputless         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Insert	./vim/plugged/fzf/src/tui/tui.go	/^	Insert$/;"	c	package:tui
Install-VimConfig	./install.ps1	/^function Install-VimConfig {$/;"	f
Installation	./vim/plugged/fzf.vim/README.md	/^Installation$/;"	s	chapter:fzf :heart: vim
Installation	./vim/plugged/fzf/README-VIM.md	/^Installation$/;"	s	chapter:FZF Vim integration
Installation	./vim/plugged/fzf/README.md	/^Installation$/;"	s
Installation	./vim/plugged/nerdtree/README.markdown	/^## Installation$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Installation	./vim/plugged/vim-airline/README.md	/^# Installation$/;"	c
Int	./vim/plugged/fzf/src/tui/tui.go	/^func (t EventType) Int() int {$/;"	f	type:tui.EventType	typeref:typename:int
Integrating with powerline fonts	./vim/plugged/vim-airline/README.md	/^# Integrating with powerline fonts$/;"	c
Introduction	./vim/plugged/fzf/ADVANCED.md	/^Introduction$/;"	s	chapter:Advanced fzf examples
Introduction	./vim/plugged/nerdtree/README.markdown	/^## Introduction$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Invalid	./vim/plugged/fzf/src/tui/tui.go	/^	Invalid$/;"	c	package:tui
IsAwk	./vim/plugged/fzf/src/tokenizer.go	/^func (d Delimiter) IsAwk() bool {$/;"	f	struct:fzf.Delimiter	typeref:typename:bool
IsBytes	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f	struct:util.Chars	typeref:typename:bool
IsColorDefined	./vim/plugged/fzf/src/tui/tui.go	/^func (a ColorAttr) IsColorDefined() bool {$/;"	f	struct:tui.ColorAttr	typeref:typename:bool
IsDefault	./vim/plugged/fzf/src/tui/tui.go	/^func (c Color) IsDefault() bool {$/;"	f	type:tui.Color	typeref:typename:bool
IsEmpty	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f	struct:fzf.Pattern	typeref:typename:bool
IsFull	./vim/plugged/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
IsFull	./vim/plugged/fzf/src/tokenizer.go	/^func (r Range) IsFull() bool {$/;"	f	struct:fzf.Range	typeref:typename:bool
IsFullBgMarker	./vim/plugged/fzf/src/result.go	/^func (co colorOffset) IsFullBgMarker(at int32) bool {$/;"	f	struct:fzf.colorOffset	typeref:typename:bool
IsFullBgMarker	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) IsFullBgMarker() bool {$/;"	f	struct:tui.ColorPair	typeref:typename:bool
IsLightRendererSupported	./vim/plugged/fzf/src/tui/light_unix.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsLightRendererSupported	./vim/plugged/fzf/src/tui/light_windows.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsLocal	./vim/plugged/fzf/src/server.go	/^func (addr listenAddress) IsLocal() bool {$/;"	f	struct:fzf.listenAddress	typeref:typename:bool
IsTty	./vim/plugged/fzf/src/util/util.go	/^func IsTty(file *os.File) bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	./vim/plugged/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	./vim/plugged/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
Italic	./vim/plugged/fzf/src/tui/dummy.go	/^	Italic        = Attr(1 << 2)$/;"	c	package:tui
Italic	./vim/plugged/fzf/src/tui/tcell.go	/^	Italic             = Attr(tcell.AttrItalic)$/;"	c	package:tui
Item	./vim/plugged/fzf/src/item.go	/^type Item struct {$/;"	s	package:fzf
ItemBuilder	./vim/plugged/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t	package:fzf	typeref:typename:func(*Item, []byte) bool
JoinTokens	./vim/plugged/fzf/src/tokenizer.go	/^func JoinTokens(tokens []Token) string {$/;"	f	package:fzf	typeref:typename:string
Jump	./vim/plugged/fzf/src/tui/tui.go	/^	Jump$/;"	c	package:tui
JumpCancel	./vim/plugged/fzf/src/tui/tui.go	/^	JumpCancel$/;"	c	package:tui
JumpLabels	./vim/plugged/fzf/src/options.go	/^	JumpLabels        string$/;"	m	struct:fzf.Options	typeref:typename:string
K	./.vimrc	/^nnoremap <silent> K K$/;"	m
KEY/EVENT BINDING	./vim/plugged/fzf/man/man1/fzf.1	/^.SS KEY\/EVENT BINDING$/;"	S	section:fzf""OPTIONS
KEY/EVENT BINDINGS	./vim/plugged/fzf/man/man1/fzf.1	/^.SH KEY\/EVENT BINDINGS$/;"	s	title:fzf
KeepRight	./vim/plugged/fzf/src/options.go	/^	KeepRight         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Key	./vim/plugged/fzf/src/tui/tui.go	/^func Key(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
Key bindings for command-line	./vim/plugged/fzf/README.md	/^Key bindings for command-line$/;"	s
KeyName	./vim/plugged/fzf/src/tui/tui.go	/^func (e Event) KeyName() string {$/;"	f	unknown:tui.Event	typeref:typename:string
Keymap	./vim/plugged/fzf/src/options.go	/^	Keymap            map[tui.Event][]*action$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event][]*action
KillCommand	./vim/plugged/fzf/src/util/util_unix.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
KillCommand	./vim/plugged/fzf/src/util/util_windows.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
L	./vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	./vim/autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
LAYOUT	./vim/plugged/fzf/man/man1/fzf.1	/^.SS LAYOUT$/;"	S	section:fzf""OPTIONS
LAYOUT OPTIONS	./vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SH LAYOUT OPTIONS$/;"	s	title:fzf\\-tmux
LF	./vim/plugged/fzf/src/tui/light.go	/^const LF string = DIM + "␊"$/;"	c	package:tui	typeref:typename:string
LICENSE	./vim/plugged/fzf/man/man1/fzf.1	/^.SH LICENSE$/;"	s	title:fzf
LIST SECTION	./vim/plugged/fzf/man/man1/fzf.1	/^.SS LIST SECTION$/;"	S	section:fzf""OPTIONS
Layout	./vim/plugged/fzf/src/options.go	/^	Layout            layoutType$/;"	m	struct:fzf.Options	typeref:typename:layoutType
LeadingWhitespaces	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) LeadingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Left	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Left	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Left	./vim/plugged/fzf/src/tui/tui.go	/^	Left   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Left	./vim/plugged/fzf/src/tui/tui.go	/^	Left$/;"	c	package:tui
Left	./vim/plugged/fzf/src/tui/tui.go	/^	Left() int$/;"	n	interface:tui.Window	typeref:typename:int
LeftClick	./vim/plugged/fzf/src/tui/tui.go	/^	LeftClick$/;"	c	package:tui
Len	./vim/plugged/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f	type:fzf.ByOrder	typeref:typename:int
Len	./vim/plugged/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f	type:fzf.ByRelevance	typeref:typename:int
Len	./vim/plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:int
Len	./vim/plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f	type:fzf.byTimeOrder	typeref:typename:int
Length	./vim/plugged/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f	struct:fzf.Merger	typeref:typename:int
Length	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f	struct:util.Chars	typeref:typename:int
Less	./vim/plugged/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f	type:fzf.ByOrder	typeref:typename:bool
Less	./vim/plugged/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevance	typeref:typename:bool
Less	./vim/plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:bool
Less	./vim/plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f	type:fzf.byTimeOrder	typeref:typename:bool
License	./vim/plugged/fzf.vim/README.md	/^License$/;"	s	chapter:fzf :heart: vim
License	./vim/plugged/fzf/BUILD.md	/^License$/;"	s	chapter:Building fzf
License	./vim/plugged/vim-airline/README.md	/^# License$/;"	c
Light256	./vim/plugged/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
LightRenderer	./vim/plugged/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	s	package:tui
LightWindow	./vim/plugged/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	s	package:tui
Lines	./vim/plugged/fzf/src/tui/tui.go	/^	Lines    int$/;"	m	struct:tui.TermSize	typeref:typename:int
Lines	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) Lines(multiLine bool, maxLines int, wrapCols int, wrapSignWidth int, tabstop/;"	f	struct:util.Chars	typeref:typename:([][]rune, bool)
LinkBegin	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) LinkBegin(uri string, params string) {$/;"	f	struct:tui.LightWindow
LinkBegin	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) LinkBegin(uri string, params string) {$/;"	f	struct:tui.TcellWindow
LinkBegin	./vim/plugged/fzf/src/tui/tui.go	/^	LinkBegin(uri string, params string)$/;"	n	interface:tui.Window
LinkEnd	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) LinkEnd() {$/;"	f	struct:tui.LightWindow
LinkEnd	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) LinkEnd() {$/;"	f	struct:tui.TcellWindow
LinkEnd	./vim/plugged/fzf/src/tui/tui.go	/^	LinkEnd()$/;"	n	interface:tui.Window
Linux packages	./vim/plugged/fzf/README.md	/^### Linux packages$/;"	S	section:Installation
List type to handle multiple selections	./vim/plugged/fzf.vim/README.md	/^#### List type to handle multiple selections$/;"	t	subsection:fzf :heart: vim""Customization""Configuration options for fzf.vim
ListBg	./vim/plugged/fzf/src/tui/tui.go	/^	ListBg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
ListBorder	./vim/plugged/fzf/src/tui/tui.go	/^	ListBorder       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
ListBorderShape	./vim/plugged/fzf/src/options.go	/^	ListBorderShape   tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
ListFg	./vim/plugged/fzf/src/tui/tui.go	/^	ListFg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
ListLabel	./vim/plugged/fzf/src/options.go	/^	ListLabel         labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
ListLabel	./vim/plugged/fzf/src/tui/tui.go	/^	ListLabel        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
ListenAddr	./vim/plugged/fzf/src/options.go	/^	ListenAddr        *listenAddress$/;"	m	struct:fzf.Options	typeref:typename:*listenAddress
Load	./vim/plugged/fzf/src/tui/tui.go	/^	Load$/;"	c	package:tui
Lookup	./vim/plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Loop	./vim/plugged/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f	struct:fzf.Matcher
Loop	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) Loop() error {$/;"	f	struct:fzf.Terminal	typeref:typename:error
MAKEFILE	./vim/plugged/fzf/Makefile	/^MAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MEMProfile	./vim/plugged/fzf/src/options.go	/^	MEMProfile        string$/;"	m	struct:fzf.Options	typeref:typename:string
Maintainers	./vim/plugged/vim-airline/README.md	/^# Maintainers$/;"	c
Maintenance	./vim/plugged/vim-airline/CONTRIBUTING.md	/^# Maintenance$/;"	c
MakeBorderStyle	./vim/plugged/fzf/src/tui/tui.go	/^func MakeBorderStyle(shape BorderShape, unicode bool) BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
MakeSlab	./vim/plugged/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f	package:util	typeref:typename:*Slab
Man	./vim/plugged/fzf/src/options.go	/^	Man               bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Mappings	./vim/plugged/fzf.vim/README.md	/^Mappings$/;"	s	chapter:fzf :heart: vim
Margin	./vim/plugged/fzf/src/options.go	/^	Margin            [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
Marker	./vim/plugged/fzf/src/options.go	/^	Marker            *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Marker	./vim/plugged/fzf/src/tui/tui.go	/^	Marker           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
MarkerMulti	./vim/plugged/fzf/src/options.go	/^	MarkerMulti       *[3]string$/;"	m	struct:fzf.Options	typeref:typename:*[3]string
Match	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
Match	./vim/plugged/fzf/src/tui/tui.go	/^	Match            ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
MatchCount	./vim/plugged/fzf/src/terminal.go	/^	MatchCount int          `json:"matchCount"`$/;"	m	struct:fzf.Status	typeref:typename:int
MatchItem	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:(*Result, []Offset, *[]int)
MatchRequest	./vim/plugged/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	s	package:fzf
Matcher	./vim/plugged/fzf/src/matcher.go	/^type Matcher struct {$/;"	s	package:fzf
Matches	./vim/plugged/fzf/src/terminal.go	/^	Matches    []StatusItem `json:"matches"`$/;"	m	struct:fzf.Status	typeref:typename:[]StatusItem
Max	./vim/plugged/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Max16	./vim/plugged/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f	package:util	typeref:typename:int16
Max32	./vim/plugged/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MaxFitAndPad	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) MaxFitAndPad() (int, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int)
MaxX	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxX	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	./vim/plugged/fzf/src/tui/tui.go	/^	MaxX() int$/;"	n	interface:tui.Renderer	typeref:typename:int
MaxY	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxY	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	./vim/plugged/fzf/src/tui/tui.go	/^	MaxY() int$/;"	n	interface:tui.Renderer	typeref:typename:int
Merge	./vim/plugged/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	./vim/plugged/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	./vim/plugged/fzf/src/tui/tui.go	/^func (a ColorAttr) Merge(other ColorAttr) ColorAttr {$/;"	f	struct:tui.ColorAttr	typeref:typename:ColorAttr
Merge	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Merge(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeAttr	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeAttr(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeNonDefault	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeNonDefault(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
Merger	./vim/plugged/fzf/src/merger.go	/^type Merger struct {$/;"	s	package:fzf
Min	./vim/plugged/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Min32	./vim/plugged/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MinHeight	./vim/plugged/fzf/src/options.go	/^	MinHeight         int$/;"	m	struct:fzf.Options	typeref:typename:int
Mod	./vim/plugged/fzf/src/tui/tui.go	/^func (e MouseEvent) Mod() bool {$/;"	f	struct:tui.MouseEvent	typeref:typename:bool
Mouse	./vim/plugged/fzf/src/options.go	/^	Mouse             bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Mouse	./vim/plugged/fzf/src/tui/tui.go	/^	Mouse$/;"	c	package:tui
MouseEvent	./vim/plugged/fzf/src/tui/tui.go	/^	MouseEvent *MouseEvent$/;"	m	struct:tui.Event	typeref:typename:*MouseEvent
MouseEvent	./vim/plugged/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	s	package:tui
Move	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f	struct:tui.LightWindow
Move	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f	struct:tui.TcellWindow
Move	./vim/plugged/fzf/src/tui/tui.go	/^	Move(y int, x int)$/;"	n	interface:tui.Window
MoveAndClear	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.LightWindow
MoveAndClear	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.TcellWindow
MoveAndClear	./vim/plugged/fzf/src/tui/tui.go	/^	MoveAndClear(y int, x int)$/;"	n	interface:tui.Window
Multi	./vim/plugged/fzf/src/options.go	/^	Multi             int$/;"	m	struct:fzf.Options	typeref:typename:int
Multi	./vim/plugged/fzf/src/tui/tui.go	/^	Multi$/;"	c	package:tui
MultiLine	./vim/plugged/fzf/src/options.go	/^	MultiLine         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
MutexProfile	./vim/plugged/fzf/src/options.go	/^	MutexProfile      string$/;"	m	struct:fzf.Options	typeref:typename:string
N	./.vimrc	/^nnoremap <silent> N Nzzzv$/;"	m
NAME	./vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SH NAME$/;"	s	title:fzf\\-tmux
NAME	./vim/plugged/fzf/man/man1/fzf.1	/^.SH NAME$/;"	s	title:fzf
NERDTree	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTree :call g:NERDTreeCreator.CreateTabTree('<args>')$/;"	c
NERDTree	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree Change Log	./vim/plugged/nerdtree/CHANGELOG.md	/^# NERDTree Change Log$/;"	c
NERDTree Plugins	./vim/plugged/nerdtree/README.markdown	/^## NERDTree Plugins$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
NERDTreeAddKeyMap	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeAutoClose	./.vimrc	/^augroup NERDTreeAutoClose$/;"	a
NERDTreeCWD	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeCWD call NERDTreeCWD()$/;"	c
NERDTreeCWD	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirOnTabSwitch	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeChangePermissions	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeChangePermissions()$/;"	f
NERDTreeClose	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeClose :call g:NERDTree.Close()$/;"	c
NERDTreeCopyNode	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeDeleteNode	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	./vim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	./vim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeExecuteFileWindows	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileWindows()$/;"	f
NERDTreeExplore	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeExplore :call g:NERDTreeCreator.CreateExploreTree('/;"	c
NERDTreeFind	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=file -bar NERDTreeFind call s:findAndRevealPath('<args>')$/;"	c
NERDTreeFocus	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeFocus call NERDTreeFocus()$/;"	c
NERDTreeFocus	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFromBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=1 -complete=customlist,nerdtree#completeBookmarks -bar NERDTreeFromBookmark call/;"	c
NERDTreeHijackNetrw	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirror	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeMirror call g:NERDTreeCreator.CreateMirror()$/;"	c
NERDTreeMoveNode	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRefreshRoot	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeRefreshRoot call s:refreshRoot()$/;"	c
NERDTreeRender	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInExplorer	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInExplorer()$/;"	f
NERDTreeRevealInFinder	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeSystemCommand	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeSystemCommand()$/;"	f
NERDTreeToggle	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeToggle :call g:NERDTreeCreator.ToggleTabTree('<args/;"	c
NERDTreeToggleVCS	./vim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
NERDTreeVCS	./vim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
NOTE	./vim/plugged/fzf/man/man1/fzf.1	/^.SS NOTE$/;"	S	section:fzf""OPTIONS
Name	./vim/plugged/fzf/src/terminal.go	/^func (a actionType) Name() string {$/;"	f	type:fzf.actionType	typeref:typename:string
Name	./vim/plugged/fzf/src/tui/tui.go	/^func (e MouseEvent) Name() string {$/;"	f	struct:tui.MouseEvent	typeref:typename:string
NeedScrollbarRedraw	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NeedScrollbarRedraw() bool          { return false }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
NeedScrollbarRedraw	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) NeedScrollbarRedraw() bool {$/;"	f	struct:tui.LightRenderer	typeref:typename:bool
NeedScrollbarRedraw	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NeedScrollbarRedraw() bool {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
NeedScrollbarRedraw	./vim/plugged/fzf/src/tui/tui.go	/^	NeedScrollbarRedraw() bool$/;"	n	interface:tui.Renderer	typeref:typename:bool
Negation	./vim/plugged/fzf/man/man1/fzf.1	/^.SS Negation$/;"	S	section:fzf""EXTENDED SEARCH MODE
New API: multiple fzf arguments before "--"	./vim/plugged/fzf/CHANGELOG.md	/^  # New API: multiple fzf arguments before "--"$/;"	c
New-DirectoryIfMissing	./install.ps1	/^function New-DirectoryIfMissing {$/;"	f
NewAtomicBool	./vim/plugged/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f	package:util	typeref:typename:*AtomicBool
NewChunkCache	./vim/plugged/fzf/src/cache.go	/^func NewChunkCache() *ChunkCache {$/;"	f	package:fzf	typeref:typename:*ChunkCache
NewChunkList	./vim/plugged/fzf/src/chunklist.go	/^func NewChunkList(cache *ChunkCache, trans ItemBuilder) *ChunkList {$/;"	f	package:fzf	typeref:typename:*ChunkList
NewColorAttr	./vim/plugged/fzf/src/tui/tui.go	/^func NewColorAttr() ColorAttr {$/;"	f	package:tui	typeref:typename:ColorAttr
NewColorPair	./vim/plugged/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color, attr Attr) ColorPair {$/;"	f	package:tui	typeref:typename:ColorPair
NewConcurrentSet	./vim/plugged/fzf/src/util/concurrent_set.go	/^func NewConcurrentSet[T comparable]() *ConcurrentSet[T] {$/;"	f	package:util	typeref:typename:() *
NewEventBox	./vim/plugged/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f	package:util	typeref:typename:*EventBox
NewExecutor	./vim/plugged/fzf/src/util/util_unix.go	/^func NewExecutor(withShell string) *Executor {$/;"	f	package:util	typeref:typename:*Executor
NewExecutor	./vim/plugged/fzf/src/util/util_windows.go	/^func NewExecutor(withShell string) *Executor {$/;"	f	package:util	typeref:typename:*Executor
NewFullscreenRenderer	./vim/plugged/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f	package:tui	typeref:typename:Renderer
NewHistory	./vim/plugged/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f	package:fzf	typeref:typename:(*History, error)
NewLightRenderer	./vim/plugged/fzf/src/tui/light.go	/^func NewLightRenderer(ttyDefault string, ttyin *os.File, theme *ColorTheme, forceBlack bool, mou/;"	f	package:tui	typeref:typename:(Renderer, error)
NewMatcher	./vim/plugged/fzf/src/matcher.go	/^func NewMatcher(cache *ChunkCache, patternBuilder func([]rune) *Pattern,$/;"	f	package:fzf	typeref:typename:*Matcher
NewMerger	./vim/plugged/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool, revision revision, min/;"	f	package:fzf	typeref:typename:*Merger
NewReader	./vim/plugged/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, executor *util.Executor, delim/;"	f	package:fzf	typeref:typename:*Reader
NewTerminal	./vim/plugged/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox, executor *util.Executor) (*Terminal, er/;"	f	package:fzf	typeref:typename:(*Terminal, error)
NewWindow	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, windowType Wind/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, windowType WindowTyp/;"	f	struct:tui.LightRenderer	typeref:typename:Window
NewWindow	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, windowType Wind/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	./vim/plugged/fzf/src/tui/tui.go	/^	NewWindow(top int, left int, width int, height int, windowType WindowType, borderStyle BorderSt/;"	n	interface:tui.Renderer	typeref:typename:Window
NoColorPair	./vim/plugged/fzf/src/tui/tui.go	/^func NoColorPair() ColorPair {$/;"	f	package:tui	typeref:typename:ColorPair
NoColorTheme	./vim/plugged/fzf/src/tui/tui.go	/^func NoColorTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
NoWinpty	./vim/plugged/fzf/src/options.go	/^	NoWinpty          bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Normalize	./vim/plugged/fzf/src/options.go	/^	Normalize         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
NormalizeRunes	./vim/plugged/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f	package:algo	typeref:typename:[]rune
Notes	./vim/plugged/fzf/SECURITY.md	/^## Notes$/;"	s	chapter:Security Reporting
Nth	./vim/plugged/fzf/src/options.go	/^	Nth               []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
Nth	./vim/plugged/fzf/src/tui/tui.go	/^	Nth              ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
NumLines	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) NumLines(atMost int) (int, bool) {$/;"	f	struct:util.Chars	typeref:typename:(int, bool)
OPTIONS	./vim/plugged/fzf/man/man1/fzf.1	/^.SH OPTIONS$/;"	s	title:fzf
OR operator	./vim/plugged/fzf/man/man1/fzf.1	/^.SS OR operator$/;"	S	section:fzf""EXTENDED SEARCH MODE
OTHERS	./vim/plugged/fzf/man/man1/fzf.1	/^.SS OTHERS$/;"	S	section:fzf""OPTIONS
Offset	./vim/plugged/fzf/src/result.go	/^type Offset [2]int32$/;"	t	package:fzf	typeref:typename:[2]int32
Once	./vim/plugged/fzf/src/util/util.go	/^func Once(nextResponse bool) func() bool {$/;"	f	package:util	typeref:typename:func() bool
One	./vim/plugged/fzf/src/tui/tui.go	/^	One$/;"	c	package:tui
OpenBookmark	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 OpenBookmark call /;"	c
Options	./vim/plugged/fzf/README.md	/^### Options$/;"	S	section:Usage
Options	./vim/plugged/fzf/src/options.go	/^type Options struct {$/;"	s	package:fzf
Output	./vim/plugged/fzf/src/options.go	/^	Output            chan string$/;"	m	struct:fzf.Options	typeref:typename:chan string
PREVIEW BINDING	./vim/plugged/fzf/man/man1/fzf.1	/^.SS PREVIEW BINDING$/;"	S	section:fzf""KEY/EVENT BINDINGS
PREVIEW WINDOW	./vim/plugged/fzf/man/man1/fzf.1	/^.SS PREVIEW WINDOW$/;"	S	section:fzf""OPTIONS
Padding	./vim/plugged/fzf/src/options.go	/^	Padding           [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
PageDown	./vim/plugged/fzf/src/tui/tui.go	/^	PageDown$/;"	c	package:tui
PageUp	./vim/plugged/fzf/src/tui/tui.go	/^	PageUp$/;"	c	package:tui
ParseOptions	./vim/plugged/fzf/src/options.go	/^func ParseOptions(useDefaults bool, args []string) (*Options, error) {$/;"	f	package:fzf	typeref:typename:(*Options, error)
ParseRange	./vim/plugged/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f	package:fzf	typeref:typename:(Range, bool)
PassMerger	./vim/plugged/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool, revision revision) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
PassThrough	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) PassThrough(string)                 {}$/;"	f	unknown:tui.FullscreenRenderer
PassThrough	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) PassThrough(str string) {$/;"	f	unknown:tui.LightRenderer
PassThrough	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) PassThrough(str string) {$/;"	f	unknown:tui.FullscreenRenderer
PassThrough	./vim/plugged/fzf/src/tui/tui.go	/^	PassThrough(string)$/;"	n	interface:tui.Renderer
Pattern	./vim/plugged/fzf/src/pattern.go	/^type Pattern struct {$/;"	s	package:fzf
Pause	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)                         {}$/;"	f	unknown:tui.FullscreenRenderer
Pause	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f	struct:tui.LightRenderer
Pause	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(clear bool) {$/;"	f	unknown:tui.FullscreenRenderer
Pause	./vim/plugged/fzf/src/tui/tui.go	/^	Pause(clear bool)$/;"	n	interface:tui.Renderer
Peek	./vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f	struct:util.EventBox	typeref:typename:bool
Performance	./vim/plugged/fzf/README.md	/^### Performance$/;"	S	section:Advanced topics
Performance	./vim/plugged/vim-airline/README.md	/^# Performance$/;"	c
Phony	./vim/plugged/fzf/src/options.go	/^	Phony             bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Plug	./vim/autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	./vim/autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	./vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	./vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	./vim/autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	./vim/autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	./vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	./vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	./vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
Pointer	./vim/plugged/fzf/src/options.go	/^	Pointer           *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Popup window	./vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SS Popup window$/;"	S	section:fzf\\-tmux""LAYOUT OPTIONS
Position	./vim/plugged/fzf/src/terminal.go	/^	Position   int          `json:"position"`$/;"	m	struct:fzf.Status	typeref:typename:int
PrefixMatch	./vim/plugged/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Prepend	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) Prepend(prefix string) {$/;"	f	struct:util.Chars
Prerequisites	./vim/plugged/fzf/BUILD.md	/^### Prerequisites$/;"	S	section:Building fzf""Build instructions
Press CTRL-A to select 100K items and see the sum of all the numbers	./vim/plugged/fzf/CHANGELOG.md	/^  # Press CTRL-A to select 100K items and see the sum of all the numbers$/;"	c
Preview	./vim/plugged/fzf/src/options.go	/^	Preview           previewOpts$/;"	m	struct:fzf.Options	typeref:typename:previewOpts
Preview window	./vim/plugged/fzf.vim/README.md	/^#### Preview window$/;"	t	subsection:fzf :heart: vim""Customization""Configuration options for fzf.vim
Preview window	./vim/plugged/fzf/README.md	/^### Preview window$/;"	S	section:Advanced topics
PreviewBg	./vim/plugged/fzf/src/tui/tui.go	/^	PreviewBg        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewBorder	./vim/plugged/fzf/src/tui/tui.go	/^	PreviewBorder    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewFg	./vim/plugged/fzf/src/tui/tui.go	/^	PreviewFg        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewLabel	./vim/plugged/fzf/src/options.go	/^	PreviewLabel      labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
PreviewLabel	./vim/plugged/fzf/src/tui/tui.go	/^	PreviewLabel     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewScrollDown	./vim/plugged/fzf/src/tui/tui.go	/^	PreviewScrollDown$/;"	c	package:tui
PreviewScrollUp	./vim/plugged/fzf/src/tui/tui.go	/^	PreviewScrollUp$/;"	c	package:tui
PreviewScrollbar	./vim/plugged/fzf/src/tui/tui.go	/^	PreviewScrollbar ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewTag	./.vimrc	/^function! PreviewTag()$/;"	f
Previewing an image	./vim/plugged/fzf/README.md	/^### Previewing an image$/;"	S	section:Advanced topics
Previous: fzf arguments given as a single string argument	./vim/plugged/fzf/CHANGELOG.md	/^  # Previous: fzf arguments given as a single string argument$/;"	c
Print	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f	struct:tui.LightWindow
Print	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f	struct:tui.TcellWindow
Print	./vim/plugged/fzf/src/tui/tui.go	/^	Print(text string)$/;"	n	interface:tui.Window
PrintQuery	./vim/plugged/fzf/src/options.go	/^	PrintQuery        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
PrintSep	./vim/plugged/fzf/src/options.go	/^	PrintSep          string$/;"	m	struct:fzf.Options	typeref:typename:string
Printer	./vim/plugged/fzf/src/options.go	/^	Printer           func(string)$/;"	m	struct:fzf.Options	typeref:typename:func(string)
Process IDs	./vim/plugged/fzf/README.md	/^### Process IDs$/;"	S	section:Fuzzy completion for bash and zsh
Progress	./vim/plugged/fzf/src/terminal.go	/^	Progress   int          `json:"progress"`$/;"	m	struct:fzf.Status	typeref:typename:int
Prompt	./vim/plugged/fzf/src/options.go	/^	Prompt            string$/;"	m	struct:fzf.Options	typeref:typename:string
Prompt	./vim/plugged/fzf/src/tui/tui.go	/^	Prompt           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Protect	./vim/plugged/fzf/src/protector/protector.go	/^func Protect() {}$/;"	f	package:protector
Protect	./vim/plugged/fzf/src/protector/protector_openbsd.go	/^func Protect() {$/;"	f	package:protector
ProxyScript	./vim/plugged/fzf/src/options.go	/^	ProxyScript       string$/;"	m	struct:fzf.Options	typeref:typename:string
Push	./vim/plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f	struct:fzf.ChunkList	typeref:typename:bool
PxHeight	./vim/plugged/fzf/src/tui/tui.go	/^	PxHeight int$/;"	m	struct:tui.TermSize	typeref:typename:int
PxWidth	./vim/plugged/fzf/src/tui/tui.go	/^	PxWidth  int$/;"	m	struct:tui.TermSize	typeref:typename:int
Query	./vim/plugged/fzf/src/options.go	/^	Query             string$/;"	m	struct:fzf.Options	typeref:typename:string
Query	./vim/plugged/fzf/src/terminal.go	/^	Query      string       `json:"query"`$/;"	m	struct:fzf.Status	typeref:typename:string
QuoteEntry	./vim/plugged/fzf/src/util/util_unix.go	/^func (x *Executor) QuoteEntry(entry string) string {$/;"	f	struct:util.Executor	typeref:typename:string
QuoteEntry	./vim/plugged/fzf/src/util/util_windows.go	/^func (x *Executor) QuoteEntry(entry string) string {$/;"	f	struct:util.Executor	typeref:typename:string
R	./vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
RELOAD INPUT	./vim/plugged/fzf/man/man1/fzf.1	/^.SS RELOAD INPUT$/;"	S	section:fzf""KEY/EVENT BINDINGS
REVISION	./vim/plugged/fzf/Makefile	/^REVISION       := $(FZF_REVISION)$/;"	m
REVISION	./vim/plugged/fzf/Makefile	/^REVISION       := $(shell git log -n 1 --pretty=format:%h --abbrev=8 -- $(SOURCES) 2> \/dev\/nul/;"	m
ROOT_DIR	./vim/plugged/fzf/Makefile	/^ROOT_DIR       := $(shell dirname $(MAKEFILE))$/;"	m
Range	./vim/plugged/fzf/src/tokenizer.go	/^type Range struct {$/;"	s	package:fzf
RangesToString	./vim/plugged/fzf/src/tokenizer.go	/^func RangesToString(ranges []Range) string {$/;"	f	package:fzf	typeref:typename:string
Rationale	./vim/plugged/fzf.vim/README.md	/^Rationale$/;"	s	chapter:fzf :heart: vim
Rationale	./vim/plugged/vim-airline/README.md	/^# Rationale$/;"	c
Read	./vim/plugged/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
Read	./vim/plugged/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
ReadBookmarks	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ReadBookmarks call g:NERDTreeBookmark.CacheBookmarks(0) <bar> call/;"	c
ReadSource	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) ReadSource(inputChan chan string, roots []string, opts walkerOpts, ignores []st/;"	f	struct:fzf.Reader
ReadZero	./vim/plugged/fzf/src/options.go	/^	ReadZero          bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Reader	./vim/plugged/fzf/src/reader.go	/^type Reader struct {$/;"	s	package:fzf
Reading	./vim/plugged/fzf/src/terminal.go	/^	Reading    bool         `json:"reading"`$/;"	m	struct:fzf.Status	typeref:typename:bool
Reducer example	./vim/plugged/fzf.vim/README.md	/^### Reducer example$/;"	S	section:fzf :heart: vim""Custom completion
Refresh	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()                           {}$/;"	f	unknown:tui.FullscreenRenderer
Refresh	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f	struct:tui.LightRenderer
Refresh	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f	struct:tui.LightWindow
Refresh	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f	unknown:tui.FullscreenRenderer
Refresh	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f	struct:tui.TcellWindow
Refresh	./vim/plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Renderer
Refresh	./vim/plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Window
RefreshWindows	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f	struct:tui.LightRenderer
RefreshWindows	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	./vim/plugged/fzf/src/tui/tui.go	/^	RefreshWindows(windows []Window)$/;"	n	interface:tui.Renderer
Related projects	./vim/plugged/fzf/README.md	/^Related projects$/;"	s
Reloading the candidate list	./vim/plugged/fzf/README.md	/^### Reloading the candidate list$/;"	S	section:Advanced topics
Remove	./vim/plugged/fzf/src/util/concurrent_set.go	/^func (s *ConcurrentSet[T]) Remove(item T) {$/;"	f	unknown:util.T
RenameSymbol	./.vimrc	/^function! RenameSymbol()$/;"	f
Renderer	./vim/plugged/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	i	package:tui
RepeatToFill	./vim/plugged/fzf/src/util/util.go	/^func RepeatToFill(str string, length int, limit int) string {$/;"	f	package:util	typeref:typename:string
Reporting	./vim/plugged/fzf/SECURITY.md	/^## Reporting$/;"	s	chapter:Security Reporting
Reset	./vim/plugged/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool/;"	f	struct:fzf.Matcher
Resize	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resize(maxHeightFunc func(int) int) {}$/;"	f	unknown:tui.FullscreenRenderer
Resize	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Resize(maxHeightFunc func(int) int) {$/;"	f	struct:tui.LightRenderer
Resize	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resize(maxHeightFunc func(int) int) {}$/;"	f	unknown:tui.FullscreenRenderer
Resize	./vim/plugged/fzf/src/tui/tui.go	/^	Resize$/;"	c	package:tui
Resize	./vim/plugged/fzf/src/tui/tui.go	/^	Resize(maxHeightFunc func(int) int)$/;"	n	interface:tui.Renderer
Respecting `.gitignore`	./vim/plugged/fzf/README.md	/^### Respecting `.gitignore`$/;"	S	section:Tips
Result	./vim/plugged/fzf/src/algo/algo.go	/^type Result struct {$/;"	s	package:algo
Result	./vim/plugged/fzf/src/result.go	/^type Result struct {$/;"	s	package:fzf
Result	./vim/plugged/fzf/src/tui/tui.go	/^	Result$/;"	c	package:tui
Resume	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool, bool)                  {}$/;"	f	unknown:tui.FullscreenRenderer
Resume	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool, sigcont bool) {$/;"	f	struct:tui.LightRenderer
Resume	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(clear bool, sigcont bool) {$/;"	f	unknown:tui.FullscreenRenderer
Resume	./vim/plugged/fzf/src/tui/tui.go	/^	Resume(clear bool, sigcont bool)$/;"	n	interface:tui.Renderer
RevealBookmark	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 RevealBookmark :ca/;"	c
Reverse	./vim/plugged/fzf/src/tui/dummy.go	/^	Reverse       = Attr(1 << 6)$/;"	c	package:tui
Reverse	./vim/plugged/fzf/src/tui/tcell.go	/^	Reverse            = Attr(tcell.AttrReverse)$/;"	c	package:tui
Revision	./vim/plugged/fzf/src/merger.go	/^func (mg *Merger) Revision() revision {$/;"	f	struct:fzf.Merger	typeref:typename:revision
Rg	./.vimrc	/^  command! -bang -nargs=* Rg$/;"	c
Right	./vim/plugged/fzf/src/tui/tui.go	/^	Right$/;"	c	package:tui
RightClick	./vim/plugged/fzf/src/tui/tui.go	/^	RightClick$/;"	c	package:tui
Ripgrep integration	./vim/plugged/fzf/ADVANCED.md	/^Ripgrep integration$/;"	s	chapter:Advanced fzf examples
Run	./vim/plugged/fzf/src/core.go	/^func Run(opts *Options) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
RunAtExitFuncs	./vim/plugged/fzf/src/util/atexit.go	/^func RunAtExitFuncs() {$/;"	f	package:util
RunOnce	./vim/plugged/fzf/src/util/util.go	/^func RunOnce(f func()) func() {$/;"	f	package:util	typeref:typename:func()
Rune	./vim/plugged/fzf/src/tui/tui.go	/^	Rune EventType = iota$/;"	c	package:tui	typeref:type:EventType
RunesToChars	./vim/plugged/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f	package:util	typeref:typename:Chars
RunesWidth	./vim/plugged/fzf/src/util/util.go	/^func RunesWidth(runes []rune, prefixWidth int, tabstop int, limit int) (int, int) {$/;"	f	package:util	typeref:typename:(int, int)
S	./vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	./vim/plugged/fzf/src/tui/tui.go	/^	S      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
SCRIPTING	./vim/plugged/fzf/man/man1/fzf.1	/^.SS SCRIPTING$/;"	S	section:fzf""OPTIONS
SEARCH	./vim/plugged/fzf/man/man1/fzf.1	/^.SS SEARCH$/;"	S	section:fzf""OPTIONS
SEE ALSO	./vim/plugged/fzf/man/man1/fzf.1	/^.SH SEE ALSO$/;"	s	title:fzf
SHELL INTEGRATION	./vim/plugged/fzf/man/man1/fzf.1	/^.SS SHELL INTEGRATION$/;"	S	section:fzf""OPTIONS
SLeftClick	./vim/plugged/fzf/src/tui/tui.go	/^	SLeftClick$/;"	c	package:tui
SOURCES	./vim/plugged/fzf/Makefile	/^SOURCES        := $(wildcard *.go src\/*.go src\/*\/*.go shell\/*sh man\/man1\/*.1) $(MAKEFILE)$/;"	m
SRightClick	./vim/plugged/fzf/src/tui/tui.go	/^	SRightClick$/;"	c	package:tui
SScrollDown	./vim/plugged/fzf/src/tui/tui.go	/^	SScrollDown$/;"	c	package:tui
SScrollUp	./vim/plugged/fzf/src/tui/tui.go	/^	SScrollUp$/;"	c	package:tui
SYNOPSIS	./vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SH SYNOPSIS$/;"	s	title:fzf\\-tmux
SYNOPSIS	./vim/plugged/fzf/man/man1/fzf.1	/^.SH SYNOPSIS$/;"	s	title:fzf
Scheme	./vim/plugged/fzf/src/options.go	/^	Scheme            string$/;"	m	struct:fzf.Options	typeref:typename:string
Score	./vim/plugged/fzf/src/algo/algo.go	/^	Score int$/;"	m	struct:algo.Result	typeref:typename:int
Screenshots	./vim/plugged/vim-airline/README.md	/^# Screenshots$/;"	c
ScriptDir	./install.ps1	/^$ScriptDir = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition$/;"	v
ScrollDown	./vim/plugged/fzf/src/tui/tui.go	/^	ScrollDown$/;"	c	package:tui
ScrollOff	./vim/plugged/fzf/src/options.go	/^	ScrollOff         int$/;"	m	struct:fzf.Options	typeref:typename:int
ScrollUp	./vim/plugged/fzf/src/tui/tui.go	/^	ScrollUp$/;"	c	package:tui
Scrollbar	./vim/plugged/fzf/src/options.go	/^	Scrollbar         *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Scrollbar	./vim/plugged/fzf/src/tui/tui.go	/^	Scrollbar        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Seamless integration	./vim/plugged/vim-airline/README.md	/^## Seamless integration$/;"	s	chapter:Installation
Search	./vim/plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Search syntax	./vim/plugged/fzf/README.md	/^### Search syntax$/;"	S	section:Usage
Security Reporting	./vim/plugged/fzf/SECURITY.md	/^# Security Reporting$/;"	c
Select1	./vim/plugged/fzf/src/options.go	/^	Select1           bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Selected	./vim/plugged/fzf/src/terminal.go	/^	Selected   []StatusItem `json:"selected"`$/;"	m	struct:fzf.Status	typeref:typename:[]StatusItem
SelectedBg	./vim/plugged/fzf/src/tui/tui.go	/^	SelectedBg       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
SelectedFg	./vim/plugged/fzf/src/tui/tui.go	/^	SelectedFg       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
SelectedMatch	./vim/plugged/fzf/src/tui/tui.go	/^	SelectedMatch    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Separator	./vim/plugged/fzf/src/options.go	/^	Separator         *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Separator	./vim/plugged/fzf/src/tui/tui.go	/^	Separator        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Set	./vim/plugged/fzf/src/terminal.go	/^func (s *resumableState) Set(flag bool) {$/;"	f	type:fzf.resumableState
Set	./vim/plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Set	./vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value any) {$/;"	f	struct:util.EventBox
SetNonblock	./vim/plugged/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetNonblock	./vim/plugged/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetStdin	./vim/plugged/fzf/src/util/util_unix.go	/^func SetStdin(file *os.File) {$/;"	f	package:util
SetStdin	./vim/plugged/fzf/src/util/util_windows.go	/^func SetStdin(file *os.File) {$/;"	f	package:util
SetWrapSign	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) SetWrapSign(sign string, width int) {$/;"	f	struct:tui.LightWindow
SetWrapSign	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) SetWrapSign(sign string, width int) {$/;"	f	struct:tui.TcellWindow
SetWrapSign	./vim/plugged/fzf/src/tui/tui.go	/^	SetWrapSign(string, int)$/;"	n	interface:tui.Window
Setting up shell integration	./vim/plugged/fzf/README.md	/^### Setting up shell integration$/;"	S	section:Installation
Setup-FzfBinary	./install.ps1	/^function Setup-FzfBinary {$/;"	f
Shell	./vim/plugged/fzf/test/lib/common.rb	/^class Shell$/;"	c
Shift	./vim/plugged/fzf/src/tui/tui.go	/^	Shift  bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
ShiftDelete	./vim/plugged/fzf/src/tui/tui.go	/^	ShiftDelete$/;"	c	package:tui
ShiftDown	./vim/plugged/fzf/src/tui/tui.go	/^	ShiftDown$/;"	c	package:tui
ShiftLeft	./vim/plugged/fzf/src/tui/tui.go	/^	ShiftLeft$/;"	c	package:tui
ShiftRight	./vim/plugged/fzf/src/tui/tui.go	/^	ShiftRight$/;"	c	package:tui
ShiftTab	./vim/plugged/fzf/src/tui/tui.go	/^	ShiftTab$/;"	c	package:tui
ShiftUp	./vim/plugged/fzf/src/tui/tui.go	/^	ShiftUp$/;"	c	package:tui
ShouldEmitResizeEvent	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) ShouldEmitResizeEvent() bool        { return false }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
ShouldEmitResizeEvent	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) ShouldEmitResizeEvent() bool {$/;"	f	struct:tui.LightRenderer	typeref:typename:bool
ShouldEmitResizeEvent	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) ShouldEmitResizeEvent() bool {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
ShouldEmitResizeEvent	./vim/plugged/fzf/src/tui/tui.go	/^	ShouldEmitResizeEvent() bool$/;"	n	interface:tui.Renderer	typeref:typename:bool
Show-InstallationSummary	./install.ps1	/^function Show-InstallationSummary { Write-LogSuccess "Dotfiles installed." }$/;"	f
ShowCursor	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) ShowCursor()                        {}$/;"	f	unknown:tui.FullscreenRenderer
ShowCursor	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) ShowCursor() {$/;"	f	struct:tui.LightRenderer
ShowCursor	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) ShowCursor() {$/;"	f	unknown:tui.FullscreenRenderer
ShowCursor	./vim/plugged/fzf/src/tui/tui.go	/^	ShowCursor()$/;"	n	interface:tui.Renderer
Size	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Size() TermSize                     { return TermSize{} }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:TermSize
Size	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) Size() TermSize {$/;"	f	unknown:tui.LightRenderer	typeref:typename:TermSize
Size	./vim/plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) Size() TermSize {$/;"	f	unknown:tui.LightRenderer	typeref:typename:TermSize
Size	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Size() TermSize {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:TermSize
Size	./vim/plugged/fzf/src/tui/tui.go	/^	Size() TermSize$/;"	n	interface:tui.Renderer	typeref:typename:TermSize
Slab	./vim/plugged/fzf/src/util/slab.go	/^type Slab struct {$/;"	s	package:util
SliceRight	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) SliceRight(last int) {$/;"	f	struct:util.Chars
Smarter tab line	./vim/plugged/vim-airline/README.md	/^## Smarter tab line$/;"	s	chapter:Installation
Snapshot	./vim/plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot(tail int) ([]*Chunk, int, bool) {$/;"	f	struct:fzf.ChunkList	typeref:typename:([]*Chunk, int, bool)
Sort	./vim/plugged/fzf/src/options.go	/^	Sort              int$/;"	m	struct:fzf.Options	typeref:typename:int
Sort	./vim/plugged/fzf/src/terminal.go	/^	Sort       bool         `json:"sort"`$/;"	m	struct:fzf.Status	typeref:typename:bool
Spinner	./vim/plugged/fzf/src/tui/tui.go	/^	Spinner          ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Split pane	./vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SS Split pane$/;"	S	section:fzf\\-tmux""LAYOUT OPTIONS
Sponsors :heart:	./vim/plugged/fzf/README.md	/^Sponsors :heart:$/;"	s
Start	./vim/plugged/fzf/src/algo/algo.go	/^	Start int$/;"	m	struct:algo.Result	typeref:typename:int
Start	./vim/plugged/fzf/src/tui/tui.go	/^	Start$/;"	c	package:tui
Start-Installation	./install.ps1	/^function Start-Installation {$/;"	f
Start-PreflightChecks	./install.ps1	/^function Start-PreflightChecks {$/;"	f
Starting fzf in a popup window	./vim/plugged/fzf/README-VIM.md	/^### Starting fzf in a popup window$/;"	S	section:FZF Vim integration""Tips
Status	./vim/plugged/fzf/src/terminal.go	/^type Status struct {$/;"	s	package:fzf
Status line of terminal buffer	./vim/plugged/fzf.vim/README.md	/^Status line of terminal buffer$/;"	s	chapter:fzf :heart: vim
StatusItem	./vim/plugged/fzf/src/terminal.go	/^type StatusItem struct {$/;"	s	package:fzf
Stop	./vim/plugged/fzf/src/matcher.go	/^func (m *Matcher) Stop() {$/;"	f	struct:fzf.Matcher
Straightforward customization	./vim/plugged/vim-airline/README.md	/^## Straightforward customization$/;"	s	chapter:Installation
StrikeThrough	./vim/plugged/fzf/src/tui/dummy.go	/^	StrikeThrough = Attr(1 << 7)$/;"	c	package:tui
StrikeThrough	./vim/plugged/fzf/src/tui/tcell.go	/^	StrikeThrough      = Attr(tcell.AttrStrikeThrough)$/;"	c	package:tui
String	./vim/plugged/fzf/src/actiontype_string.go	/^func (i actionType) String() string {$/;"	f	unknown:fzf.actionType	typeref:typename:string
String	./vim/plugged/fzf/src/options.go	/^func (s sizeSpec) String() string {$/;"	f	struct:fzf.sizeSpec	typeref:typename:string
String	./vim/plugged/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f	struct:fzf.term	typeref:typename:string
String	./vim/plugged/fzf/src/terminal_test.go	/^func (item *Item) String() string {$/;"	f	unknown:fzf.Item	typeref:typename:string
String	./vim/plugged/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f	struct:fzf.Delimiter	typeref:typename:string
String	./vim/plugged/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f	struct:fzf.Token	typeref:typename:string
String	./vim/plugged/fzf/src/tui/eventtype_string.go	/^func (i EventType) String() string {$/;"	f	unknown:tui.EventType	typeref:typename:string
String	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f	struct:util.Chars	typeref:typename:string
StringWidth	./vim/plugged/fzf/src/util/util.go	/^func StringWidth(s string) int {$/;"	f	package:util	typeref:typename:int
StripLastDelimiter	./vim/plugged/fzf/src/tokenizer.go	/^func StripLastDelimiter(str string, delimiter Delimiter) string {$/;"	f	package:fzf	typeref:typename:string
Style	./vim/plugged/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f	unknown:tui.Color	typeref:typename:tcell.Color
SuffixMatch	./vim/plugged/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Summary	./vim/plugged/fzf/README-VIM.md	/^Summary$/;"	s	chapter:FZF Vim integration
Supported commands	./vim/plugged/fzf/README.md	/^### Supported commands$/;"	S	section:Fuzzy completion for bash and zsh
Swap	./vim/plugged/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f	type:fzf.ByOrder
Swap	./vim/plugged/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f	type:fzf.ByRelevance
Swap	./vim/plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f	type:fzf.ByRelevanceTac
Swap	./vim/plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f	type:fzf.byTimeOrder
Switch between Ripgrep launcher mode (CTRL-R) and fzf filtering mode (CTRL-F)	./vim/plugged/fzf/ADVANCED.md	/^# Switch between Ripgrep launcher mode (CTRL-R) and fzf filtering mode (CTRL-F)$/;"	c
Switch between Ripgrep mode and fzf filtering mode (CTRL-T)	./vim/plugged/fzf/ADVANCED.md	/^# Switch between Ripgrep mode and fzf filtering mode (CTRL-T)$/;"	c
Sync	./vim/plugged/fzf/src/options.go	/^	Sync              bool$/;"	m	struct:fzf.Options	typeref:typename:bool
TEMPLATE	./vim/plugged/fzf/test/lib/common.rb	/^TEMPLATE = File.read(File.expand_path('common.sh', __dir__))$/;"	C
TEMPNAME	./vim/plugged/fzf/test/lib/common.rb	/^  TEMPNAME = Dir::Tmpname.create(%w[fzf]) {}$/;"	C	class:TestBase
TRANSFORM ACTIONS	./vim/plugged/fzf/man/man1/fzf.1	/^.SS TRANSFORM ACTIONS$/;"	S	section:fzf""KEY/EVENT BINDINGS
TRANSFORM IN THE BACKGROUND	./vim/plugged/fzf/man/man1/fzf.1	/^.SS TRANSFORM IN THE BACKGROUND$/;"	S	section:fzf""KEY/EVENT BINDINGS
Tab	./vim/plugged/fzf/src/tui/tui.go	/^	Tab$/;"	c	package:tui
Table of Contents	./vim/plugged/fzf/README.md	/^Table of Contents$/;"	s
Tabstop	./vim/plugged/fzf/src/options.go	/^	Tabstop           int$/;"	m	struct:fzf.Options	typeref:typename:int
Tac	./vim/plugged/fzf/src/options.go	/^	Tac               bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Tail	./vim/plugged/fzf/src/options.go	/^	Tail              int$/;"	m	struct:fzf.Options	typeref:typename:int
TcellWindow	./vim/plugged/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	s	package:tui
TermSize	./vim/plugged/fzf/src/tui/tui.go	/^type TermSize struct {$/;"	s	package:tui
Terminal	./vim/plugged/fzf/src/terminal.go	/^type Terminal struct {$/;"	s	package:fzf
Test-CommandExists	./install.ps1	/^function Test-CommandExists {$/;"	f
Test-PluginInstallation	./install.ps1	/^function Test-PluginInstallation {$/;"	f
TestAdditiveExpect	./vim/plugged/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f	package:fzf
TestAnsiCodeStringConversion	./vim/plugged/fzf/src/ansi_test.go	/^func TestAnsiCodeStringConversion(t *testing.T) {$/;"	f	package:fzf
TestAsUint16	./vim/plugged/fzf/src/util/util_test.go	/^func TestAsUint16(t *testing.T) {$/;"	f	package:util
TestAtExit	./vim/plugged/fzf/src/util/atexit_test.go	/^func TestAtExit(t *testing.T) {$/;"	f	package:util
TestAtomicBool	./vim/plugged/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f	package:util
TestBase	./vim/plugged/fzf/test/lib/common.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	./vim/plugged/fzf/test/test_shell_integration.rb	/^class TestBash < TestBase$/;"	c	module:TestShell.CompletionTest	mixin:include:TestShell,include:CompletionTest
TestBind	./vim/plugged/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f	package:fzf
TestCacheKey	./vim/plugged/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f	package:fzf
TestCacheable	./vim/plugged/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f	package:fzf
TestCaseSensitivity	./vim/plugged/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f	package:fzf
TestCharsLength	./vim/plugged/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f	package:util
TestCharsLines	./vim/plugged/fzf/src/util/chars_test.go	/^func TestCharsLines(t *testing.T) {$/;"	f	package:util
TestCharsToString	./vim/plugged/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f	package:util
TestChunkCache	./vim/plugged/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f	package:fzf
TestChunkList	./vim/plugged/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f	package:fzf
TestChunkListTail	./vim/plugged/fzf/src/chunklist_test.go	/^func TestChunkListTail(t *testing.T) {$/;"	f	package:fzf
TestChunkTiebreak	./vim/plugged/fzf/src/result_test.go	/^func TestChunkTiebreak(t *testing.T) {$/;"	f	package:fzf
TestColorOffset	./vim/plugged/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f	package:fzf
TestColorSpec	./vim/plugged/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f	package:fzf
TestCompareVersions	./vim/plugged/fzf/src/util/util_test.go	/^func TestCompareVersions(t *testing.T) {$/;"	f	package:util
TestConstrain	./vim/plugged/fzf/src/util/util_test.go	/^func TestConstrain(t *testing.T) {$/;"	f	package:util
TestConstrain32	./vim/plugged/fzf/src/util/util_test.go	/^func TestConstrain32(t *testing.T) {$/;"	f	package:util
TestCore	./vim/plugged/fzf/test/test_core.rb	/^class TestCore < TestInteractive$/;"	c
TestDefaultCtrlNP	./vim/plugged/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegex	./vim/plugged/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegex	./vim/plugged/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegexCaret	./vim/plugged/fzf/src/options_test.go	/^func TestDelimiterRegexRegexCaret(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexString	./vim/plugged/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f	package:fzf
TestDurWithIn	./vim/plugged/fzf/src/util/util_test.go	/^func TestDurWithIn(t *testing.T) {$/;"	f	package:util
TestEmptyMerger	./vim/plugged/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f	package:fzf
TestEmptyPattern	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f	package:algo
TestEqual	./vim/plugged/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f	package:fzf
TestEventBox	./vim/plugged/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f	package:util
TestExact	./vim/plugged/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f	package:fzf
TestExactMatchNaive	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f	package:algo
TestExactMatchNaiveBackward	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f	package:algo
TestExec	./vim/plugged/fzf/test/test_exec.rb	/^class TestExec < TestInteractive$/;"	c
TestExtractColor	./vim/plugged/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f	package:fzf
TestExtractPassthroughs	./vim/plugged/fzf/src/terminal_test.go	/^func TestExtractPassthroughs(t *testing.T) {$/;"	f	package:fzf
TestFilter	./vim/plugged/fzf/test/test_filter.rb	/^class TestFilter < TestBase$/;"	c
TestFish	./vim/plugged/fzf/test/test_shell_integration.rb	/^class TestFish < TestBase$/;"	c	module:TestShell.CompletionTest	mixin:include:TestShell
TestFuzzyMatch	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f	package:algo
TestFuzzyMatchBackward	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f	package:algo
TestGetCharEventKey	./vim/plugged/fzf/src/tui/tcell_test.go	/^func TestGetCharEventKey(t *testing.T) {$/;"	f	package:tui
TestHexToColor	./vim/plugged/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f	package:tui
TestHistory	./vim/plugged/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f	package:fzf
TestInitProfiling	./vim/plugged/fzf/src/options_pprof_test.go	/^func TestInitProfiling(t *testing.T) {$/;"	f	package:fzf
TestInteractive	./vim/plugged/fzf/test/lib/common.rb	/^class TestInteractive < TestBase$/;"	c
TestIrrelevantNth	./vim/plugged/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f	package:fzf
TestLayout	./vim/plugged/fzf/test/test_layout.rb	/^class TestLayout < TestInteractive$/;"	c
TestLongString	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f	package:algo
TestLongStringWithNormalize	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestLongStringWithNormalize(t *testing.T) {$/;"	f	package:algo
TestMaskActionContents	./vim/plugged/fzf/src/options_test.go	/^func TestMaskActionContents(t *testing.T) {$/;"	f	package:fzf
TestMax	./vim/plugged/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f	package:util
TestMax16	./vim/plugged/fzf/src/util/util_test.go	/^func TestMax16(t *testing.T) {$/;"	f	package:util
TestMax32	./vim/plugged/fzf/src/util/util_test.go	/^func TestMax32(t *testing.T) {$/;"	f	package:util
TestMergerSorted	./vim/plugged/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f	package:fzf
TestMergerUnsorted	./vim/plugged/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f	package:fzf
TestMin	./vim/plugged/fzf/src/util/util_test.go	/^func TestMin(t *testing.T) {$/;"	f	package:util
TestMin32	./vim/plugged/fzf/src/util/util_test.go	/^func TestMin32(t *testing.T) {$/;"	f	package:util
TestNextAnsiEscapeSequence	./vim/plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Modified	./vim/plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Modified(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Random	./vim/plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Random(t *testing.T) {$/;"	f	package:fzf
TestNormalize	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f	package:algo
TestOffsetSort	./vim/plugged/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f	package:fzf
TestOnce	./vim/plugged/fzf/src/util/util_test.go	/^func TestOnce(t *testing.T) {$/;"	f	package:util
TestOrigTextAndTransformed	./vim/plugged/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f	package:fzf
TestParseAnsiCode	./vim/plugged/fzf/src/ansi_test.go	/^func TestParseAnsiCode(t *testing.T) {$/;"	f	package:fzf
TestParseKeys	./vim/plugged/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f	package:fzf
TestParseKeysWithComma	./vim/plugged/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f	package:fzf
TestParsePlaceholder	./vim/plugged/fzf/src/terminal_test.go	/^func TestParsePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestParseRange	./vim/plugged/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f	package:fzf
TestParseSingleActionList	./vim/plugged/fzf/src/options_test.go	/^func TestParseSingleActionList(t *testing.T) {$/;"	f	package:fzf
TestParseSingleActionListError	./vim/plugged/fzf/src/options_test.go	/^func TestParseSingleActionListError(t *testing.T) {$/;"	f	package:fzf
TestParseTermsEmpty	./vim/plugged/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtended	./vim/plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtendedExact	./vim/plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f	package:fzf
TestPowershellCommands	./vim/plugged/fzf/src/terminal_test.go	/^func TestPowershellCommands(t *testing.T) {$/;"	f	package:fzf
TestPrefixMatch	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f	package:algo
TestPreview	./vim/plugged/fzf/test/test_preview.rb	/^class TestPreview < TestInteractive$/;"	c
TestPreviewOpts	./vim/plugged/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f	package:fzf
TestQuoteEntry	./vim/plugged/fzf/src/terminal_test.go	/^func TestQuoteEntry(t *testing.T) {$/;"	f	package:fzf
TestRankComparison	./vim/plugged/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f	package:fzf
TestReadFromCommand	./vim/plugged/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f	package:fzf
TestRepeatToFill	./vim/plugged/fzf/src/util/util_test.go	/^func TestRepeatToFill(t *testing.T) {$/;"	f	package:util
TestReplacePlaceholder	./vim/plugged/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestResultRank	./vim/plugged/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f	package:fzf
TestRunesWidth	./vim/plugged/fzf/src/util/util_test.go	/^func TestRunesWidth(t *testing.T) {$/;"	f	package:util
TestServer	./vim/plugged/fzf/test/test_server.rb	/^class TestServer < TestInteractive$/;"	c
TestShell	./vim/plugged/fzf/test/test_shell_integration.rb	/^module TestShell$/;"	m
TestSplitNth	./vim/plugged/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f	package:fzf
TestStringPtr	./vim/plugged/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f	package:fzf
TestStringWidth	./vim/plugged/fzf/src/util/util_test.go	/^func TestStringWidth(t *testing.T) {$/;"	f	package:util
TestSuffixMatch	./vim/plugged/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f	package:algo
TestToCharsAscii	./vim/plugged/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f	package:util
TestToggle	./vim/plugged/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f	package:fzf
TestTokenize	./vim/plugged/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f	package:fzf
TestTransform	./vim/plugged/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f	package:fzf
TestTransformIndexOutOfBounds	./vim/plugged/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f	package:fzf
TestTrimLength	./vim/plugged/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f	package:util
TestTruncate	./vim/plugged/fzf/src/util/util_test.go	/^func TestTruncate(t *testing.T) {$/;"	f	package:util
TestUnixCommands	./vim/plugged/fzf/src/terminal_test.go	/^func TestUnixCommands(t *testing.T) {$/;"	f	package:fzf
TestValidateSign	./vim/plugged/fzf/src/options_test.go	/^func TestValidateSign(t *testing.T) {$/;"	f	package:fzf
TestWindowsCommands	./vim/plugged/fzf/src/terminal_test.go	/^func TestWindowsCommands(t *testing.T) {$/;"	f	package:fzf
TestZsh	./vim/plugged/fzf/test/test_shell_integration.rb	/^class TestZsh < TestBase$/;"	c	module:TestShell.CompletionTest	mixin:include:TestShell,include:CompletionTest
Testing	./vim/plugged/vim-airline/CONTRIBUTING.md	/^# Testing$/;"	c
Text	./vim/plugged/fzf/src/terminal.go	/^	Text  string `json:"text"`$/;"	m	struct:fzf.StatusItem	typeref:typename:string
The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)	./vim/plugged/nerdtree/README.markdown	/^# The NERDTree [![Vint](https:\/\/github.com\/preservim\/nerdtree\/workflows\/Vint\/badge.svg)](/;"	c
Theme	./vim/plugged/fzf/src/options.go	/^	Theme             *tui.ColorTheme$/;"	m	struct:fzf.Options	typeref:typename:*tui.ColorTheme
Themes	./vim/plugged/vim-airline/CONTRIBUTING.md	/^# Themes$/;"	c
Themes	./vim/plugged/vim-airline/README.md	/^## Themes$/;"	s	chapter:Installation
Third-party libraries used	./vim/plugged/fzf/BUILD.md	/^Third-party libraries used$/;"	s	chapter:Building fzf
This is useful when you need to write special execute/reload form (i.e. `execute:...`)	./vim/plugged/fzf/CHANGELOG.md	/^  # This is useful when you need to write special execute\/reload form (i.e. `execute:...`)$/;"	c
Tips	./vim/plugged/fzf/README-VIM.md	/^Tips$/;"	s	chapter:FZF Vim integration
Tips	./vim/plugged/fzf/README.md	/^Tips$/;"	s
Tmux	./vim/plugged/fzf/src/options.go	/^	Tmux              *tmuxOptions$/;"	m	struct:fzf.Options	typeref:typename:*tmuxOptions
Tmux	./vim/plugged/fzf/test/lib/common.rb	/^class Tmux$/;"	c
ToChars	./vim/plugged/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f	package:util	typeref:typename:Chars
ToKebabCase	./vim/plugged/fzf/src/util/util.go	/^func ToKebabCase(s string) string {$/;"	f	package:util	typeref:typename:string
ToRunes	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
ToString	./vim/plugged/fzf/src/ansi.go	/^func (s *ansiState) ToString() string {$/;"	f	struct:fzf.ansiState	typeref:typename:string
ToString	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f	struct:util.Chars	typeref:typename:string
Toggle	./vim/plugged/fzf/src/options.go	/^func (o *previewOpts) Toggle() {$/;"	f	struct:fzf.previewOpts
ToggleSort	./vim/plugged/fzf/src/options.go	/^	ToggleSort        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Toggling between data sources	./vim/plugged/fzf/ADVANCED.md	/^### Toggling between data sources$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Toggling with a single key binding	./vim/plugged/fzf/ADVANCED.md	/^### Toggling with a single key binding$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Token	./vim/plugged/fzf/src/tokenizer.go	/^type Token struct {$/;"	s	package:fzf
Tokenize	./vim/plugged/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Top	./vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Top() int       { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
Top	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Top() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
Top	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Top	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Top() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
Top	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Top	./vim/plugged/fzf/src/tui/tui.go	/^	Top() int$/;"	n	interface:tui.Renderer	typeref:typename:int
Top	./vim/plugged/fzf/src/tui/tui.go	/^	Top() int$/;"	n	interface:tui.Window	typeref:typename:int
TotalCount	./vim/plugged/fzf/src/terminal.go	/^	TotalCount int          `json:"totalCount"`$/;"	m	struct:fzf.Status	typeref:typename:int
Track	./vim/plugged/fzf/src/options.go	/^	Track             trackOption$/;"	m	struct:fzf.Options	typeref:typename:trackOption
TrailingWhitespaces	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Transform	./vim/plugged/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
TrimLength	./vim/plugged/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f	struct:fzf.Item	typeref:typename:uint16
TrimLength	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f	struct:util.Chars	typeref:typename:uint16
TrimSuffix	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimSuffix(runes []rune) {$/;"	f	struct:util.Chars
TrimTrailingWhitespaces	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimTrailingWhitespaces(maxIndex int) {$/;"	f	struct:util.Chars
Truncate	./vim/plugged/fzf/src/util/util.go	/^func Truncate(input string, limit int) ([]rune, int) {$/;"	f	package:util	typeref:typename:([]rune, int)
TtyDefault	./vim/plugged/fzf/src/options.go	/^	TtyDefault        string$/;"	m	struct:fzf.Options	typeref:typename:string
TtyIn	./vim/plugged/fzf/src/tui/ttyname_unix.go	/^func TtyIn(ttyDefault string) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
TtyIn	./vim/plugged/fzf/src/tui/ttyname_windows.go	/^func TtyIn(ttyDefault string) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
TtyOut	./vim/plugged/fzf/src/tui/ttyname_unix.go	/^func TtyOut(ttyDefault string) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
TtyOut	./vim/plugged/fzf/src/tui/ttyname_windows.go	/^func TtyOut(ttyDefault string) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
Turning into a different process	./vim/plugged/fzf/README.md	/^### Turning into a different process$/;"	S	section:Advanced topics
Two-phase filtering with Ripgrep and fzf	./vim/plugged/fzf/ADVANCED.md	/^# Two-phase filtering with Ripgrep and fzf$/;"	c
Type	./vim/plugged/fzf/src/tui/tui.go	/^	Type       EventType$/;"	m	struct:tui.Event	typeref:typename:EventType
U	./vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	./vim/autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
UNAME_M	./vim/plugged/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UNSETS	./vim/plugged/fzf/test/lib/common.rb	/^UNSETS = %w[$/;"	C
Underline	./vim/plugged/fzf/src/tui/dummy.go	/^	Underline     = Attr(1 << 3)$/;"	c	package:tui
Underline	./vim/plugged/fzf/src/tui/tcell.go	/^	Underline          = Attr(tcell.AttrUnderline)$/;"	c	package:tui
Unicode	./vim/plugged/fzf/src/options.go	/^	Unicode           bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Unsafe	./vim/plugged/fzf/src/options.go	/^	Unsafe            bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Unwatch	./vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f	struct:util.EventBox
Up	./vim/plugged/fzf/src/tui/tui.go	/^	Up$/;"	c	package:tui
UpdateCount	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, failedCommand *string) {$/;"	f	struct:fzf.Terminal
UpdateHeader	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f	struct:fzf.Terminal
UpdateList	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger) {$/;"	f	struct:fzf.Terminal
UpdateProgress	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f	struct:fzf.Terminal
Updating the list of processes by pressing CTRL-R	./vim/plugged/fzf/ADVANCED.md	/^### Updating the list of processes by pressing CTRL-R$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Upgrading fzf	./vim/plugged/fzf/README.md	/^Upgrading fzf$/;"	s
Usage	./vim/plugged/fzf/README.md	/^Usage$/;"	s
Usage	./vim/plugged/fzf/src/options.go	/^const Usage = `fzf is an interactive filter program for any kind of list.$/;"	c	package:fzf
UserAutoCmds	./.vimrc	/^augroup UserAutoCmds$/;"	a
Using Homebrew	./vim/plugged/fzf/README.md	/^### Using Homebrew$/;"	S	section:Installation
Using Makefile	./vim/plugged/fzf/BUILD.md	/^### Using Makefile$/;"	S	section:Building fzf""Build instructions
Using [vim-plug](https://github.com/junegunn/vim-plug)	./vim/plugged/fzf.vim/README.md	/^### Using [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S	section:fzf :heart: vim""Installation
Using fzf as the secondary filter	./vim/plugged/fzf/ADVANCED.md	/^### Using fzf as the secondary filter$/;"	S	section:Advanced fzf examples""Ripgrep integration
Using fzf as the selector interface for ripgrep	./vim/plugged/fzf/CHANGELOG.md	/^  # Using fzf as the selector interface for ripgrep$/;"	c
Using git	./vim/plugged/fzf/README.md	/^### Using git$/;"	S	section:Installation
Using the finder	./vim/plugged/fzf/README.md	/^### Using the finder$/;"	S	section:Usage
VERSION	./vim/plugged/fzf/Makefile	/^VERSION        := $(FZF_VERSION)$/;"	m
VERSION	./vim/plugged/fzf/Makefile	/^VERSION        := $(shell git describe --abbrev=0 2> \/dev\/null | sed "s\/^v\/\/")$/;"	m
VERSION_REGEX	./vim/plugged/fzf/Makefile	/^VERSION_REGEX  := $(subst .,\\.,$(VERSION_TRIM))$/;"	m
VERSION_TRIM	./vim/plugged/fzf/Makefile	/^VERSION_TRIM   := $(shell echo $(VERSION) | sed "s\/^v\/\/; s\/-.*\/\/")$/;"	m
Version	./vim/plugged/fzf/src/options.go	/^	Version           bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Vim functions	./vim/plugged/fzf.vim/README.md	/^#### Vim functions$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Vim plugin	./vim/plugged/fzf/README.md	/^Vim plugin$/;"	s
Vim/Neovim plugin	./vim/plugged/fzf/README.md	/^### Vim\/Neovim plugin$/;"	S	section:Installation
Vim8 or older	./vim/plugged/nerdtree/README.markdown	/^#### Vim8 or older$/;"	t	subsection:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions""How can I close Vim or a tab automatically when NERDTree is the last window?
Vim9	./vim/plugged/nerdtree/README.markdown	/^#### Vim9$/;"	t	subsection:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions""How can I close Vim or a tab automatically when NERDTree is the last window?
VimConfigDir	./install.ps1	/^$VimConfigDir = Join-Path $HomeDir "vimfiles"$/;"	v
VimDirSource	./install.ps1	/^$VimDirSource = Join-Path $DotfilesDir "vim"$/;"	v
VimrcSource	./install.ps1	/^$VimrcSource = Join-Path $DotfilesDir ".vimrc"$/;"	v
Visible	./vim/plugged/fzf/src/options.go	/^func (o *previewOpts) Visible() bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
Visible	./vim/plugged/fzf/src/tui/tui.go	/^func (s BorderShape) Visible() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
VisualBlockSearchReplace	./.vimrc	/^function! VisualBlockSearchReplace() range$/;"	f
Wait	./vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f	struct:util.EventBox
WaitFor	./vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f	struct:util.EventBox
WalkerOpts	./vim/plugged/fzf/src/options.go	/^	WalkerOpts        walkerOpts$/;"	m	struct:fzf.Options	typeref:typename:walkerOpts
WalkerRoot	./vim/plugged/fzf/src/options.go	/^	WalkerRoot        []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
WalkerSkip	./vim/plugged/fzf/src/options.go	/^	WalkerSkip        []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Watch	./vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f	struct:util.EventBox
When fzf reads this code it clears the previous preview contents.	./vim/plugged/fzf/ADVANCED.md	/^# When fzf reads this code it clears the previous preview contents.$/;"	c
Where did the name come from?	./vim/plugged/vim-airline/README.md	/^# Where did the name come from?$/;"	c
Why you should use fzf on Vim	./vim/plugged/fzf.vim/README.md	/^Why you should use fzf on Vim$/;"	s	chapter:fzf :heart: vim
Width	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Width	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Width	./vim/plugged/fzf/src/tui/tui.go	/^	Width() int$/;"	n	interface:tui.Window	typeref:typename:int
Window	./vim/plugged/fzf/src/tui/tui.go	/^type Window interface {$/;"	i	package:tui
WindowBase	./vim/plugged/fzf/src/tui/tui.go	/^	WindowBase WindowType = iota$/;"	c	package:tui	typeref:type:WindowType
WindowFooter	./vim/plugged/fzf/src/tui/tui.go	/^	WindowFooter$/;"	c	package:tui
WindowHeader	./vim/plugged/fzf/src/tui/tui.go	/^	WindowHeader$/;"	c	package:tui
WindowInput	./vim/plugged/fzf/src/tui/tui.go	/^	WindowInput$/;"	c	package:tui
WindowList	./vim/plugged/fzf/src/tui/tui.go	/^	WindowList$/;"	c	package:tui
WindowPreview	./vim/plugged/fzf/src/tui/tui.go	/^	WindowPreview$/;"	c	package:tui
WindowType	./vim/plugged/fzf/src/tui/tui.go	/^type WindowType int$/;"	t	package:tui	typeref:typename:int
Windows packages	./vim/plugged/fzf/README.md	/^### Windows packages$/;"	S	section:Installation
With "follow", preview window will automatically scroll to the bottom.	./vim/plugged/fzf/ADVANCED.md	/^# With "follow", preview window will automatically scroll to the bottom.$/;"	c
WithAttr	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) WithAttr(attr Attr) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
WithBg	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) WithBg(bg ColorAttr) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
WithNth	./vim/plugged/fzf/src/options.go	/^	WithNth           func(Delimiter) func([]Token, int32) string$/;"	m	struct:fzf.Options	typeref:typename:func(Delimiter) func([]Token, int32) string
WithShell	./vim/plugged/fzf/src/options.go	/^	WithShell         string$/;"	m	struct:fzf.Options	typeref:typename:string
Wrap	./vim/plugged/fzf/src/options.go	/^	Wrap              bool$/;"	m	struct:fzf.Options	typeref:typename:bool
WrapSign	./vim/plugged/fzf/src/options.go	/^	WrapSign          *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Write-LogError	./install.ps1	/^function Write-LogError { param([string]$Message) Write-Host "$Message" }$/;"	f
Write-LogInfo	./install.ps1	/^function Write-LogInfo { param([string]$Message) Write-Host "$Message" }$/;"	f
Write-LogSuccess	./install.ps1	/^function Write-LogSuccess { param([string]$Message) Write-Host "$Message" }$/;"	f
Write-LogWarning	./install.ps1	/^function Write-LogWarning { param([string]$Message) Write-Host "$Message" }$/;"	f
WriteBookmarks	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 WriteBookmarks call g:NERDTreeBookmark.Write()$/;"	c
WriteTemporaryFile	./vim/plugged/fzf/src/functions.go	/^func WriteTemporaryFile(data []string, printSep string) string {$/;"	f	package:fzf	typeref:typename:string
X	./vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
X	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
X	./vim/plugged/fzf/src/tui/tui.go	/^	X      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
X	./vim/plugged/fzf/src/tui/tui.go	/^	X() int$/;"	n	interface:tui.Window	typeref:typename:int
XTabReopen	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    com! XTabReopen call airline#extensions#tabline#xtabline#reopen_last_tab()$/;"	c
Y	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Y	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Y	./vim/plugged/fzf/src/tui/tui.go	/^	Y      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
Y	./vim/plugged/fzf/src/tui/tui.go	/^	Y() int$/;"	n	interface:tui.Window	typeref:typename:int
Zero	./vim/plugged/fzf/src/tui/tui.go	/^	Zero$/;"	c	package:tui
Zsh	./vim/plugged/fzf/src/options.go	/^	Zsh               bool$/;"	m	struct:fzf.Options	typeref:typename:bool
[0.10] - 2018-12-15	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.10] - 2018-12-15$/;"	s	chapter:Change Log
[0.11] - 2019-11-10	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.11] - 2019-11-10$/;"	s	chapter:Change Log
[0.12] - Unreleased	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.12] - Unreleased$/;"	s	chapter:Change Log
[0.1] - 2013-07-17	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.1] - 2013-07-17$/;"	s	chapter:Change Log
[0.2] - 2013-07-28	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.2] - 2013-07-28$/;"	s	chapter:Change Log
[0.3] - 2013-08-12	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.3] - 2013-08-12$/;"	s	chapter:Change Log
[0.4] - 2013-08-26	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.4] - 2013-08-26$/;"	s	chapter:Change Log
[0.5] - 2013-09-13	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.5] - 2013-09-13$/;"	s	chapter:Change Log
[0.6] - 2013-10-08	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.6] - 2013-10-08$/;"	s	chapter:Change Log
[0.7] - 2014-12-10	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.7] - 2014-12-10$/;"	s	chapter:Change Log
[0.8] - 2016-03-09	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.8] - 2016-03-09$/;"	s	chapter:Change Log
[0.9] - 2018-01-15	./vim/plugged/vim-airline/CHANGELOG.md	/^## [0.9] - 2018-01-15$/;"	s	chapter:Change Log
[LanguageClient][57]	./vim/plugged/vim-airline/README.md	/^#### [LanguageClient][57]$/;"	t	section:Installation""Seamless integration
[License](LICENSE)	./vim/plugged/fzf/README-VIM.md	/^[License](LICENSE)$/;"	s	chapter:FZF Vim integration
[License](LICENSE)	./vim/plugged/fzf/README.md	/^[License](LICENSE)$/;"	s
[Vim-CMake][60]	./vim/plugged/vim-airline/README.md	/^#### [Vim-CMake][60]$/;"	t	section:Installation""Seamless integration
[Warp, the intelligent terminal for developers](https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=fzf)	./vim/plugged/fzf/README.md	/^### [Warp, the intelligent terminal for developers](https:\/\/www.warp.dev\/?utm_source=github&u/;"	S
[[	./vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[csv.vim][28]	./vim/plugged/vim-airline/README.md	/^#### [csv.vim][28]$/;"	t	section:Installation""Seamless integration
[ctrlp.vim][10]	./vim/plugged/vim-airline/README.md	/^#### [ctrlp.vim][10]$/;"	t	section:Installation""Seamless integration
[ctrlspace][38]	./vim/plugged/vim-airline/README.md	/^#### [ctrlspace][38]$/;"	t	section:Installation""Seamless integration
[denite.nvim][51]	./vim/plugged/vim-airline/README.md	/^#### [denite.nvim][51]$/;"	t	section:Installation""Seamless integration
[flog][62]	./vim/plugged/vim-airline/README.md	/^#### [flog][62]$/;"	t	section:Installation""Seamless integration
[localsearch][54]	./vim/plugged/vim-airline/README.md	/^#### [localsearch][54]$/;"	t	section:Installation""Seamless integration
[promptline][36]	./vim/plugged/vim-airline/README.md	/^#### [promptline][36]$/;"	t	section:Installation""Seamless integration
[syntastic][5]	./vim/plugged/vim-airline/README.md	/^#### [syntastic][5]$/;"	t	section:Installation""Seamless integration
[tagbar][19]	./vim/plugged/vim-airline/README.md	/^#### [tagbar][19]$/;"	t	section:Installation""Seamless integration
[tmuxline][35]	./vim/plugged/vim-airline/README.md	/^#### [tmuxline][35]$/;"	t	section:Installation""Seamless integration
[unite.vim][9]	./vim/plugged/vim-airline/README.md	/^#### [unite.vim][9]$/;"	t	section:Installation""Seamless integration
[vim.battery][61]	./vim/plugged/vim-airline/README.md	/^#### [vim.battery][61]$/;"	t	section:Installation""Seamless integration
[vimagit][50]	./vim/plugged/vim-airline/README.md	/^#### [vimagit][50]$/;"	t	section:Installation""Seamless integration
[vimtex][53]	./vim/plugged/vim-airline/README.md	/^#### [vimtex][53]$/;"	t	section:Installation""Seamless integration
[virtualenv][31]	./vim/plugged/vim-airline/README.md	/^#### [virtualenv][31]$/;"	t	section:Installation""Seamless integration
[xkb-switch][48]/[xkb-layout][49]	./vim/plugged/vim-airline/README.md	/^#### [xkb-switch][48]\/[xkb-layout][49]$/;"	t	section:Installation""Seamless integration
]]	./vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]]	./vim/plugged/fzf/shell/completion.bash	/^  if [[ "$(type -t _fzf_comprun 2>&1)" = function ]]; then$/;"	f
]]	./vim/plugged/fzf/shell/completion.zsh	/^  if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]; then$/;"	f
_	./vim/plugged/fzf/src/actiontype_string.go	/^func _() {$/;"	f	package:fzf
_	./vim/plugged/fzf/src/tui/eventtype_string.go	/^func _() {$/;"	f	package:tui
_EventType_index	./vim/plugged/fzf/src/tui/eventtype_string.go	/^var _EventType_index = [...]uint16{0, 4, 9, 14, 19, 24, 29, 34, 39, 44, 47, 52, 57, 62, 67, 72, /;"	v	package:tui
_EventType_name	./vim/plugged/fzf/src/tui/eventtype_string.go	/^const _EventType_name = "RuneCtrlACtrlBCtrlCCtrlDCtrlECtrlFCtrlGCtrlHTabCtrlJCtrlKCtrlLEnterCtrl/;"	c	package:tui
__fzf_cd__	./vim/plugged/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_comprun	./vim/plugged/fzf/shell/completion.bash	/^__fzf_comprun() {$/;"	f
__fzf_comprun	./vim/plugged/fzf/shell/completion.zsh	/^__fzf_comprun() {$/;"	f
__fzf_default_completion	./vim/plugged/fzf/shell/completion.bash	/^__fzf_default_completion() {$/;"	f
__fzf_defaults	./vim/plugged/fzf/shell/common.sh	/^__fzf_defaults() {$/;"	f
__fzf_defaults	./vim/plugged/fzf/shell/completion.bash	/^__fzf_defaults() {$/;"	f
__fzf_defaults	./vim/plugged/fzf/shell/completion.zsh	/^__fzf_defaults() {$/;"	f
__fzf_defaults	./vim/plugged/fzf/shell/key-bindings.bash	/^__fzf_defaults() {$/;"	f
__fzf_defaults	./vim/plugged/fzf/shell/key-bindings.zsh	/^__fzf_defaults() {$/;"	f
__fzf_defc	./vim/plugged/fzf/shell/completion.bash	/^__fzf_defc() {$/;"	f
__fzf_exec_awk	./vim/plugged/fzf/shell/common.sh	/^__fzf_exec_awk() {$/;"	f
__fzf_exec_awk	./vim/plugged/fzf/shell/completion.bash	/^__fzf_exec_awk() {$/;"	f
__fzf_exec_awk	./vim/plugged/fzf/shell/completion.zsh	/^__fzf_exec_awk() {$/;"	f
__fzf_exec_awk	./vim/plugged/fzf/shell/key-bindings.bash	/^__fzf_exec_awk() {$/;"	f
__fzf_exec_awk	./vim/plugged/fzf/shell/key-bindings.zsh	/^__fzf_exec_awk() {$/;"	f
__fzf_extract_command	./vim/plugged/fzf/shell/completion.zsh	/^__fzf_extract_command() {$/;"	f
__fzf_generic_path_completion	./vim/plugged/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	./vim/plugged/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	./vim/plugged/fzf/shell/key-bindings.bash	/^  __fzf_history__() {$/;"	f
__fzf_list_hosts	./vim/plugged/fzf/shell/completion.bash	/^  __fzf_list_hosts() {$/;"	f
__fzf_list_hosts	./vim/plugged/fzf/shell/completion.zsh	/^  __fzf_list_hosts() {$/;"	f
__fzf_orig_completion	./vim/plugged/fzf/shell/completion.bash	/^__fzf_orig_completion() {$/;"	f
__fzf_orig_completion_get_orig_func	./vim/plugged/fzf/shell/completion.bash	/^__fzf_orig_completion_get_orig_func() {$/;"	f
__fzf_orig_completion_instantiate	./vim/plugged/fzf/shell/completion.bash	/^__fzf_orig_completion_instantiate() {$/;"	f
__fzf_select	./vim/plugged/fzf/shell/key-bindings.zsh	/^__fzf_select() {$/;"	f
__fzf_select__	./vim/plugged/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzfcmd	./vim/plugged/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	./vim/plugged/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
_actionType_index	./vim/plugged/fzf/src/actiontype_string.go	/^var _actionType_index = [...]uint16{0, 9, 17, 25, 35, 57, 77, 84, 92, 110, 118, 127, 144, 165, 1/;"	v	package:fzf
_actionType_name	./vim/plugged/fzf/src/actiontype_string.go	/^const _actionType_name = "actIgnoreactStartactClickactInvalidactBracketedPasteBeginactBracketedP/;"	c	package:fzf
_colorToAttribute	./vim/plugged/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v	package:tui
_comprun	./vim/plugged/fzf/test/lib/common.sh	/^_comprun() {$/;"	f
_fzf_alias_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_alias_completion() {$/;"	f
_fzf_complete	./vim/plugged/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_f	./vim/plugged/fzf/test/lib/common.sh	/^_fzf_complete_f() {$/;"	f
_fzf_complete_f_post	./vim/plugged/fzf/test/lib/common.sh	/^_fzf_complete_f_post() {$/;"	f
_fzf_complete_g	./vim/plugged/fzf/test/lib/common.sh	/^_fzf_complete_g() {$/;"	f
_fzf_complete_g_post	./vim/plugged/fzf/test/lib/common.sh	/^_fzf_complete_g_post() {$/;"	f
_fzf_complete_kill	./vim/plugged/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill_post	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill_post() {$/;"	f
_fzf_complete_ssh	./vim/plugged/fzf/shell/completion.bash	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_ssh	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_dir_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_feed_fifo() {$/;"	f
_fzf_file_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_host_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_host_completion() {$/;"	f
_fzf_opts_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	./vim/plugged/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_proc_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_proc_completion() {$/;"	f
_fzf_proc_completion_post	./vim/plugged/fzf/shell/completion.bash	/^_fzf_proc_completion_post() {$/;"	f
_fzf_setup_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_setup_completion() {$/;"	f
_fzf_statusline	./vim/plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_fzf_statusline	./vim/plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_fzf_var_completion	./vim/plugged/fzf/shell/completion.bash	/^_fzf_var_completion() {$/;"	f
_initialResize	./vim/plugged/fzf/src/tui/tcell.go	/^	_initialResize   bool = true$/;"	v	package:tui	typeref:typename:bool
_prevMouseButton	./vim/plugged/fzf/src/tui/tcell.go	/^	_prevMouseButton tcell.ButtonMask$/;"	v	package:tui	typeref:typename:tcell.ButtonMask
_screen	./vim/plugged/fzf/src/tui/tcell.go	/^	_screen          tcell.Screen$/;"	v	package:tui	typeref:typename:tcell.Screen
_splitRegex	./vim/plugged/fzf/src/pattern.go	/^var _splitRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
`--height`	./vim/plugged/fzf/ADVANCED.md	/^### `--height`$/;"	S	section:Advanced fzf examples""Display modes
`--height` mode	./vim/plugged/fzf/README.md	/^#### `--height` mode$/;"	t	subsection:Usage""Display modes
`--tmux`	./vim/plugged/fzf/ADVANCED.md	/^### `--tmux`$/;"	S	section:Advanced fzf examples""Display modes
`--tmux` mode	./vim/plugged/fzf/README.md	/^#### `--tmux` mode$/;"	t	subsection:Usage""Display modes
`:FZF[!]`	./vim/plugged/fzf/README-VIM.md	/^`:FZF[!]`$/;"	s	chapter:FZF Vim integration
`default`	./vim/plugged/vim-airline/README.md	/^#### `default`$/;"	t	section:Installation""Smarter tab line
`fzf#run`	./vim/plugged/fzf/README-VIM.md	/^`fzf#run`$/;"	s	chapter:FZF Vim integration
`fzf#wrap`	./vim/plugged/fzf/README-VIM.md	/^`fzf#wrap`$/;"	s	chapter:FZF Vim integration
`jsformatter`	./vim/plugged/vim-airline/README.md	/^#### `jsformatter`$/;"	t	section:Installation""Smarter tab line
`unique_tail_improved`	./vim/plugged/vim-airline/README.md	/^#### `unique_tail_improved`$/;"	t	section:Installation""Smarter tab line
`unique_tail`	./vim/plugged/vim-airline/README.md	/^#### `unique_tail`$/;"	t	section:Installation""Smarter tab line
a	./vim/plugged/fzf/src/terminal.go	/^	a string$/;"	m	struct:fzf.action	typeref:typename:string
aboveOrBelow	./vim/plugged/fzf/src/options.go	/^func (a previewOpts) aboveOrBelow() bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
acceptNth	./vim/plugged/fzf/src/item.go	/^func (item *Item) acceptNth(stripAnsi bool, delimiter Delimiter, transformer func([]Token, int32/;"	f	struct:fzf.Item	typeref:typename:string
acceptNth	./vim/plugged/fzf/src/terminal.go	/^	acceptNth          func([]Token, int32) string$/;"	m	struct:fzf.Terminal	typeref:typename:func([]Token, int32) string
actAbort	./vim/plugged/fzf/src/terminal.go	/^	actAbort$/;"	c	package:fzf
actAccept	./vim/plugged/fzf/src/terminal.go	/^	actAccept$/;"	c	package:fzf
actAcceptNonEmpty	./vim/plugged/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c	package:fzf
actAcceptOrPrintQuery	./vim/plugged/fzf/src/terminal.go	/^	actAcceptOrPrintQuery$/;"	c	package:fzf
actAsync	./vim/plugged/fzf/src/terminal.go	/^	actAsync$/;"	c	package:fzf
actBackwardChar	./vim/plugged/fzf/src/terminal.go	/^	actBackwardChar$/;"	c	package:fzf
actBackwardDeleteChar	./vim/plugged/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c	package:fzf
actBackwardDeleteCharEof	./vim/plugged/fzf/src/terminal.go	/^	actBackwardDeleteCharEof$/;"	c	package:fzf
actBackwardKillWord	./vim/plugged/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c	package:fzf
actBackwardWord	./vim/plugged/fzf/src/terminal.go	/^	actBackwardWord$/;"	c	package:fzf
actBecome	./vim/plugged/fzf/src/terminal.go	/^	actBecome$/;"	c	package:fzf
actBeginningOfLine	./vim/plugged/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c	package:fzf
actBell	./vim/plugged/fzf/src/terminal.go	/^	actBell$/;"	c	package:fzf
actBgCancel	./vim/plugged/fzf/src/terminal.go	/^	actBgCancel$/;"	c	package:fzf
actBgTransform	./vim/plugged/fzf/src/terminal.go	/^	actBgTransform$/;"	c	package:fzf
actBgTransformBorderLabel	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformBorderLabel$/;"	c	package:fzf
actBgTransformFooter	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformFooter$/;"	c	package:fzf
actBgTransformFooterLabel	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformFooterLabel$/;"	c	package:fzf
actBgTransformGhost	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformGhost$/;"	c	package:fzf
actBgTransformHeader	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformHeader$/;"	c	package:fzf
actBgTransformHeaderLabel	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformHeaderLabel$/;"	c	package:fzf
actBgTransformInputLabel	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformInputLabel$/;"	c	package:fzf
actBgTransformListLabel	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformListLabel$/;"	c	package:fzf
actBgTransformNth	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformNth$/;"	c	package:fzf
actBgTransformPointer	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformPointer$/;"	c	package:fzf
actBgTransformPreviewLabel	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformPreviewLabel$/;"	c	package:fzf
actBgTransformPrompt	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformPrompt$/;"	c	package:fzf
actBgTransformQuery	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformQuery$/;"	c	package:fzf
actBgTransformSearch	./vim/plugged/fzf/src/terminal.go	/^	actBgTransformSearch$/;"	c	package:fzf
actBracketedPasteBegin	./vim/plugged/fzf/src/terminal.go	/^	actBracketedPasteBegin$/;"	c	package:fzf
actBracketedPasteEnd	./vim/plugged/fzf/src/terminal.go	/^	actBracketedPasteEnd$/;"	c	package:fzf
actCancel	./vim/plugged/fzf/src/terminal.go	/^	actCancel$/;"	c	package:fzf
actChangeBorderLabel	./vim/plugged/fzf/src/terminal.go	/^	actChangeBorderLabel$/;"	c	package:fzf
actChangeFooter	./vim/plugged/fzf/src/terminal.go	/^	actChangeFooter$/;"	c	package:fzf
actChangeFooterLabel	./vim/plugged/fzf/src/terminal.go	/^	actChangeFooterLabel$/;"	c	package:fzf
actChangeGhost	./vim/plugged/fzf/src/terminal.go	/^	actChangeGhost$/;"	c	package:fzf
actChangeHeader	./vim/plugged/fzf/src/terminal.go	/^	actChangeHeader$/;"	c	package:fzf
actChangeHeaderLabel	./vim/plugged/fzf/src/terminal.go	/^	actChangeHeaderLabel$/;"	c	package:fzf
actChangeInputLabel	./vim/plugged/fzf/src/terminal.go	/^	actChangeInputLabel$/;"	c	package:fzf
actChangeListLabel	./vim/plugged/fzf/src/terminal.go	/^	actChangeListLabel$/;"	c	package:fzf
actChangeMulti	./vim/plugged/fzf/src/terminal.go	/^	actChangeMulti$/;"	c	package:fzf
actChangeNth	./vim/plugged/fzf/src/terminal.go	/^	actChangeNth$/;"	c	package:fzf
actChangePointer	./vim/plugged/fzf/src/terminal.go	/^	actChangePointer$/;"	c	package:fzf
actChangePreview	./vim/plugged/fzf/src/terminal.go	/^	actChangePreview$/;"	c	package:fzf
actChangePreviewLabel	./vim/plugged/fzf/src/terminal.go	/^	actChangePreviewLabel$/;"	c	package:fzf
actChangePreviewWindow	./vim/plugged/fzf/src/terminal.go	/^	actChangePreviewWindow$/;"	c	package:fzf
actChangePrompt	./vim/plugged/fzf/src/terminal.go	/^	actChangePrompt$/;"	c	package:fzf
actChangeQuery	./vim/plugged/fzf/src/terminal.go	/^	actChangeQuery$/;"	c	package:fzf
actChar	./vim/plugged/fzf/src/terminal.go	/^	actChar$/;"	c	package:fzf
actClearQuery	./vim/plugged/fzf/src/terminal.go	/^	actClearQuery$/;"	c	package:fzf
actClearScreen	./vim/plugged/fzf/src/terminal.go	/^	actClearScreen$/;"	c	package:fzf
actClearSelection	./vim/plugged/fzf/src/terminal.go	/^	actClearSelection$/;"	c	package:fzf
actClick	./vim/plugged/fzf/src/terminal.go	/^	actClick$/;"	c	package:fzf
actClose	./vim/plugged/fzf/src/terminal.go	/^	actClose$/;"	c	package:fzf
actDeleteChar	./vim/plugged/fzf/src/terminal.go	/^	actDeleteChar$/;"	c	package:fzf
actDeleteCharEof	./vim/plugged/fzf/src/terminal.go	/^	actDeleteCharEof$/;"	c	package:fzf
actDeselect	./vim/plugged/fzf/src/terminal.go	/^	actDeselect$/;"	c	package:fzf
actDeselectAll	./vim/plugged/fzf/src/terminal.go	/^	actDeselectAll$/;"	c	package:fzf
actDisableSearch	./vim/plugged/fzf/src/terminal.go	/^	actDisableSearch$/;"	c	package:fzf
actDown	./vim/plugged/fzf/src/terminal.go	/^	actDown$/;"	c	package:fzf
actEnableSearch	./vim/plugged/fzf/src/terminal.go	/^	actEnableSearch$/;"	c	package:fzf
actEndOfLine	./vim/plugged/fzf/src/terminal.go	/^	actEndOfLine$/;"	c	package:fzf
actExclude	./vim/plugged/fzf/src/terminal.go	/^	actExclude$/;"	c	package:fzf
actExcludeMulti	./vim/plugged/fzf/src/terminal.go	/^	actExcludeMulti$/;"	c	package:fzf
actExecute	./vim/plugged/fzf/src/terminal.go	/^	actExecute$/;"	c	package:fzf
actExecuteMulti	./vim/plugged/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c	package:fzf
actExecuteSilent	./vim/plugged/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c	package:fzf
actFatal	./vim/plugged/fzf/src/terminal.go	/^	actFatal$/;"	c	package:fzf
actFirst	./vim/plugged/fzf/src/terminal.go	/^	actFirst$/;"	c	package:fzf
actForwardChar	./vim/plugged/fzf/src/terminal.go	/^	actForwardChar$/;"	c	package:fzf
actForwardWord	./vim/plugged/fzf/src/terminal.go	/^	actForwardWord$/;"	c	package:fzf
actHalfPageDown	./vim/plugged/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c	package:fzf
actHalfPageUp	./vim/plugged/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c	package:fzf
actHideHeader	./vim/plugged/fzf/src/terminal.go	/^	actHideHeader$/;"	c	package:fzf
actHideInput	./vim/plugged/fzf/src/terminal.go	/^	actHideInput$/;"	c	package:fzf
actHidePreview	./vim/plugged/fzf/src/terminal.go	/^	actHidePreview$/;"	c	package:fzf
actIgnore	./vim/plugged/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c	package:fzf	typeref:type:actionType
actInvalid	./vim/plugged/fzf/src/terminal.go	/^	actInvalid$/;"	c	package:fzf
actJump	./vim/plugged/fzf/src/terminal.go	/^	actJump$/;"	c	package:fzf
actJumpAccept	./vim/plugged/fzf/src/terminal.go	/^	actJumpAccept \/\/ XXX Deprecated in favor of jump:accept binding$/;"	c	package:fzf
actKillLine	./vim/plugged/fzf/src/terminal.go	/^	actKillLine$/;"	c	package:fzf
actKillWord	./vim/plugged/fzf/src/terminal.go	/^	actKillWord$/;"	c	package:fzf
actLast	./vim/plugged/fzf/src/terminal.go	/^	actLast$/;"	c	package:fzf
actMouse	./vim/plugged/fzf/src/terminal.go	/^	actMouse$/;"	c	package:fzf
actNextHistory	./vim/plugged/fzf/src/terminal.go	/^	actNextHistory$/;"	c	package:fzf
actNextSelected	./vim/plugged/fzf/src/terminal.go	/^	actNextSelected$/;"	c	package:fzf
actOffsetDown	./vim/plugged/fzf/src/terminal.go	/^	actOffsetDown$/;"	c	package:fzf
actOffsetMiddle	./vim/plugged/fzf/src/terminal.go	/^	actOffsetMiddle$/;"	c	package:fzf
actOffsetUp	./vim/plugged/fzf/src/terminal.go	/^	actOffsetUp$/;"	c	package:fzf
actPageDown	./vim/plugged/fzf/src/terminal.go	/^	actPageDown$/;"	c	package:fzf
actPageUp	./vim/plugged/fzf/src/terminal.go	/^	actPageUp$/;"	c	package:fzf
actPosition	./vim/plugged/fzf/src/terminal.go	/^	actPosition$/;"	c	package:fzf
actPrevHistory	./vim/plugged/fzf/src/terminal.go	/^	actPrevHistory$/;"	c	package:fzf
actPrevSelected	./vim/plugged/fzf/src/terminal.go	/^	actPrevSelected$/;"	c	package:fzf
actPreview	./vim/plugged/fzf/src/terminal.go	/^	actPreview$/;"	c	package:fzf
actPreviewBottom	./vim/plugged/fzf/src/terminal.go	/^	actPreviewBottom$/;"	c	package:fzf
actPreviewDown	./vim/plugged/fzf/src/terminal.go	/^	actPreviewDown$/;"	c	package:fzf
actPreviewHalfPageDown	./vim/plugged/fzf/src/terminal.go	/^	actPreviewHalfPageDown$/;"	c	package:fzf
actPreviewHalfPageUp	./vim/plugged/fzf/src/terminal.go	/^	actPreviewHalfPageUp$/;"	c	package:fzf
actPreviewPageDown	./vim/plugged/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c	package:fzf
actPreviewPageUp	./vim/plugged/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c	package:fzf
actPreviewTop	./vim/plugged/fzf/src/terminal.go	/^	actPreviewTop$/;"	c	package:fzf
actPreviewUp	./vim/plugged/fzf/src/terminal.go	/^	actPreviewUp$/;"	c	package:fzf
actPrint	./vim/plugged/fzf/src/terminal.go	/^	actPrint$/;"	c	package:fzf
actPrintQuery	./vim/plugged/fzf/src/terminal.go	/^	actPrintQuery \/\/ XXX Deprecated (not very useful, just use --print-query)$/;"	c	package:fzf
actPut	./vim/plugged/fzf/src/terminal.go	/^	actPut$/;"	c	package:fzf
actRebind	./vim/plugged/fzf/src/terminal.go	/^	actRebind$/;"	c	package:fzf
actRefreshPreview	./vim/plugged/fzf/src/terminal.go	/^	actRefreshPreview$/;"	c	package:fzf
actReload	./vim/plugged/fzf/src/terminal.go	/^	actReload$/;"	c	package:fzf
actReloadSync	./vim/plugged/fzf/src/terminal.go	/^	actReloadSync$/;"	c	package:fzf
actReplaceQuery	./vim/plugged/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c	package:fzf
actSearch	./vim/plugged/fzf/src/terminal.go	/^	actSearch$/;"	c	package:fzf
actSelect	./vim/plugged/fzf/src/terminal.go	/^	actSelect$/;"	c	package:fzf
actSelectAll	./vim/plugged/fzf/src/terminal.go	/^	actSelectAll$/;"	c	package:fzf
actShowHeader	./vim/plugged/fzf/src/terminal.go	/^	actShowHeader$/;"	c	package:fzf
actShowInput	./vim/plugged/fzf/src/terminal.go	/^	actShowInput$/;"	c	package:fzf
actShowPreview	./vim/plugged/fzf/src/terminal.go	/^	actShowPreview$/;"	c	package:fzf
actSigStop	./vim/plugged/fzf/src/terminal.go	/^	actSigStop$/;"	c	package:fzf
actStart	./vim/plugged/fzf/src/terminal.go	/^	actStart$/;"	c	package:fzf
actToggle	./vim/plugged/fzf/src/terminal.go	/^	actToggle$/;"	c	package:fzf
actToggleAll	./vim/plugged/fzf/src/terminal.go	/^	actToggleAll$/;"	c	package:fzf
actToggleBind	./vim/plugged/fzf/src/terminal.go	/^	actToggleBind$/;"	c	package:fzf
actToggleDown	./vim/plugged/fzf/src/terminal.go	/^	actToggleDown$/;"	c	package:fzf
actToggleHeader	./vim/plugged/fzf/src/terminal.go	/^	actToggleHeader$/;"	c	package:fzf
actToggleHscroll	./vim/plugged/fzf/src/terminal.go	/^	actToggleHscroll$/;"	c	package:fzf
actToggleIn	./vim/plugged/fzf/src/terminal.go	/^	actToggleIn$/;"	c	package:fzf
actToggleInput	./vim/plugged/fzf/src/terminal.go	/^	actToggleInput$/;"	c	package:fzf
actToggleMultiLine	./vim/plugged/fzf/src/terminal.go	/^	actToggleMultiLine$/;"	c	package:fzf
actToggleOut	./vim/plugged/fzf/src/terminal.go	/^	actToggleOut$/;"	c	package:fzf
actTogglePreview	./vim/plugged/fzf/src/terminal.go	/^	actTogglePreview$/;"	c	package:fzf
actTogglePreviewWrap	./vim/plugged/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c	package:fzf
actToggleSearch	./vim/plugged/fzf/src/terminal.go	/^	actToggleSearch$/;"	c	package:fzf
actToggleSort	./vim/plugged/fzf/src/terminal.go	/^	actToggleSort$/;"	c	package:fzf
actToggleTrack	./vim/plugged/fzf/src/terminal.go	/^	actToggleTrack$/;"	c	package:fzf
actToggleTrackCurrent	./vim/plugged/fzf/src/terminal.go	/^	actToggleTrackCurrent$/;"	c	package:fzf
actToggleUp	./vim/plugged/fzf/src/terminal.go	/^	actToggleUp$/;"	c	package:fzf
actToggleWrap	./vim/plugged/fzf/src/terminal.go	/^	actToggleWrap$/;"	c	package:fzf
actTrackCurrent	./vim/plugged/fzf/src/terminal.go	/^	actTrackCurrent$/;"	c	package:fzf
actTransform	./vim/plugged/fzf/src/terminal.go	/^	actTransform$/;"	c	package:fzf
actTransformBorderLabel	./vim/plugged/fzf/src/terminal.go	/^	actTransformBorderLabel$/;"	c	package:fzf
actTransformFooter	./vim/plugged/fzf/src/terminal.go	/^	actTransformFooter$/;"	c	package:fzf
actTransformFooterLabel	./vim/plugged/fzf/src/terminal.go	/^	actTransformFooterLabel$/;"	c	package:fzf
actTransformGhost	./vim/plugged/fzf/src/terminal.go	/^	actTransformGhost$/;"	c	package:fzf
actTransformHeader	./vim/plugged/fzf/src/terminal.go	/^	actTransformHeader$/;"	c	package:fzf
actTransformHeaderLabel	./vim/plugged/fzf/src/terminal.go	/^	actTransformHeaderLabel$/;"	c	package:fzf
actTransformInputLabel	./vim/plugged/fzf/src/terminal.go	/^	actTransformInputLabel$/;"	c	package:fzf
actTransformListLabel	./vim/plugged/fzf/src/terminal.go	/^	actTransformListLabel$/;"	c	package:fzf
actTransformNth	./vim/plugged/fzf/src/terminal.go	/^	actTransformNth$/;"	c	package:fzf
actTransformPointer	./vim/plugged/fzf/src/terminal.go	/^	actTransformPointer$/;"	c	package:fzf
actTransformPreviewLabel	./vim/plugged/fzf/src/terminal.go	/^	actTransformPreviewLabel$/;"	c	package:fzf
actTransformPrompt	./vim/plugged/fzf/src/terminal.go	/^	actTransformPrompt$/;"	c	package:fzf
actTransformQuery	./vim/plugged/fzf/src/terminal.go	/^	actTransformQuery$/;"	c	package:fzf
actTransformSearch	./vim/plugged/fzf/src/terminal.go	/^	actTransformSearch$/;"	c	package:fzf
actTrigger	./vim/plugged/fzf/src/terminal.go	/^	actTrigger$/;"	c	package:fzf
actUnbind	./vim/plugged/fzf/src/terminal.go	/^	actUnbind$/;"	c	package:fzf
actUnixLineDiscard	./vim/plugged/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c	package:fzf
actUnixWordRubout	./vim/plugged/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c	package:fzf
actUntrackCurrent	./vim/plugged/fzf/src/terminal.go	/^	actUntrackCurrent$/;"	c	package:fzf
actUp	./vim/plugged/fzf/src/terminal.go	/^	actUp$/;"	c	package:fzf
actYank	./vim/plugged/fzf/src/terminal.go	/^	actYank$/;"	c	package:fzf
action	./vim/plugged/fzf/src/terminal.go	/^type action struct {$/;"	s	package:fzf
actionChannel	./vim/plugged/fzf/src/server.go	/^	actionChannel chan []*action$/;"	m	struct:fzf.httpServer	typeref:typename:chan []*action
actionNameRegexp	./vim/plugged/fzf/src/options.go	/^	actionNameRegexp *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
actionType	./vim/plugged/fzf/src/terminal.go	/^type actionType int$/;"	t	package:fzf	typeref:typename:int
activePreviewOpts	./vim/plugged/fzf/src/terminal.go	/^	activePreviewOpts  *previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:*previewOpts
addClickFooterWord	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) addClickFooterWord(env []string) []string {$/;"	f	struct:fzf.Terminal	typeref:typename:[]string
addClickHeaderWord	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) addClickHeaderWord(env []string) []string {$/;"	f	struct:fzf.Terminal	typeref:typename:[]string
adjustMarginAndPadding	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) adjustMarginAndPadding() (int, int, [4]int, [4]int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int, [4]int, [4]int)
airline	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^augroup airline#extensions#cursormode$/;"	a
airline	./vim/plugged/vim-airline/plugin/airline.vim	/^    augroup airline$/;"	a
airline#add_inactive_statusline_func	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_func(name, ...)$/;"	f
airline#add_inactive_statusline_funcref	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_funcref(function, ...)$/;"	f
airline#add_statusline_func	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_func(name, ...)$/;"	f
airline#add_statusline_funcref	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_funcref(function, ...)$/;"	f
airline#async#get_mq_async	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_mq_async(cmd, file)$/;"	f
airline#async#get_msgfmt_stat	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_msgfmt_stat(cmd, file)$/;"	f
airline#async#mq_output	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#mq_output(buf, file)$/;"	f
airline#async#nvim_get_mq_async	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_mq_async(cmd, file)$/;"	f
airline#async#nvim_get_msgfmt_stat	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_msgfmt_stat(cmd, file)$/;"	f
airline#async#nvim_vcs_clean	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#nvim_vcs_untracked	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#nvim_vcs_untracked(cfg, file, vcs)$/;"	f
airline#async#vcs_clean	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vcs_untracked	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_untracked(config, file, vcs)$/;"	f
airline#async#vim7_vcs_clean	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vim7_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_clean	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_untracked	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_untracked(config, file)$/;"	f
airline#builder#get_next_group	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_next_group(sections, i)$/;"	f
airline#builder#get_prev_group	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_prev_group(sections, i)$/;"	f
airline#builder#new	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#new(context)$/;"	f
airline#builder#should_change_group	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#should_change_group(group1, group2)$/;"	f
airline#check_mode	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#check_mode(winnr)$/;"	f
airline#cmdwinenter	./vim/plugged/vim-airline/plugin/airline.vim	/^function! airline#cmdwinenter(...)$/;"	f
airline#debug#profile1	./vim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile1()$/;"	f
airline#debug#profile2	./vim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile2()$/;"	f
airline#debug#profile3	./vim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile3()$/;"	f
airline#extensions#ale#get	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get(type)$/;"	f
airline#extensions#ale#get_error	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_error()$/;"	f
airline#extensions#ale#get_warning	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_warning()$/;"	f
airline#extensions#ale#init	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#init(ext)$/;"	f
airline#extensions#append_to_section	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#append_to_section(name, value)$/;"	f
airline#extensions#apply	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply(...)$/;"	f
airline#extensions#apply_left_override	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply_left_override(section1, section2)$/;"	f
airline#extensions#battery#init	./vim/plugged/vim-airline/autoload/airline/extensions/battery.vim	/^function! airline#extensions#battery#init(ext) abort$/;"	f
airline#extensions#battery#status	./vim/plugged/vim-airline/autoload/airline/extensions/battery.vim	/^function! airline#extensions#battery#status(...) abort$/;"	f
airline#extensions#bookmark#currentbookmark	./vim/plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#currentbookmark() abort$/;"	f
airline#extensions#bookmark#init	./vim/plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#init(ext) abort$/;"	f
airline#extensions#branch#get_head	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#get_head()$/;"	f
airline#extensions#branch#head	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#head()$/;"	f
airline#extensions#branch#init	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#init(ext)$/;"	f
airline#extensions#branch#update_untracked_config	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#update_untracked_config(file, vcs)$/;"	f
airline#extensions#bufferline#init	./vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^function! airline#extensions#bufferline#init(ext)$/;"	f
airline#extensions#capslock#init	./vim/plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#init(ext)$/;"	f
airline#extensions#capslock#status	./vim/plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#status()$/;"	f
airline#extensions#coc#get	./vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get(type) abort$/;"	f
airline#extensions#coc#get_current_function	./vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_current_function() abort$/;"	f
airline#extensions#coc#get_error	./vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_error() abort$/;"	f
airline#extensions#coc#get_status	./vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_status() abort$/;"	f
airline#extensions#coc#get_warning	./vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_warning() abort$/;"	f
airline#extensions#coc#init	./vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#init(ext) abort$/;"	f
airline#extensions#codeium#init	./vim/plugged/vim-airline/autoload/airline/extensions/codeium.vim	/^function! airline#extensions#codeium#init(ext) abort$/;"	f
airline#extensions#codeium#status	./vim/plugged/vim-airline/autoload/airline/extensions/codeium.vim	/^function! airline#extensions#codeium#status() abort$/;"	f
airline#extensions#commandt#apply	./vim/plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#apply(...)$/;"	f
airline#extensions#commandt#init	./vim/plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#init(ext)$/;"	f
airline#extensions#csv#apply	./vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#apply(...)$/;"	f
airline#extensions#csv#get_column	./vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#get_column()$/;"	f
airline#extensions#csv#init	./vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#init(ext)$/;"	f
airline#extensions#ctrlp#apply	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#apply(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline_status	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline_status(...)$/;"	f
airline#extensions#ctrlp#generate_color_map	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#generate_color_map(dark, light, white)$/;"	f
airline#extensions#ctrlp#init	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#init(ext)$/;"	f
airline#extensions#ctrlp#load_theme	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#load_theme(palette)$/;"	f
airline#extensions#ctrlspace#init	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#init(ext) abort$/;"	f
airline#extensions#ctrlspace#statusline	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#statusline(...) abort$/;"	f
airline#extensions#cursormode#activate	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#activate()$/;"	f
airline#extensions#cursormode#apply	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#apply(...)$/;"	f
airline#extensions#cursormode#init	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#init(ext)$/;"	f
airline#extensions#cursormode#set	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#set(...)$/;"	f
airline#extensions#cursormode#tmux_escape	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#tmux_escape(escape)$/;"	f
airline#extensions#default#apply	./vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! airline#extensions#default#apply(builder, context) abort$/;"	f
airline#extensions#denite#apply	./vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#apply(...) abort$/;"	f
airline#extensions#denite#check_denite_mode	./vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#check_denite_mode(bufnr) abort$/;"	f
airline#extensions#denite#init	./vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#init(ext) abort$/;"	f
airline#extensions#dirvish#apply	./vim/plugged/vim-airline/autoload/airline/extensions/dirvish.vim	/^function! airline#extensions#dirvish#apply(...) abort$/;"	f
airline#extensions#dirvish#init	./vim/plugged/vim-airline/autoload/airline/extensions/dirvish.vim	/^function! airline#extensions#dirvish#init(ext) abort$/;"	f
airline#extensions#eclim#creat_line	./vim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#creat_line(...)$/;"	f
airline#extensions#eclim#get_warnings	./vim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#get_warnings()$/;"	f
airline#extensions#eclim#init	./vim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#init(ext)$/;"	f
airline#extensions#example#apply	./vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#apply(...)$/;"	f
airline#extensions#example#get_cats	./vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#get_cats()$/;"	f
airline#extensions#example#init	./vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#init(ext)$/;"	f
airline#extensions#fern#apply_active	./vim/plugged/vim-airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#apply_active(...) abort$/;"	f
airline#extensions#fern#apply_inactive	./vim/plugged/vim-airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#apply_inactive(...) abort$/;"	f
airline#extensions#fern#configure_sections	./vim/plugged/vim-airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#configure_sections(win, context) abort$/;"	f
airline#extensions#fern#init	./vim/plugged/vim-airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#init(ext) abort$/;"	f
airline#extensions#fugitiveline#bufname	./vim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#bufname() abort$/;"	f
airline#extensions#fugitiveline#init	./vim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#init(ext) abort$/;"	f
airline#extensions#fzf#apply	./vim/plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#apply(...) abort$/;"	f
airline#extensions#fzf#inactive_apply	./vim/plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#inactive_apply(...) abort$/;"	f
airline#extensions#fzf#init	./vim/plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#init(ext) abort$/;"	f
airline#extensions#fzf#statusline	./vim/plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#statusline(...) abort$/;"	f
airline#extensions#gen_tags#init	./vim/plugged/vim-airline/autoload/airline/extensions/gen_tags.vim	/^function! airline#extensions#gen_tags#init(ext) abort$/;"	f
airline#extensions#gen_tags#status	./vim/plugged/vim-airline/autoload/airline/extensions/gen_tags.vim	/^function! airline#extensions#gen_tags#status(...) abort$/;"	f
airline#extensions#get_loaded_extensions	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#get_loaded_extensions()$/;"	f
airline#extensions#gina#apply	./vim/plugged/vim-airline/autoload/airline/extensions/gina.vim	/^function! airline#extensions#gina#apply(...) abort$/;"	f
airline#extensions#gina#init	./vim/plugged/vim-airline/autoload/airline/extensions/gina.vim	/^function! airline#extensions#gina#init(ext) abort$/;"	f
airline#extensions#grepper#init	./vim/plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#init(ext)$/;"	f
airline#extensions#grepper#status	./vim/plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#status()$/;"	f
airline#extensions#gutentags#init	./vim/plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#init(ext)$/;"	f
airline#extensions#gutentags#status	./vim/plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#status()$/;"	f
airline#extensions#hunks#get_hunks	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_hunks() abort$/;"	f
airline#extensions#hunks#get_raw_hunks	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_raw_hunks() abort$/;"	f
airline#extensions#hunks#init	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#init(ext) abort$/;"	f
airline#extensions#keymap#init	./vim/plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#init(ext)$/;"	f
airline#extensions#keymap#status	./vim/plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#status()$/;"	f
airline#extensions#languageclient#get	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get(type)$/;"	f
airline#extensions#languageclient#get_error	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_error()$/;"	f
airline#extensions#languageclient#get_warning	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_warning()$/;"	f
airline#extensions#languageclient#init	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#init(ext)$/;"	f
airline#extensions#load	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load()$/;"	f
airline#extensions#load_theme	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load_theme()$/;"	f
airline#extensions#localsearch#apply	./vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#apply(...) abort$/;"	f
airline#extensions#localsearch#init	./vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#init(ext) abort$/;"	f
airline#extensions#localsearch#load_theme	./vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#load_theme(palette) abort$/;"	f
airline#extensions#lsp#get	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get(type) abort$/;"	f
airline#extensions#lsp#get_error	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get_error() abort$/;"	f
airline#extensions#lsp#get_warning	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get_warning() abort$/;"	f
airline#extensions#lsp#init	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#init(ext) abort$/;"	f
airline#extensions#lsp#progress	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#progress() abort$/;"	f
airline#extensions#lsp#update	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#update() abort$/;"	f
airline#extensions#neomake#get_errors	./vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_errors()$/;"	f
airline#extensions#neomake#get_warnings	./vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_warnings()$/;"	f
airline#extensions#neomake#init	./vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#init(ext)$/;"	f
airline#extensions#netrw#apply	./vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#apply(...)$/;"	f
airline#extensions#netrw#init	./vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#init(ext)$/;"	f
airline#extensions#netrw#sortstring	./vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#sortstring()$/;"	f
airline#extensions#nrrwrgn#apply	./vim/plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#apply(...)$/;"	f
airline#extensions#nrrwrgn#init	./vim/plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#init(ext)$/;"	f
airline#extensions#nvimlsp#get	./vim/plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get(type) abort$/;"	f
airline#extensions#nvimlsp#get_error	./vim/plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get_error() abort$/;"	f
airline#extensions#nvimlsp#get_warning	./vim/plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get_warning() abort$/;"	f
airline#extensions#nvimlsp#init	./vim/plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#init(ext) abort$/;"	f
airline#extensions#obsession#get_status	./vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#get_status()$/;"	f
airline#extensions#obsession#init	./vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#init(ext)$/;"	f
airline#extensions#omnisharp#init	./vim/plugged/vim-airline/autoload/airline/extensions/omnisharp.vim	/^function! airline#extensions#omnisharp#init(ext) abort$/;"	f
airline#extensions#omnisharp#server_status	./vim/plugged/vim-airline/autoload/airline/extensions/omnisharp.vim	/^function! airline#extensions#omnisharp#server_status(...) abort$/;"	f
airline#extensions#po#apply	./vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#apply(...)$/;"	f
airline#extensions#po#init	./vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#init(ext)$/;"	f
airline#extensions#po#on_winenter	./vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#on_winenter()$/;"	f
airline#extensions#po#shorten	./vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#shorten()$/;"	f
airline#extensions#po#stats	./vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#stats()$/;"	f
airline#extensions#poetv#apply	./vim/plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#apply(...)$/;"	f
airline#extensions#poetv#init	./vim/plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#init(ext)$/;"	f
airline#extensions#poetv#update	./vim/plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#update()$/;"	f
airline#extensions#prepend_to_section	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#prepend_to_section(name, value)$/;"	f
airline#extensions#promptline#init	./vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#init(ext)$/;"	f
airline#extensions#promptline#set_prompt_colors	./vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#set_prompt_colors(palette)$/;"	f
airline#extensions#quickfix#apply	./vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#apply(...)$/;"	f
airline#extensions#quickfix#get_type	./vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#get_type()$/;"	f
airline#extensions#quickfix#inactive_qf_window	./vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#inactive_qf_window(...)$/;"	f
airline#extensions#quickfix#init	./vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#init(ext)$/;"	f
airline#extensions#rufo#apply	./vim/plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^function! airline#extensions#rufo#apply(...)$/;"	f
airline#extensions#rufo#get_status	./vim/plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^function! airline#extensions#rufo#get_status()$/;"	f
airline#extensions#rufo#init	./vim/plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^function! airline#extensions#rufo#init(ext)$/;"	f
airline#extensions#scrollbar#calculate	./vim/plugged/vim-airline/autoload/airline/extensions/scrollbar.vim	/^function! airline#extensions#scrollbar#calculate() abort$/;"	f
airline#extensions#scrollbar#init	./vim/plugged/vim-airline/autoload/airline/extensions/scrollbar.vim	/^function! airline#extensions#scrollbar#init(ext) abort$/;"	f
airline#extensions#searchcount#apply	./vim/plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#apply(...) abort$/;"	f
airline#extensions#searchcount#init	./vim/plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#init(ext) abort$/;"	f
airline#extensions#searchcount#status	./vim/plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#status() abort$/;"	f
airline#extensions#syntastic#get	./vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get(type)$/;"	f
airline#extensions#syntastic#get_error	./vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_error()$/;"	f
airline#extensions#syntastic#get_warning	./vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_warning()$/;"	f
airline#extensions#syntastic#init	./vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#init(ext)$/;"	f
airline#extensions#tabline#add_label	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_label(dict, type, right)$/;"	f
airline#extensions#tabline#add_tab_label	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_tab_label(dict)$/;"	f
airline#extensions#tabline#autoshow#off	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#off()$/;"	f
airline#extensions#tabline#autoshow#on	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#on()$/;"	f
airline#extensions#tabline#buffers#clickbuf	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#clickbuf(minwid, clicks, button, modifiers) abort$/;"	f
airline#extensions#tabline#buffers#get	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#get()$/;"	f
airline#extensions#tabline#buffers#invalidate	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#invalidate()$/;"	f
airline#extensions#tabline#buffers#off	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#off()$/;"	f
airline#extensions#tabline#buffers#on	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#on()$/;"	f
airline#extensions#tabline#buflist#clean	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#clean()$/;"	f
airline#extensions#tabline#buflist#invalidate	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#invalidate()$/;"	f
airline#extensions#tabline#buflist#list	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#list()$/;"	f
airline#extensions#tabline#builder#new	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! airline#extensions#tabline#builder#new(context)$/;"	f
airline#extensions#tabline#ctrlspace#add_buffer_section	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_buffer_section(builder, cur_tab, cur_buf, pul/;"	f
airline#extensions#tabline#ctrlspace#add_tab_section	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#ctrlspace#get	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#get()$/;"	f
airline#extensions#tabline#ctrlspace#invalidate	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#invalidate()$/;"	f
airline#extensions#tabline#ctrlspace#off	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#off()$/;"	f
airline#extensions#tabline#ctrlspace#on	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#on()$/;"	f
airline#extensions#tabline#enable	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#enable(): void$/;"	f
airline#extensions#tabline#enable	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#enable()$/;"	f
airline#extensions#tabline#formatters#default#format	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  def airline#extensions#tabline#formatters#default#format(bufnr: number, buffers: list<number>)/;"	f
airline#extensions#tabline#formatters#default#format	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  function! airline#extensions#tabline#formatters#default#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#default#wrap_name	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  def airline#extensions#tabline#formatters#default#wrap_name(bufnr: number, buffer_name: string/;"	f
airline#extensions#tabline#formatters#default#wrap_name	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  function! airline#extensions#tabline#formatters#default#wrap_name(bufnr, buffer_name)$/;"	f
airline#extensions#tabline#formatters#jsformatter#format	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/jsformatter.vim	/^function! airline#extensions#tabline#formatters#jsformatter#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#short_path#format	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^function! airline#extensions#tabline#formatters#short_path#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#short_path_improved#format	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path_improved.vim	/^function! airline#extensions#tabline#formatters#short_path_improved#format(bufnr, buffers) abort$/;"	f
airline#extensions#tabline#formatters#tabnr#format	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/tabnr.vim	/^function! airline#extensions#tabline#formatters#tabnr#format(tab_nr, buflist)$/;"	f
airline#extensions#tabline#formatters#unique_tail#format	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail.vim	/^function! airline#extensions#tabline#formatters#unique_tail#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#unique_tail_improved#format	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^function! airline#extensions#tabline#formatters#unique_tail_improved#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#get	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#get(): string$/;"	f
airline#extensions#tabline#get	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#get()$/;"	f
airline#extensions#tabline#get_buffer_name	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#get_buffer_name(nr: number, buffers = airline#extensions#tablin/;"	f
airline#extensions#tabline#get_buffer_name	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#get_buffer_name(nr, ...)$/;"	f
airline#extensions#tabline#group_of_bufnr	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#group_of_bufnr(tab_bufs: list<number>, bufnr: number): string$/;"	f
airline#extensions#tabline#group_of_bufnr	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#group_of_bufnr(tab_bufs, bufnr)$/;"	f
airline#extensions#tabline#init	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#init(ext)$/;"	f
airline#extensions#tabline#load_theme	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#load_theme(palette: dict<any>): number$/;"	f
airline#extensions#tabline#load_theme	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#load_theme(palette)$/;"	f
airline#extensions#tabline#new_builder	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#new_builder(): dict<any>$/;"	f
airline#extensions#tabline#new_builder	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#new_builder()$/;"	f
airline#extensions#tabline#redraw	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#redraw(): void$/;"	f
airline#extensions#tabline#redraw	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#redraw()$/;"	f
airline#extensions#tabline#tabs#get	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#get()$/;"	f
airline#extensions#tabline#tabs#invalidate	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#invalidate()$/;"	f
airline#extensions#tabline#tabs#map_keys	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#map_keys()$/;"	f
airline#extensions#tabline#tabs#off	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#off()$/;"	f
airline#extensions#tabline#tabs#on	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#on()$/;"	f
airline#extensions#tabline#tabs#tabnr_formatter	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#tabnr_formatter(nr, i) abort$/;"	f
airline#extensions#tabline#tabws#add_buffer_section	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_buffer_section(builder, cur_tab, cur_buf, pull_ri/;"	f
airline#extensions#tabline#tabws#add_tab_section	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#tabws#get	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#get()$/;"	f
airline#extensions#tabline#tabws#invalidate	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#invalidate()$/;"	f
airline#extensions#tabline#tabws#off	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#off()$/;"	f
airline#extensions#tabline#tabws#on	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#on()$/;"	f
airline#extensions#tabline#title	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#title(n: number): string$/;"	f
airline#extensions#tabline#title	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#title(n)$/;"	f
airline#extensions#tabline#xtabline#filter_buffers	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#filter_buffers()$/;"	f
airline#extensions#tabline#xtabline#init	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#init()$/;"	f
airline#extensions#tabline#xtabline#maps	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#maps()$/;"	f
airline#extensions#tabline#xtabline#next_buffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#next_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#prev_buffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#prev_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#reopen_last_tab	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#reopen_last_tab()$/;"	f
airline#extensions#tabline#xtabline#select_buffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#select_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#toggle_buffers	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_buffers()$/;"	f
airline#extensions#tabline#xtabline#toggle_tabs	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_tabs()$/;"	f
airline#extensions#tabline#xtabline#update_obsession	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#update_obsession()$/;"	f
airline#extensions#tagbar#currenttag	./vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#currenttag()$/;"	f
airline#extensions#tagbar#get_status	./vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#get_status(...)$/;"	f
airline#extensions#tagbar#inactive_apply	./vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#inactive_apply(...)$/;"	f
airline#extensions#tagbar#init	./vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#init(ext)$/;"	f
airline#extensions#taglist#currenttag	./vim/plugged/vim-airline/autoload/airline/extensions/taglist.vim	/^function! airline#extensions#taglist#currenttag()$/;"	f
airline#extensions#taglist#init	./vim/plugged/vim-airline/autoload/airline/extensions/taglist.vim	/^function! airline#extensions#taglist#init(ext)$/;"	f
airline#extensions#term#apply	./vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#apply(...) abort$/;"	f
airline#extensions#term#inactive_apply	./vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#inactive_apply(...) abort$/;"	f
airline#extensions#term#init	./vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#init(ext) abort$/;"	f
airline#extensions#term#termmode	./vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#termmode() abort$/;"	f
airline#extensions#tmuxline#init	./vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#init(ext)$/;"	f
airline#extensions#tmuxline#set_tmux_colors	./vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#set_tmux_colors(palette)$/;"	f
airline#extensions#undotree#apply	./vim/plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#apply(...)$/;"	f
airline#extensions#undotree#init	./vim/plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#init(ext)$/;"	f
airline#extensions#unicode#apply	./vim/plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#apply(...)$/;"	f
airline#extensions#unicode#init	./vim/plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#init(ext)$/;"	f
airline#extensions#unite#apply	./vim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#apply(...)$/;"	f
airline#extensions#unite#init	./vim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#init(ext)$/;"	f
airline#extensions#vim9lsp#get_errors	./vim/plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^function! airline#extensions#vim9lsp#get_errors() abort$/;"	f
airline#extensions#vim9lsp#get_warnings	./vim/plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^function! airline#extensions#vim9lsp#get_warnings() abort$/;"	f
airline#extensions#vim9lsp#init	./vim/plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^function! airline#extensions#vim9lsp#init(ext) abort$/;"	f
airline#extensions#vimagit#apply	./vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#apply(...) abort$/;"	f
airline#extensions#vimagit#get_mode	./vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#get_mode() abort$/;"	f
airline#extensions#vimagit#init	./vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#init(ext) abort$/;"	f
airline#extensions#vimcmake#apply	./vim/plugged/vim-airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#apply(...) abort$/;"	f
airline#extensions#vimcmake#inactive_apply	./vim/plugged/vim-airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#inactive_apply(...) abort$/;"	f
airline#extensions#vimcmake#init	./vim/plugged/vim-airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#init(ext) abort$/;"	f
airline#extensions#vimodoro#apply	./vim/plugged/vim-airline/autoload/airline/extensions/vimodoro.vim	/^function! airline#extensions#vimodoro#apply(...) abort$/;"	f
airline#extensions#vimodoro#init	./vim/plugged/vim-airline/autoload/airline/extensions/vimodoro.vim	/^function! airline#extensions#vimodoro#init(ext) abort$/;"	f
airline#extensions#vimtex#apply	./vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#apply(...)$/;"	f
airline#extensions#vimtex#get_scope	./vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#get_scope()$/;"	f
airline#extensions#vimtex#init	./vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#init(ext)$/;"	f
airline#extensions#virtualenv#apply	./vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#apply(...)$/;"	f
airline#extensions#virtualenv#init	./vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#init(ext)$/;"	f
airline#extensions#virtualenv#update	./vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#update()$/;"	f
airline#extensions#vista#currenttag	./vim/plugged/vim-airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#currenttag() abort$/;"	f
airline#extensions#vista#init	./vim/plugged/vim-airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#init(ext) abort$/;"	f
airline#extensions#whitespace#check	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#check()$/;"	f
airline#extensions#whitespace#disable	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#disable()$/;"	f
airline#extensions#whitespace#init	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#init(...)$/;"	f
airline#extensions#whitespace#toggle	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#toggle()$/;"	f
airline#extensions#windowswap#get_status	./vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#get_status()$/;"	f
airline#extensions#windowswap#init	./vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#init(ext)$/;"	f
airline#extensions#wordcount#apply	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#apply(...)$/;"	f
airline#extensions#wordcount#formatters#default#to_string	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#to_string(wordcount)$/;"	f
airline#extensions#wordcount#formatters#default#update_fmt	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#update_fmt(...)$/;"	f
airline#extensions#wordcount#formatters#readingtime#to_string	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^function! airline#extensions#wordcount#formatters#readingtime#to_string(wordcount) abort$/;"	f
airline#extensions#wordcount#formatters#readingtime#update_fmt	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^function! airline#extensions#wordcount#formatters#readingtime#update_fmt(...) abort$/;"	f
airline#extensions#wordcount#get	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function airline#extensions#wordcount#get()$/;"	f
airline#extensions#wordcount#init	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#init(ext)$/;"	f
airline#extensions#xkblayout#init	./vim/plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#init(ext)$/;"	f
airline#extensions#xkblayout#status	./vim/plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#status()$/;"	f
airline#extensions#ycm#get_error_count	./vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_error_count() abort$/;"	f
airline#extensions#ycm#get_warning_count	./vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_warning_count()$/;"	f
airline#extensions#ycm#init	./vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#init(ext)$/;"	f
airline#extensions#zoomwintab#apply	./vim/plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^function! airline#extensions#zoomwintab#apply(...) abort$/;"	f
airline#extensions#zoomwintab#init	./vim/plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^function! airline#extensions#zoomwintab#init(ext) abort$/;"	f
airline#formatter#short_path#format	./vim/plugged/vim-airline/autoload/airline/formatter/short_path.vim	/^function! airline#formatter#short_path#format(val) abort$/;"	f
airline#highlighter#add_accent	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#add_accent(accent: string): void$/;"	f
airline#highlighter#add_accent	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#add_accent(accent) abort$/;"	f
airline#highlighter#add_separator	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#add_separator(from: string, to: string, inverse: bool): void$/;"	f
airline#highlighter#add_separator	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#add_separator(from, to, inverse) abort$/;"	f
airline#highlighter#exec	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#exec(group: string, clrs: list<any>): void$/;"	f
airline#highlighter#exec	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#exec(group, colors) abort$/;"	f
airline#highlighter#get_highlight	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#get_highlight(group: string, rest: list<string> = ['']): list<string>$/;"	f
airline#highlighter#get_highlight	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#get_highlight(group, ...) abort$/;"	f
airline#highlighter#get_highlight2	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#get_highlight2(fg: list<string>, bg: list<string>, ...rest: list<strin/;"	f
airline#highlighter#get_highlight2	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#get_highlight2(fg, bg, ...) abort$/;"	f
airline#highlighter#highlight	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#highlight(modes: list<string>, bufnr: string = ''): void$/;"	f
airline#highlighter#highlight	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#highlight(modes, ...) abort$/;"	f
airline#highlighter#highlight_modified_inactive	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#highlight_modified_inactive(bufnr: number): void$/;"	f
airline#highlighter#highlight_modified_inactive	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#highlight_modified_inactive(bufnr) abort$/;"	f
airline#highlighter#load_theme	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#load_theme(): void$/;"	f
airline#highlighter#load_theme	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#load_theme() abort$/;"	f
airline#highlighter#remove_separators_for_bufnr	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#remove_separators_for_bufnr(bufnr: string): void$/;"	f
airline#highlighter#remove_separators_for_bufnr	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#remove_separators_for_bufnr(bufnr) abort$/;"	f
airline#highlighter#reset_hlcache	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#reset_hlcache(): void$/;"	f
airline#highlighter#reset_hlcache	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#reset_hlcache() abort$/;"	f
airline#init#bootstrap	./vim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#bootstrap()$/;"	f
airline#init#sections	./vim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#sections()$/;"	f
airline#load_theme	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#load_theme()$/;"	f
airline#mode_changed	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#mode_changed()$/;"	f
airline#msdos#round_msdos_colors	./vim/plugged/vim-airline/autoload/airline/msdos.vim	/^	function! airline#msdos#round_msdos_colors(rgblist)$/;"	f
airline#msdos#round_msdos_colors	./vim/plugged/vim-airline/autoload/airline/msdos.vim	/^  def airline#msdos#round_msdos_colors(rgblist: list<number>): string$/;"	f
airline#parts#crypt	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#crypt()$/;"	f
airline#parts#define	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define(key, config)$/;"	f
airline#parts#define_accent	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_accent(key, accent)$/;"	f
airline#parts#define_condition	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_condition(key, predicate)$/;"	f
airline#parts#define_empty	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_empty(keys)$/;"	f
airline#parts#define_function	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_function(key, name)$/;"	f
airline#parts#define_minwidth	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_minwidth(key, width)$/;"	f
airline#parts#define_raw	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_raw(key, raw)$/;"	f
airline#parts#define_text	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_text(key, text)$/;"	f
airline#parts#executable	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#executable()$/;"	f
airline#parts#ffenc	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#ffenc()$/;"	f
airline#parts#filetype	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#filetype()$/;"	f
airline#parts#get	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#get(key)$/;"	f
airline#parts#iminsert	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#iminsert()$/;"	f
airline#parts#mode	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#mode()$/;"	f
airline#parts#paste	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#paste()$/;"	f
airline#parts#readonly	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#readonly()$/;"	f
airline#parts#spell	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#spell()$/;"	f
airline#remove_statusline_func	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#remove_statusline_func(name)$/;"	f
airline#section#create	./vim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create(parts)$/;"	f
airline#section#create_left	./vim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_left(parts)$/;"	f
airline#section#create_right	./vim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_right(parts)$/;"	f
airline#statusline	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#statusline(winnr)$/;"	f
airline#switch_matching_theme	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_matching_theme()$/;"	f
airline#switch_theme	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_theme(name, ...)$/;"	f
airline#themes#generate_color_map	./vim/plugged/vim-airline/autoload/airline/themes.vim	/^  def airline#themes#generate_color_map(sect1: list<any>, sect2: list<any>, sect3: list<any>, ../;"	f
airline#themes#generate_color_map	./vim/plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#generate_color_map(sect1, sect2, sect3, ...)$/;"	f
airline#themes#get_highlight	./vim/plugged/vim-airline/autoload/airline/themes.vim	/^  def airline#themes#get_highlight(group: string, ...modifiers: list<string>): list<string>$/;"	f
airline#themes#get_highlight	./vim/plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#get_highlight(group, ...)$/;"	f
airline#themes#get_highlight2	./vim/plugged/vim-airline/autoload/airline/themes.vim	/^  def airline#themes#get_highlight2(fg: list<string>, bg: list<string>, ...modifiers: list<strin/;"	f
airline#themes#get_highlight2	./vim/plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#get_highlight2(fg, bg, ...)$/;"	f
airline#themes#patch	./vim/plugged/vim-airline/autoload/airline/themes.vim	/^  def airline#themes#patch(palette: dict<any>): void$/;"	f
airline#themes#patch	./vim/plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#patch(palette)$/;"	f
airline#update_statusline	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline()$/;"	f
airline#update_statusline_focuslost	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_focuslost()$/;"	f
airline#update_statusline_inactive	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_inactive(range)$/;"	f
airline#update_tabline	./vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_tabline()$/;"	f
airline#util#append	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#append(text, minwidth)$/;"	f
airline#util#doautocmd	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#doautocmd(event)$/;"	f
airline#util#exec_funcrefs	./vim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#exec_funcrefs(list, ...)$/;"	f
airline#util#getbufvar	./vim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getbufvar(bufnr, key, def)$/;"	f
airline#util#getwinvar	./vim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getwinvar(winnr, key, def)$/;"	f
airline#util#has_custom_scm	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_custom_scm()$/;"	f
airline#util#has_fugitive	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_fugitive()$/;"	f
airline#util#has_gina	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_gina()$/;"	f
airline#util#has_lawrencium	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_lawrencium()$/;"	f
airline#util#has_vcscommand	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_vcscommand()$/;"	f
airline#util#has_vim9_script	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_vim9_script()$/;"	f
airline#util#ignore_buf	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#ignore_buf(name)$/;"	f
airline#util#ignore_next_focusgain	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#ignore_next_focusgain()$/;"	f
airline#util#is_popup_window	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#is_popup_window(winnr)$/;"	f
airline#util#prepend	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#prepend(text, minwidth)$/;"	f
airline#util#shorten	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#shorten(text, winwidth, minwidth, ...)$/;"	f
airline#util#stl_disabled	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#stl_disabled(winnr)$/;"	f
airline#util#strcharpart	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#strcharpart(...)$/;"	f
airline#util#strchars	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#strchars(str)$/;"	f
airline#util#themes	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#themes(match)$/;"	f
airline#util#try_focusgained	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#try_focusgained()$/;"	f
airline#util#warning	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#warning(msg)$/;"	f
airline#util#winwidth	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#winwidth(...) abort$/;"	f
airline#util#wrap	./vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#wrap(text, minwidth)$/;"	f
airline_ale	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^  augroup airline_ale$/;"	a
airline_languageclient	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^  augroup airline_languageclient$/;"	a
airline_lsp_progress	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^  augroup airline_lsp_progress$/;"	a
airline_omnisharp	./vim/plugged/vim-airline/autoload/airline/extensions/omnisharp.vim	/^  augroup airline_omnisharp$/;"	a
airline_tabline_autoshow	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^  augroup airline_tabline_autoshow$/;"	a
airline_tabline_buffers	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  augroup airline_tabline_buffers$/;"	a
airline_tabline_ctrlspace	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^  augroup airline_tabline_ctrlspace$/;"	a
airline_tabline_tabs	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  augroup airline_tabline_tabs$/;"	a
airline_tabline_tabws	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^  augroup airline_tabline_tabws$/;"	a
airline_whitespace	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^    augroup airline_whitespace$/;"	a
airline_whitespace	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^  augroup airline_whitespace$/;"	a
algo	./vim/plugged/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	./vim/plugged/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	./vim/plugged/fzf/src/algo/normalize.go	/^package algo$/;"	p
all	./vim/plugged/fzf/Makefile	/^all: target\/$(BINARY)$/;"	t
allItems	./vim/plugged/fzf/src/terminal.go	/^	allItems   [3][]*Item \/\/ current, select, and all matched items$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:[3][]*Item
allItems	./vim/plugged/fzf/src/terminal_test.go	/^	allItems [3][]*Item$/;"	m	struct:fzf.give	typeref:typename:[3][]*Item
alloc16	./vim/plugged/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f	package:algo	typeref:typename:(int, []int16)
alloc32	./vim/plugged/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f	package:algo	typeref:typename:(int, []int32)
alternative	./vim/plugged/fzf/src/options.go	/^	alternative *previewOpts$/;"	m	struct:fzf.previewOpts	typeref:typename:*previewOpts
ansi	./vim/plugged/fzf/src/terminal.go	/^	ansi               bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
ansiBenchmarkString	./vim/plugged/fzf/src/ansi_test.go	/^const ansiBenchmarkString = "\\x1b[38;5;81m\\x1b[01;31m\\x1b[Kkernel\/\\x1b[0m\\x1b[38:5:81mbpf\//;"	c	package:fzf
ansiLabelPrinter	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) ansiLabelPrinter(str string, color *tui.ColorPair, fill bool) (labelPrinter, /;"	f	struct:fzf.Terminal	typeref:typename:(labelPrinter, int)
ansiOffset	./vim/plugged/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	s	package:fzf
ansiRegexReference	./vim/plugged/fzf/src/ansi_test.go	/^var ansiRegexReference = regexp.MustCompile("(?:\\x1b[\\\\[()][0-9;:]*[a-zA-Z@]|\\x1b][0-9][;:][/;"	v	package:fzf
ansiState	./vim/plugged/fzf/src/ansi.go	/^type ansiState struct {$/;"	s	package:fzf
any_include?	./vim/plugged/fzf/test/lib/common.rb	/^          def any_include?(val)$/;"	f	method:Tmux.until
apiKey	./vim/plugged/fzf/src/server.go	/^	apiKey        []byte$/;"	m	struct:fzf.httpServer	typeref:typename:[]byte
append	./vim/plugged/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f	struct:fzf.History	typeref:typename:error
applyPreset	./vim/plugged/fzf/src/options.go	/^func applyPreset(opts *Options, preset string) error {$/;"	f	package:fzf	typeref:typename:error
arcticicestudio/nord-vim	./vim/plugged/fzf/ADVANCED.md	/^# arcticicestudio\/nord-vim$/;"	c
areaColumns	./vim/plugged/fzf/src/terminal.go	/^	areaColumns        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
areaLines	./vim/plugged/fzf/src/terminal.go	/^	areaLines          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
args	./vim/plugged/fzf/src/util/util_unix.go	/^	args    []string$/;"	m	struct:util.Executor	typeref:typename:[]string
args	./vim/plugged/fzf/src/util/util_windows.go	/^	args      []string$/;"	m	struct:util.Executor	typeref:typename:[]string
asTcellColor	./vim/plugged/fzf/src/tui/tcell.go	/^func asTcellColor(color Color) tcell.Color {$/;"	f	package:tui	typeref:typename:tcell.Color
asciiCharClasses	./vim/plugged/fzf/src/algo/algo.go	/^	asciiCharClasses [unicode.MaxASCII + 1]charClass$/;"	v	package:algo	typeref:typename:[unicode.MaxASCII + 1]charClass
asciiFuzzyIndex	./vim/plugged/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) (int, int) {$/;"	f	package:algo	typeref:typename:(int, int)
assert	./vim/plugged/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f	package:fzf
assert	./vim/plugged/fzf/src/tui/tcell_test.go	/^func assert(t *testing.T, context string, got any, want any) bool {$/;"	f	package:tui	typeref:typename:bool
assertMatch	./vim/plugged/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sid/;"	f	package:algo
assertMatch2	./vim/plugged/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern/;"	f	package:algo
assert_block	./vim/plugged/fzf/test/test_layout.rb	/^  def assert_block(expected, lines)$/;"	f	class:TestLayout
assert_equal	./vim/plugged/fzf/test/lib/common.rb	/^  def assert_equal(expected, actual)$/;"	f	class:TestBase
assert_equal_org	./vim/plugged/fzf/test/lib/common.rb	/^  alias assert_equal_org assert_equal$/;"	a	class:TestBase
asterisk	./vim/plugged/fzf/src/terminal.go	/^	asterisk      bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
at	./vim/plugged/fzf/src/terminal.go	/^	at   time.Time$/;"	m	struct:fzf.selectedItem	typeref:typename:time.Time
atExitFuncs	./vim/plugged/fzf/src/util/atexit.go	/^var atExitFuncs []func()$/;"	v	package:util	typeref:typename:[]func()
atMost	./vim/plugged/fzf/src/terminal.go	/^	atMost   int$/;"	m	struct:fzf.numLinesCacheValue	typeref:typename:int
atof	./vim/plugged/fzf/src/options.go	/^func atof(str string) (float64, error) {$/;"	f	package:fzf	typeref:typename:(float64, error)
atoi	./vim/plugged/fzf/src/options.go	/^func atoi(str string) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
atoi	./vim/plugged/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
attr	./vim/plugged/fzf/src/ansi.go	/^	attr tui.Attr$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Attr
attr	./vim/plugged/fzf/src/tui/tui.go	/^	attr Attr$/;"	m	struct:tui.ColorPair	typeref:typename:Attr
attrCodes	./vim/plugged/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f	package:tui	typeref:typename:[]string
auto	./vim/plugged/fzf/src/options.go	/^	auto    bool$/;"	m	struct:fzf.heightSpec	typeref:typename:bool
avgNumLines	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) avgNumLines() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
awkBlack	./vim/plugged/fzf/src/tokenizer.go	/^	awkBlack$/;"	c	package:fzf
awkNil	./vim/plugged/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c	package:fzf
awkTokenizer	./vim/plugged/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f	package:fzf	typeref:typename:([]string, int)
awkWhite	./vim/plugged/fzf/src/tokenizer.go	/^	awkWhite$/;"	c	package:fzf
b	./.vimrc	/^vnoremap <silent> b <C-v>$/;"	m
b.get_group	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  function! b.get_group(i) dict$/;"	f
b.get_group	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  function! b.get_group(i) dict$/;"	f
b.get_posttitle	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_posttitle(i) dict$/;"	f
b.get_pretitle	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_pretitle(i) dict$/;"	f
b.get_title	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  function! b.get_title(i) dict$/;"	f
b.get_title	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  function! b.get_title(i) dict$/;"	f
bar	./vim/plugged/fzf/src/terminal.go	/^	bar        []bool$/;"	m	struct:fzf.previewer	typeref:typename:[]bool
barCol	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) barCol() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
bash	./vim/plugged/fzf/test/lib/common.rb	/^    def bash$/;"	S	class:Shell
bashCompletion	./vim/plugged/fzf/main.go	/^var bashCompletion []byte$/;"	v	package:main	typeref:typename:[]byte
bashKeyBindings	./vim/plugged/fzf/main.go	/^var bashKeyBindings []byte$/;"	v	package:main	typeref:typename:[]byte
basicMatch	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
becomeSuffix	./vim/plugged/fzf/src/proxy.go	/^const becomeSuffix = ".become"$/;"	c	package:fzf
begin	./vim/plugged/fzf/src/tokenizer.go	/^	begin int$/;"	m	struct:fzf.Range	typeref:typename:int
bench	./vim/plugged/fzf/Makefile	/^bench:$/;"	t
bg	./vim/plugged/fzf/src/ansi.go	/^	bg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
bg	./vim/plugged/fzf/src/tui/light.go	/^	bg            Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
bg	./vim/plugged/fzf/src/tui/tui.go	/^	bg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
bgQueue	./vim/plugged/fzf/src/terminal.go	/^	bgQueue            map[action][]func(bool)$/;"	m	struct:fzf.Terminal	typeref:typename:map[action][]func(bool)
bgSemaphore	./vim/plugged/fzf/src/terminal.go	/^	bgSemaphore        chan struct{}$/;"	m	struct:fzf.Terminal	typeref:typename:chan struct{}
bgSemaphores	./vim/plugged/fzf/src/terminal.go	/^	bgSemaphores       map[action]chan struct{}$/;"	m	struct:fzf.Terminal	typeref:typename:map[action]chan struct{}
bgVersion	./vim/plugged/fzf/src/terminal.go	/^	bgVersion          int64$/;"	m	struct:fzf.Terminal	typeref:typename:int64
bin/fzf	./vim/plugged/fzf/Makefile	/^bin\/fzf: target\/$(BINARY) | bin$/;"	t
blockDuration	./vim/plugged/fzf/src/terminal.go	/^const blockDuration = 1 * time.Second$/;"	c	package:fzf
bonusAt	./vim/plugged/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusBoundary	./vim/plugged/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c	package:algo
bonusBoundaryDelimiter	./vim/plugged/fzf/src/algo/algo.go	/^	bonusBoundaryDelimiter int16 = bonusBoundary + 1$/;"	v	package:algo	typeref:typename:int16
bonusBoundaryWhite	./vim/plugged/fzf/src/algo/algo.go	/^	bonusBoundaryWhite int16 = bonusBoundary + 2$/;"	v	package:algo	typeref:typename:int16
bonusCamel123	./vim/plugged/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtension$/;"	c	package:algo
bonusConsecutive	./vim/plugged/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtension)$/;"	c	package:algo
bonusFirstCharMultiplier	./vim/plugged/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c	package:algo
bonusFor	./vim/plugged/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusMatrix	./vim/plugged/fzf/src/algo/algo.go	/^	bonusMatrix [charNumber + 1][charNumber + 1]int16$/;"	v	package:algo	typeref:typename:[charNumber + 1][charNumber + 1]int16
bonusNonWord	./vim/plugged/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c	package:algo
border	./vim/plugged/fzf/src/options.go	/^	border      tui.BorderShape$/;"	m	struct:fzf.previewOpts	typeref:typename:tui.BorderShape
border	./vim/plugged/fzf/src/options.go	/^	border   bool$/;"	m	struct:fzf.tmuxOptions	typeref:typename:bool
border	./vim/plugged/fzf/src/terminal.go	/^	border             tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
border	./vim/plugged/fzf/src/tui/light.go	/^	border        BorderStyle$/;"	m	struct:tui.LightWindow	typeref:typename:BorderStyle
borderColumns	./vim/plugged/fzf/src/terminal.go	/^func borderColumns(shape tui.BorderShape, borderWidth int) int {$/;"	f	package:fzf	typeref:typename:int
borderLabel	./vim/plugged/fzf/src/terminal.go	/^	borderLabel        labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
borderLabelLen	./vim/plugged/fzf/src/terminal.go	/^	borderLabelLen     int$/;"	m	struct:fzf.Terminal	typeref:typename:int
borderLabelOpts	./vim/plugged/fzf/src/terminal.go	/^	borderLabelOpts    labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
borderLines	./vim/plugged/fzf/src/terminal.go	/^func borderLines(shape tui.BorderShape) int {$/;"	f	package:fzf	typeref:typename:int
borderShape	./vim/plugged/fzf/src/terminal.go	/^	borderShape        tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
borderStyle	./vim/plugged/fzf/src/tui/tcell.go	/^	borderStyle   BorderStyle$/;"	m	struct:tui.TcellWindow	typeref:typename:BorderStyle
borderWidth	./vim/plugged/fzf/src/terminal.go	/^	borderWidth        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
bottom	./vim/plugged/fzf/src/options.go	/^	bottom bool$/;"	m	struct:fzf.labelOpts	typeref:typename:bool
bottom	./vim/plugged/fzf/src/tui/tui.go	/^	bottom      rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bottomLeft	./vim/plugged/fzf/src/tui/tui.go	/^	bottomLeft  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bottomRight	./vim/plugged/fzf/src/tui/tui.go	/^	bottomRight rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
buffer	./vim/plugged/fzf/src/tui/light.go	/^	buffer        []byte$/;"	m	struct:tui.LightRenderer	typeref:typename:[]byte
build	./vim/plugged/fzf/Makefile	/^build:$/;"	t
buildCacheKey	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
buildLists	./vim/plugged/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f	package:fzf	typeref:typename:([][]Result, []Result)
buildPattern	./vim/plugged/fzf/src/pattern_test.go	/^func buildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool,/;"	f	package:fzf	typeref:typename:*Pattern
buildPlusList	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, [3][]*Item) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, [3][]*Item)
buildResult	./vim/plugged/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f	package:fzf	typeref:typename:Result
bumpMajor	./vim/plugged/fzf/src/core.go	/^func (r *revision) bumpMajor() {$/;"	f	struct:fzf.revision
bumpMinor	./vim/plugged/fzf/src/core.go	/^func (r *revision) bumpMinor() {$/;"	f	struct:fzf.revision
byBegin	./vim/plugged/fzf/src/options.go	/^	byBegin$/;"	c	package:fzf
byChunk	./vim/plugged/fzf/src/options.go	/^	byChunk$/;"	c	package:fzf
byEnd	./vim/plugged/fzf/src/options.go	/^	byEnd$/;"	c	package:fzf
byLength	./vim/plugged/fzf/src/options.go	/^	byLength$/;"	c	package:fzf
byPathname	./vim/plugged/fzf/src/options.go	/^	byPathname$/;"	c	package:fzf
byScore	./vim/plugged/fzf/src/options.go	/^	byScore criterion = iota$/;"	c	package:fzf	typeref:type:criterion
byTimeOrder	./vim/plugged/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t	package:fzf	typeref:typename:[]selectedItem
byteString	./vim/plugged/fzf/src/functions.go	/^func byteString(data []byte) string {$/;"	f	package:fzf	typeref:typename:string
cache	./vim/plugged/fzf/src/cache.go	/^	cache map[*Chunk]*queryCache$/;"	m	struct:fzf.ChunkCache	typeref:typename:map[*Chunk]*queryCache
cache	./vim/plugged/fzf/src/chunklist.go	/^	cache  *ChunkCache$/;"	m	struct:fzf.ChunkList	typeref:typename:*ChunkCache
cache	./vim/plugged/fzf/src/matcher.go	/^	cache          *ChunkCache$/;"	m	struct:fzf.Matcher	typeref:typename:*ChunkCache
cache	./vim/plugged/fzf/src/pattern.go	/^	cache         *ChunkCache$/;"	m	struct:fzf.Pattern	typeref:typename:*ChunkCache
cacheKey	./vim/plugged/fzf/src/pattern.go	/^	cacheKey      string$/;"	m	struct:fzf.Pattern	typeref:typename:string
cacheable	./vim/plugged/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f	struct:fzf.Merger	typeref:typename:bool
cacheable	./vim/plugged/fzf/src/pattern.go	/^	cacheable     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
calculateScore	./vim/plugged/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx i/;"	f	package:algo	typeref:typename:(int, *[]int)
calculateSize	./vim/plugged/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, occupied int, minSize int) int {$/;"	f	package:fzf	typeref:typename:int
callback	./vim/plugged/fzf/src/terminal.go	/^	callback func()$/;"	m	struct:fzf.versionedCallback	typeref:typename:func()
callbackChan	./vim/plugged/fzf/src/terminal.go	/^	callbackChan       chan versionedCallback$/;"	m	struct:fzf.Terminal	typeref:typename:chan versionedCallback
canPreview	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) canPreview() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
canSpanMultiLines	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) canSpanMultiLines() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
cancelPreview	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) cancelPreview() {$/;"	f	struct:fzf.Terminal
capture	./vim/plugged/fzf/test/lib/common.rb	/^  def capture$/;"	f	class:Tmux
captureAsync	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) captureAsync(a action, firstLineOnly bool, callback func(string)) {$/;"	f	struct:fzf.Terminal
captureLine	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) captureLine(template string) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
captureLines	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) captureLines(template string) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
caseSensitive	./vim/plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
caseSensitive	./vim/plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.term	typeref:typename:bool
changeFooter	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) changeFooter(footer string) {$/;"	f	struct:fzf.Terminal
changeHeader	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) changeHeader(header string) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
changed	./vim/plugged/fzf/src/terminal.go	/^	changed  bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
channelTimeout	./vim/plugged/fzf/src/server.go	/^	channelTimeout   = 2 * time.Second$/;"	c	package:fzf
charClass	./vim/plugged/fzf/src/algo/algo.go	/^type charClass int$/;"	t	package:algo	typeref:typename:int
charClassOf	./vim/plugged/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfNonAscii	./vim/plugged/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charDelimiter	./vim/plugged/fzf/src/algo/algo.go	/^	charDelimiter$/;"	c	package:algo
charLetter	./vim/plugged/fzf/src/algo/algo.go	/^	charLetter$/;"	c	package:algo
charLower	./vim/plugged/fzf/src/algo/algo.go	/^	charLower$/;"	c	package:algo
charNonWord	./vim/plugged/fzf/src/algo/algo.go	/^	charNonWord$/;"	c	package:algo
charNumber	./vim/plugged/fzf/src/algo/algo.go	/^	charNumber$/;"	c	package:algo
charUpper	./vim/plugged/fzf/src/algo/algo.go	/^	charUpper$/;"	c	package:algo
charWhite	./vim/plugged/fzf/src/algo/algo.go	/^	charWhite charClass = iota$/;"	c	package:algo	typeref:type:charClass
checkAscii	./vim/plugged/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f	package:util	typeref:typename:(bool, int)
check_binary	./vim/plugged/fzf/install.ps1	/^function check_binary () {$/;"	f
check_if_vim_exist_before_runs	./install.sh	/^check_if_vim_exist_before_runs() {$/;"	f
chunkSize	./vim/plugged/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c	package:fzf	typeref:typename:int
chunks	./vim/plugged/fzf/src/chunklist.go	/^	chunks []*Chunk$/;"	m	struct:fzf.ChunkList	typeref:typename:[]*Chunk
chunks	./vim/plugged/fzf/src/matcher.go	/^	chunks   []*Chunk$/;"	m	struct:fzf.MatchRequest	typeref:typename:[]*Chunk
chunks	./vim/plugged/fzf/src/merger.go	/^	chunks   *[]*Chunk$/;"	m	struct:fzf.Merger	typeref:typename:*[]*Chunk
clean	./vim/plugged/fzf/Makefile	/^clean:$/;"	t
cleanExit	./vim/plugged/fzf/src/terminal.go	/^	cleanExit          bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
cleanse	./vim/plugged/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f	package:tui	typeref:typename:string
clearCode	./vim/plugged/fzf/src/terminal.go	/^const clearCode string = "\\x1b[2J"$/;"	c	package:fzf	typeref:typename:string
clearNumLinesCache	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) clearNumLinesCache() {$/;"	f	struct:fzf.Terminal
clearOnExit	./vim/plugged/fzf/src/tui/light.go	/^	clearOnExit   bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
clickFooterColumn	./vim/plugged/fzf/src/terminal.go	/^	clickFooterColumn  int$/;"	m	struct:fzf.Terminal	typeref:typename:int
clickFooterLine	./vim/plugged/fzf/src/terminal.go	/^	clickFooterLine    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
clickHeaderColumn	./vim/plugged/fzf/src/terminal.go	/^	clickHeaderColumn  int$/;"	m	struct:fzf.Terminal	typeref:typename:int
clickHeaderLine	./vim/plugged/fzf/src/terminal.go	/^	clickHeaderLine    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
clicks	./vim/plugged/fzf/src/tui/light.go	/^	clicks        [][2]int$/;"	m	struct:tui.LightRenderer	typeref:typename:[][2]int
clicks	./vim/plugged/fzf/src/tui/tui.go	/^	clicks       [][2]int$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:[][2]int
closePlatform	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
closePlatform	./vim/plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
cmd	./vim/plugged/fzf/src/terminal.go	/^	cmd       *exec.Cmd$/;"	m	struct:fzf.runningCmd	typeref:typename:*exec.Cmd
code	./vim/plugged/fzf/src/terminal.go	/^	code int$/;"	m	struct:fzf.quitSignal	typeref:typename:int
colBlack	./vim/plugged/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c	package:tui	typeref:type:Color
colBlue	./vim/plugged/fzf/src/tui/tui.go	/^	colBlue$/;"	c	package:tui
colCyan	./vim/plugged/fzf/src/tui/tui.go	/^	colCyan$/;"	c	package:tui
colDefault	./vim/plugged/fzf/src/tui/tui.go	/^	colDefault   Color = -1$/;"	c	package:tui	typeref:type:Color
colGreen	./vim/plugged/fzf/src/tui/tui.go	/^	colGreen$/;"	c	package:tui
colMagenta	./vim/plugged/fzf/src/tui/tui.go	/^	colMagenta$/;"	c	package:tui
colRed	./vim/plugged/fzf/src/tui/tui.go	/^	colRed$/;"	c	package:tui
colUndefined	./vim/plugged/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c	package:tui	typeref:type:Color
colWhite	./vim/plugged/fzf/src/tui/tui.go	/^	colWhite$/;"	c	package:tui
colYellow	./vim/plugged/fzf/src/tui/tui.go	/^	colYellow$/;"	c	package:tui
color	./vim/plugged/fzf/src/ansi.go	/^	color  ansiState$/;"	m	struct:fzf.ansiOffset	typeref:typename:ansiState
color	./vim/plugged/fzf/src/result.go	/^	color  tui.ColorPair$/;"	m	struct:fzf.colorOffset	typeref:typename:tui.ColorPair
color	./vim/plugged/fzf/src/tui/tcell.go	/^	color         bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
colorCodes	./vim/plugged/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f	package:tui	typeref:typename:[]string
colorOffset	./vim/plugged/fzf/src/result.go	/^type colorOffset struct {$/;"	s	package:fzf
colorOffsets	./vim/plugged/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, nthOffsets []Offset, theme *tui.ColorT/;"	f	struct:fzf.Result	typeref:typename:[]colorOffset
colored	./vim/plugged/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
colored	./vim/plugged/fzf/src/tui/light.go	/^	colored       bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
colors	./vim/plugged/fzf/src/item.go	/^	colors      *[]ansiOffset \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]ansiOffset
column	./vim/plugged/fzf/src/options.go	/^	column int$/;"	m	struct:fzf.labelOpts	typeref:typename:int
command	./vim/plugged/fzf/src/options.go	/^	command     string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
command	./vim/plugged/fzf/src/reader.go	/^	command  *string$/;"	m	struct:fzf.Reader	typeref:typename:*string
command	./vim/plugged/fzf/src/terminal.go	/^	command   string$/;"	m	struct:fzf.commandSpec	typeref:typename:string
command	./vim/plugged/fzf/src/terminal.go	/^	command  *commandSpec$/;"	m	struct:fzf.searchRequest	typeref:typename:*commandSpec
commandSpec	./vim/plugged/fzf/src/terminal.go	/^type commandSpec struct {$/;"	s	package:fzf
compare	./vim/plugged/fzf/src/options.go	/^func (o *previewOpts) compare(active *previewOpts, b *previewOpts) previewOptsCompare {$/;"	f	struct:fzf.previewOpts	typeref:typename:previewOptsCompare
compareRanges	./vim/plugged/fzf/src/tokenizer.go	/^func compareRanges(r1 []Range, r2 []Range) bool {$/;"	f	package:fzf	typeref:typename:bool
compareRanks	./vim/plugged/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compareRanks	./vim/plugged/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compatible	./vim/plugged/fzf/src/core.go	/^func (r revision) compatible(other revision) bool {$/;"	f	struct:fzf.revision	typeref:typename:bool
cond	./vim/plugged/fzf/src/util/eventbox.go	/^	cond   *sync.Cond$/;"	m	struct:util.EventBox	typeref:typename:*sync.Cond
consoleFlagsInput	./vim/plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsInput  = uint32(windows.ENABLE_VIRTUAL_TERMINAL_INPUT | windows.ENABLE_PROCESSED_IN/;"	v	package:tui
consoleFlagsOutput	./vim/plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsOutput = uint32(windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING | windows.ENABLE_PROCESS/;"	v	package:tui
constrain	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f	struct:fzf.Terminal
convertBoolToInt32	./vim/plugged/fzf/src/util/atomicbool.go	/^func convertBoolToInt32(b bool) int32 {$/;"	f	package:util	typeref:typename:int32
coordinatorDelayMax	./vim/plugged/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
coordinatorDelayStep	./vim/plugged/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
copySlice	./vim/plugged/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
count	./vim/plugged/fzf/src/chunklist.go	/^	count int$/;"	m	struct:fzf.Chunk	typeref:typename:int
count	./vim/plugged/fzf/src/merger.go	/^	count    int$/;"	m	struct:fzf.Merger	typeref:typename:int
count	./vim/plugged/fzf/src/terminal.go	/^	count              int$/;"	m	struct:fzf.Terminal	typeref:typename:int
counter	./vim/plugged/fzf/src/tui/light_windows.go	/^	counter            = uint64(0)$/;"	v	package:tui
counts	./vim/plugged/fzf/test/lib/common.rb	/^          def counts$/;"	f	method:Tmux.until
cprint2	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f	struct:tui.LightWindow
criterion	./vim/plugged/fzf/src/options.go	/^type criterion int$/;"	t	package:fzf	typeref:typename:int
crlf	./vim/plugged/fzf/src/server.go	/^	crlf             = "\\r\\n"$/;"	c	package:fzf
csi	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) string {$/;"	f	unknown:tui.LightRenderer	typeref:typename:string
csi	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) string {$/;"	f	struct:tui.LightWindow	typeref:typename:string
csiColor	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) (bool, string) {$/;"	f	struct:tui.LightWindow	typeref:typename:(bool, string)
current	./vim/plugged/fzf/src/history.go	/^func (h *History) current() string {$/;"	f	struct:fzf.History	typeref:typename:string
current	./vim/plugged/fzf/src/terminal.go	/^	current   bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
currentIndex	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) currentIndex() int32 {$/;"	f	struct:fzf.Terminal	typeref:typename:int32
currentItem	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f	struct:fzf.Terminal	typeref:typename:*Item
cursor	./vim/plugged/fzf/src/history.go	/^	cursor   int$/;"	m	struct:fzf.History	typeref:typename:int
cursors	./vim/plugged/fzf/src/merger.go	/^	cursors  []int$/;"	m	struct:fzf.Merger	typeref:typename:[]int
cx	./vim/plugged/fzf/src/terminal.go	/^	cx                 int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cy	./vim/plugged/fzf/src/terminal.go	/^	cy                 int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cy	./vim/plugged/fzf/src/terminal.go	/^	cy        int$/;"	m	struct:fzf.itemLine	typeref:typename:int
cycle	./vim/plugged/fzf/src/options.go	/^	cycle       bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
cycle	./vim/plugged/fzf/src/terminal.go	/^	cycle              bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
d	./vim/autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	./vim/autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
dd	./vim/autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
debugV2	./vim/plugged/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f	package:algo
defaultBorderShape	./vim/plugged/fzf/src/options.go	/^var defaultBorderShape tui.BorderShape = tui.DefaultBorderShape$/;"	v	package:fzf	typeref:typename:tui.BorderShape
defaultEscDelay	./vim/plugged/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c	package:tui
defaultHeight	./vim/plugged/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c	package:tui
defaultHistoryMax	./vim/plugged/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c	package:fzf	typeref:typename:int
defaultInfoPrefix	./vim/plugged/fzf/src/options.go	/^const defaultInfoPrefix = " < "$/;"	c	package:fzf
defaultJumpLabels	./vim/plugged/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,/;"	c	package:fzf	typeref:typename:string
defaultKeymap	./vim/plugged/fzf/src/terminal.go	/^func defaultKeymap() map[tui.Event][]*action {$/;"	f	package:fzf	typeref:typename:map[tui.Event][]*action
defaultListenAddr	./vim/plugged/fzf/src/server.go	/^var defaultListenAddr = listenAddress{"localhost", 0}$/;"	v	package:fzf
defaultMargin	./vim/plugged/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
defaultOptions	./vim/plugged/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
defaultPreviewOpts	./vim/plugged/fzf/src/options.go	/^func defaultPreviewOpts(command string) previewOpts {$/;"	f	package:fzf	typeref:typename:previewOpts
defaultTmuxOptions	./vim/plugged/fzf/src/options.go	/^func defaultTmuxOptions(index int) *tmuxOptions {$/;"	f	package:fzf	typeref:typename:*tmuxOptions
defaultWidth	./vim/plugged/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c	package:tui
deferActivation	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) deferActivation() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
delChar	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
delimNil	./vim/plugged/fzf/src/reader.go	/^	delimNil bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
delimiter	./vim/plugged/fzf/src/pattern.go	/^	delimiter     Delimiter$/;"	m	struct:fzf.Pattern	typeref:typename:Delimiter
delimiter	./vim/plugged/fzf/src/terminal.go	/^	delimiter          Delimiter$/;"	m	struct:fzf.Terminal	typeref:typename:Delimiter
delimiter	./vim/plugged/fzf/src/terminal.go	/^	delimiter  Delimiter$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:Delimiter
delimiterChars	./vim/plugged/fzf/src/algo/algo.go	/^var delimiterChars = "\/,:;|"$/;"	v	package:algo
delimiterRegexp	./vim/plugged/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f	package:fzf	typeref:typename:Delimiter
denylist	./vim/plugged/fzf/src/pattern.go	/^	denylist      map[int32]struct{}$/;"	m	struct:fzf.Pattern	typeref:typename:map[int32]struct{}
denylist	./vim/plugged/fzf/src/terminal.go	/^	denylist []int32$/;"	m	struct:fzf.searchRequest	typeref:typename:[]int32
deselectItem	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f	struct:fzf.Terminal
deselectItemChanged	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
determineHeaderLinesShape	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) determineHeaderLinesShape() (bool, tui.BorderShape) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, tui.BorderShape)
devPrefixes	./vim/plugged/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v	package:tui
dir	./vim/plugged/fzf/src/options.go	/^	dir    bool$/;"	m	struct:fzf.walkerOpts	typeref:typename:bool
disableModes	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) disableModes() {$/;"	f	struct:tui.LightRenderer
disableMouse	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) disableMouse() {$/;"	f	struct:tui.LightRenderer
disabledState	./vim/plugged/fzf/src/terminal.go	/^	disabledState resumableState = iota$/;"	c	package:fzf	typeref:type:resumableState
dispatchAsync	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) dispatchAsync() {$/;"	f	struct:fzf.Terminal
displayWidth	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
displayWidth	./vim/plugged/fzf/src/tui/light.go	/^	displayWidth int$/;"	m	struct:tui.wrappedLine	typeref:typename:int
displayWidthWithLimit	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
displayWidthWithPrefix	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithPrefix(str string, prefixWidth int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
docker	./vim/plugged/fzf/Makefile	/^docker:$/;"	t
docker-test	./vim/plugged/fzf/Makefile	/^docker-test:$/;"	t
doubleClickDuration	./vim/plugged/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c	package:tui
download	./vim/plugged/fzf/install.ps1	/^function download {$/;"	f
drawBorder	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder(onlyHorizontal bool) {$/;"	f	struct:tui.LightWindow
drawBorder	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder(onlyHorizontal bool) {$/;"	f	struct:tui.TcellWindow
drawBorderAround	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround(onlyHorizontal bool) {$/;"	f	struct:tui.LightWindow
drawBorderHorizontal	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal(top, bottom bool) {$/;"	f	struct:tui.LightWindow
drawBorderVertical	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderVertical(left, right bool) {$/;"	f	struct:tui.LightWindow
dumpItem	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) dumpItem(i *Item) StatusItem {$/;"	f	struct:fzf.Terminal	typeref:typename:StatusItem
dumpStatus	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) dumpStatus(params getParams) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
dupeTheme	./vim/plugged/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
eachLine	./vim/plugged/fzf/src/terminal.go	/^type eachLine struct {$/;"	s	package:fzf
ellipsis	./vim/plugged/fzf/src/terminal.go	/^	ellipsis           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
empty	./vim/plugged/fzf/src/terminal.go	/^	empty     bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
enableModes	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) enableModes() {$/;"	f	struct:tui.LightRenderer
enabledState	./vim/plugged/fzf/src/terminal.go	/^	enabledState$/;"	c	package:fzf
encodePlaceholder	./vim/plugged/fzf/src/terminal_test.go	/^func (flags placeholderFlags) encodePlaceholder() string {$/;"	f	unknown:fzf.placeholderFlags	typeref:typename:string
end	./vim/plugged/fzf/src/tokenizer.go	/^	end   int$/;"	m	struct:fzf.Range	typeref:typename:int
env	./vim/plugged/fzf/src/terminal.go	/^	env          []string$/;"	m	struct:fzf.previewRequest	typeref:typename:[]string
env_vars	./vim/plugged/fzf/test/test_core.rb	/^    def env_vars$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform.test_env_vars
environ	./vim/plugged/fzf/src/terminal.go	/^	environ  []string$/;"	m	struct:fzf.searchRequest	typeref:typename:[]string
environ	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) environ() []string {$/;"	f	struct:fzf.Terminal	typeref:typename:[]string
environForPreview	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) environForPreview() []string {$/;"	f	struct:fzf.Terminal	typeref:typename:[]string
environImpl	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) environImpl(forPreview bool) []string {$/;"	f	struct:fzf.Terminal	typeref:typename:[]string
equals	./vim/plugged/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
err	./vim/plugged/fzf/src/terminal.go	/^	err  error$/;"	m	struct:fzf.eachLine	typeref:typename:error
err	./vim/plugged/fzf/src/terminal.go	/^	err  error$/;"	m	struct:fzf.quitSignal	typeref:typename:error
escDelay	./vim/plugged/fzf/src/tui/light.go	/^	escDelay      int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
escPollInterval	./vim/plugged/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c	package:tui
escSequence	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
escapeArg	./vim/plugged/fzf/src/util/util_windows.go	/^func escapeArg(s string) string {$/;"	f	package:util	typeref:typename:string
escapeRegex	./vim/plugged/fzf/src/util/util_windows.go	/^var escapeRegex = regexp.MustCompile(`[&|<>()^%!"]`)$/;"	v	package:util
escapeSingleQuote	./vim/plugged/fzf/src/proxy.go	/^func escapeSingleQuote(str string) string {$/;"	f	package:fzf	typeref:typename:string
escapedColon	./vim/plugged/fzf/src/options.go	/^	escapedColon = 0$/;"	c	package:fzf
escapedComma	./vim/plugged/fzf/src/options.go	/^	escapedComma = 1$/;"	c	package:fzf
escapedPlus	./vim/plugged/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c	package:fzf
escaper	./vim/plugged/fzf/src/util/util_unix.go	/^	escaper *strings.Replacer$/;"	m	struct:util.Executor	typeref:typename:*strings.Replacer
evaluateHeight	./vim/plugged/fzf/src/terminal.go	/^func evaluateHeight(opts *Options, termHeight int) int {$/;"	f	package:fzf	typeref:typename:int
evaluateScrollOffset	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) evaluateScrollOffset() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
event	./vim/plugged/fzf/src/reader.go	/^	event    int32$/;"	m	struct:fzf.Reader	typeref:typename:int32
eventBox	./vim/plugged/fzf/src/matcher.go	/^	eventBox       *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
eventBox	./vim/plugged/fzf/src/reader.go	/^	eventBox *util.EventBox$/;"	m	struct:fzf.Reader	typeref:typename:*util.EventBox
eventBox	./vim/plugged/fzf/src/terminal.go	/^	eventBox           *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
eventChan	./vim/plugged/fzf/src/terminal.go	/^	eventChan          chan tui.Event$/;"	m	struct:fzf.Terminal	typeref:typename:chan tui.Event
events	./vim/plugged/fzf/src/util/eventbox.go	/^	events Events$/;"	m	struct:util.EventBox	typeref:typename:Events
exactMatchNaive	./vim/plugged/fzf/src/algo/algo.go	/^func exactMatchNaive(caseSensitive bool, normalize bool, forward bool, boundaryCheck bool, text /;"	f	package:algo	typeref:typename:(Result, *[]int)
executeCommand	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool, capture bool/;"	f	struct:fzf.Terminal	typeref:typename:string
executeRegexp	./vim/plugged/fzf/src/options.go	/^	executeRegexp    *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
executing	./vim/plugged/fzf/src/terminal.go	/^	executing          *util.AtomicBool$/;"	m	struct:fzf.Terminal	typeref:typename:*util.AtomicBool
executor	./vim/plugged/fzf/src/reader.go	/^	executor *util.Executor$/;"	m	struct:fzf.Reader	typeref:typename:*util.Executor
executor	./vim/plugged/fzf/src/terminal.go	/^	executor           *util.Executor$/;"	m	struct:fzf.Terminal	typeref:typename:*util.Executor
executor	./vim/plugged/fzf/src/terminal.go	/^	executor   *util.Executor$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:*util.Executor
exit	./vim/plugged/fzf/main.go	/^func exit(code int, err error) {$/;"	f	package:main
expect	./vim/plugged/fzf/src/terminal.go	/^	expect             map[tui.Event]string$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event]string
extended	./vim/plugged/fzf/src/pattern.go	/^	extended      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
extendedMatch	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:([]Offset, int, *[]int)
extraLines	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) extraLines() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
extractColor	./vim/plugged/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]/;"	f	package:fzf	typeref:typename:(string, *[]ansiOffset, *ansiState)
extractPassThroughs	./vim/plugged/fzf/src/terminal.go	/^func extractPassThroughs(line string) ([]string, string) {$/;"	f	package:fzf	typeref:typename:([]string, string)
extractReloadOnStart	./vim/plugged/fzf/src/options.go	/^func (opts *Options) extractReloadOnStart() string {$/;"	f	struct:fzf.Options	typeref:typename:string
failed	./vim/plugged/fzf/src/terminal.go	/^	failed             *string$/;"	m	struct:fzf.Terminal	typeref:typename:*string
fd	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) fd() int {$/;"	f	unknown:tui.LightRenderer	typeref:typename:int
feed	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f	struct:fzf.Reader
fg	./vim/plugged/fzf/src/ansi.go	/^	fg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
fg	./vim/plugged/fzf/src/tui/light.go	/^	fg            Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
fg	./vim/plugged/fzf/src/tui/tui.go	/^	fg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
fifo	./vim/plugged/fzf/src/proxy.go	/^func fifo(name string) (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
file	./vim/plugged/fzf/src/options.go	/^	file   bool$/;"	m	struct:fzf.walkerOpts	typeref:typename:bool
file	./vim/plugged/fzf/src/terminal.go	/^	file          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
filetypedetect	./vim/autoload/plug.vim	/^        augroup filetypedetect$/;"	a
fill	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, resetCode string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
fill	./vim/plugged/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, n ColorPair, r rune) {$/;"	f	package:tui
fillString	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
filled	./vim/plugged/fzf/src/terminal.go	/^	filled    bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
filterNonEmpty	./vim/plugged/fzf/src/options.go	/^func filterNonEmpty(input []string) []string {$/;"	f	package:fzf	typeref:typename:[]string
fin	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f	struct:fzf.Reader
finChan	./vim/plugged/fzf/src/reader.go	/^	finChan  chan bool$/;"	m	struct:fzf.Reader	typeref:typename:chan bool
final	./vim/plugged/fzf/src/matcher.go	/^	final    bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
final	./vim/plugged/fzf/src/merger.go	/^	final    bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
final	./vim/plugged/fzf/src/terminal.go	/^	final      bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
findFirstMatch	./vim/plugged/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findLastMatch	./vim/plugged/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findOffset	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
findOffset	./vim/plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
findPassThrough	./vim/plugged/fzf/src/terminal.go	/^func findPassThrough(line string) []int {$/;"	f	package:fzf	typeref:typename:[]int
firstKey	./vim/plugged/fzf/src/options.go	/^func firstKey(keymap map[tui.Event]string) tui.Event {$/;"	f	package:fzf	typeref:typename:tui.Event
firstLine	./vim/plugged/fzf/src/options.go	/^func firstLine(s string) string {$/;"	f	package:fzf	typeref:typename:string
firstLine	./vim/plugged/fzf/src/terminal.go	/^	firstLine int$/;"	m	struct:fzf.itemLine	typeref:typename:int
fish	./vim/plugged/fzf/test/lib/common.rb	/^    def fish$/;"	S	class:Shell
fishKeyBindings	./vim/plugged/fzf/main.go	/^var fishKeyBindings []byte$/;"	v	package:main	typeref:typename:[]byte
fit	./vim/plugged/fzf/src/terminal.go	/^	fit int$/;"	m	struct:fzf.fitpad	typeref:typename:int
fitpad	./vim/plugged/fzf/src/terminal.go	/^type fitpad struct {$/;"	s	package:fzf
flush	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) flush() {$/;"	f	struct:fzf.Terminal
flush	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f	unknown:tui.LightRenderer
flushRaw	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) flushRaw(sequence string) {$/;"	f	unknown:tui.LightRenderer
focus	./vim/plugged/fzf/test/lib/common.rb	/^  def focus$/;"	f	class:Tmux
follow	./vim/plugged/fzf/src/options.go	/^	follow      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
follow	./vim/plugged/fzf/src/options.go	/^	follow bool$/;"	m	struct:fzf.walkerOpts	typeref:typename:bool
following	./vim/plugged/fzf/src/terminal.go	/^	following  resumableState$/;"	m	struct:fzf.previewer	typeref:typename:resumableState
footer	./vim/plugged/fzf/src/terminal.go	/^	footer             []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
footerBorder	./vim/plugged/fzf/src/terminal.go	/^	footerBorder       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
footerBorderShape	./vim/plugged/fzf/src/terminal.go	/^	footerBorderShape  tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
footerLabel	./vim/plugged/fzf/src/terminal.go	/^	footerLabel        labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
footerLabelLen	./vim/plugged/fzf/src/terminal.go	/^	footerLabelLen     int$/;"	m	struct:fzf.Terminal	typeref:typename:int
footerLabelOpts	./vim/plugged/fzf/src/terminal.go	/^	footerLabelOpts    labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
footerWindow	./vim/plugged/fzf/src/terminal.go	/^	footerWindow       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
forceBlack	./vim/plugged/fzf/src/tui/light.go	/^	forceBlack    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
forceBlack	./vim/plugged/fzf/src/tui/tui.go	/^	forceBlack   bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
forcePlus	./vim/plugged/fzf/src/terminal.go	/^	forcePlus  bool$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:bool
forcePreview	./vim/plugged/fzf/src/terminal.go	/^	forcePreview       bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
forceRerenderList	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) forceRerenderList() {$/;"	f	struct:fzf.Terminal
forceUpdate	./vim/plugged/fzf/src/terminal.go	/^	forceUpdate   bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
forward	./vim/plugged/fzf/src/pattern.go	/^	forward       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fullRedraw	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) fullRedraw() {$/;"	f	struct:fzf.Terminal
fullscreen	./vim/plugged/fzf/src/terminal.go	/^	fullscreen         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
fullscreen	./vim/plugged/fzf/src/tui/light.go	/^	fullscreen    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
fuzzy	./vim/plugged/fzf/src/pattern.go	/^	fuzzy         bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fuzzyAlgo	./vim/plugged/fzf/src/pattern.go	/^	fuzzyAlgo     algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:algo.Algo
fzf	./vim/plugged/fzf/main.go	/^	fzf "github.com\/junegunn\/fzf\/src"$/;"	P	package:github.com/junegunn/fzf/src
fzf	./vim/plugged/fzf/man/man1/fzf.1	/^.TH fzf 1 "Aug 2025" "fzf 0.65.1" "fzf - a command-line fuzzy finder"$/;"	t
fzf	./vim/plugged/fzf/src/actiontype_string.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/cache.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/constants.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/core.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/functions.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/history.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/item.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/merger.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/options.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/options_no_pprof.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/options_pprof.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/options_pprof_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/proxy.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/proxy_unix.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/proxy_windows.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/reader.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/result.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/server.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/tmux.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/winpty.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/src/winpty_windows.go	/^package fzf$/;"	p
fzf	./vim/plugged/fzf/test/lib/common.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf :heart: vim	./vim/plugged/fzf.vim/README.md	/^fzf :heart: vim$/;"	c
fzf Theme Playground	./vim/plugged/fzf/README.md	/^### fzf Theme Playground$/;"	S	section:Tips
fzf inside terminal buffer	./vim/plugged/fzf/README-VIM.md	/^### fzf inside terminal buffer$/;"	S	section:FZF Vim integration""Tips
fzf!	./vim/plugged/fzf/test/lib/common.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#complete	./vim/plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#exec	./vim/plugged/fzf/plugin/fzf.vim	/^function! fzf#exec(...)$/;"	f
fzf#install	./vim/plugged/fzf/plugin/fzf.vim	/^function! fzf#install()$/;"	f
fzf#run	./vim/plugged/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	./vim/plugged/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_buflisted_sorted	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_buflisted_sorted()$/;"	f
fzf#vim#_format_buffer	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_format_buffer(b)$/;"	f
fzf#vim#_lines	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_recent_files	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_recent_files()$/;"	f
fzf#vim#_uniq	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...) range$/;"	f
fzf#vim#buffer_lines	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#changes	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#changes(...)$/;"	f
fzf#vim#colors	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...) range$/;"	f
fzf#vim#complete	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, ...)$/;"	f
fzf#vim#grep2	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep2(command_prefix, query, ...)$/;"	f
fzf#vim#helptags	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#ipc#restart	./vim/plugged/fzf.vim/autoload/fzf/vim/ipc.vim	/^function! fzf#vim#ipc#restart()$/;"	f
fzf#vim#ipc#start	./vim/plugged/fzf.vim/autoload/fzf/vim/ipc.vim	/^function! fzf#vim#ipc#start(Callback)$/;"	f
fzf#vim#ipc#stop	./vim/plugged/fzf.vim/autoload/fzf/vim/ipc.vim	/^function! fzf#vim#ipc#stop()$/;"	f
fzf#vim#jumps	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#jumps(...)$/;"	f
fzf#vim#lines	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#listproc#location	./vim/plugged/fzf.vim/autoload/fzf/vim/listproc.vim	/^function! fzf#vim#listproc#location(list)$/;"	f
fzf#vim#listproc#quickfix	./vim/plugged/fzf.vim/autoload/fzf/vim/listproc.vim	/^function! fzf#vim#listproc#quickfix(list)$/;"	f
fzf#vim#locate	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...) abort$/;"	f
fzf#vim#search_history	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	./vim/plugged/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf-cd-widget	./vim/plugged/fzf/shell/key-bindings.zsh	/^fzf-cd-widget() {$/;"	f
fzf-completion	./vim/plugged/fzf/shell/completion.zsh	/^fzf-completion() {$/;"	f
fzf-file-widget	./vim/plugged/fzf/shell/key-bindings.bash	/^fzf-file-widget() {$/;"	f
fzf-file-widget	./vim/plugged/fzf/shell/key-bindings.zsh	/^fzf-file-widget() {$/;"	f
fzf-history-widget	./vim/plugged/fzf/shell/key-bindings.zsh	/^fzf-history-widget() {$/;"	f
fzf.on_exit	./vim/plugged/fzf/plugin/fzf.vim	/^      function! fzf.on_exit(job_id, exit_status, event) dict$/;"	f
fzf.on_exit	./vim/plugged/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf.switch_back	./vim/plugged/fzf/plugin/fzf.vim	/^  function! fzf.switch_back(inplace)$/;"	f
fzf\\-tmux	./vim/plugged/fzf/man/man1/fzf-tmux.1	/^.TH fzf\\-tmux 1 "Aug 2025" "fzf 0.65.1" "fzf\\-tmux - open fzf in tmux split pane"$/;"	t
fzf_base	./vim/plugged/fzf/install.ps1	/^$fzf_base=Split-Path -Parent $MyInvocation.MyCommand.Definition$/;"	v
fzf_buffers	./vim/plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_output	./vim/plugged/fzf/test/lib/common.rb	/^  def fzf_output$/;"	f	class:TestBase
fzf_output_lines	./vim/plugged/fzf/test/lib/common.rb	/^  def fzf_output_lines$/;"	f	class:TestBase
fzf_popd	./vim/plugged/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_swap	./vim/plugged/fzf/plugin/fzf.vim	/^    augroup fzf_swap$/;"	a
g:CtrlSpaceStatuslineFunction	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^  let g:CtrlSpaceStatuslineFunction = "airline#extensions#ctrlspace#statusline()"$/;"	v
g:NERDTree	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoCenter	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenter            = get(g:, 'NERDTreeAutoCenter',            1)$/;"	v
g:NERDTreeAutoCenterThreshold	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenterThreshold   = get(g:, 'NERDTreeAutoCenterThreshold',   3)$/;"	v
g:NERDTreeAutoDeleteBuffer	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarks	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeBookmarks = []$/;"	v
g:NERDTreeBookmarksFile	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksFile         = get(g:, 'NERDTreeBookmarksFile',         expand('$HOME') ./;"	v
g:NERDTreeBookmarksSort	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksSort         = get(g:, 'NERDTreeBookmarksSort',         1)$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = get(g:, 'NERDTreeCascadeOpenSingleChildDir', 1)$/;"	v
g:NERDTreeCascadeSingleChildDir	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeSingleChildDir     = get(g:, 'NERDTreeCascadeSingleChildDir',     1)$/;"	v
g:NERDTreeCaseSensitiveFS	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveFS       = get(g:, 'NERDTreeCaseSensitiveFS',       2)$/;"	v
g:NERDTreeCaseSensitiveSort	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveSort     = get(g:, 'NERDTreeCaseSensitiveSort',     0)$/;"	v
g:NERDTreeChDirMode	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeChDirMode             = get(g:, 'NERDTreeChDirMode',             0)$/;"	v
g:NERDTreeCopyCmd	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyCmd      = get(g:, 'NERDTreeCopyCmd',      'cp -r ')$/;"	v
g:NERDTreeCopyDirCmd	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyDirCmd   = get(g:, 'NERDTreeCopyDirCmd',   'xcopy \/s \/e \/i \/y \/q ')$/;"	v
g:NERDTreeCopyFileCmd	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyFileCmd  = get(g:, 'NERDTreeCopyFileCmd',  'copy \/y ')$/;"	v
g:NERDTreeCreatePrefix	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCreatePrefix          = get(g:, 'NERDTreeCreatePrefix',          'silent')$/;"	v
g:NERDTreeCreator	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeCustomOpenArgs	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = get(g:, 'NERDTreeCustomOpenArgs', {})$/;"	v
g:NERDTreeCustomOpenArgs	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = l:defaultOpenArgs$/;"	v
g:NERDTreeDirArrowCollapsible	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '~')$/;"	v
g:NERDTreeDirArrowCollapsible	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '▾')$/;"	v
g:NERDTreeDirArrowExpandable	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '+')$/;"	v
g:NERDTreeDirArrowExpandable	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '▸')$/;"	v
g:NERDTreeDirNode	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	./vim/plugged/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileLines	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeFileLines             = get(g:, 'NERDTreeFileLines',             0)$/;"	v
g:NERDTreeFileNode	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	./vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeGlyphReadOnly	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeGlyphReadOnly = get(g:, 'NERDTreeGlyphReadOnly', 'RO')$/;"	v
g:NERDTreeHighlightCursorline	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHighlightCursorline   = get(g:, 'NERDTreeHighlightCursorline',   1)$/;"	v
g:NERDTreeHijackNetrw	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHijackNetrw           = get(g:, 'NERDTreeHijackNetrw',           1)$/;"	v
g:NERDTreeIgnore	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeIgnore                = get(g:, 'NERDTreeIgnore',                ['\\~$'])$/;"	v
g:NERDTreeInvalidBookmarks	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeInvalidBookmarks = []$/;"	v
g:NERDTreeKeyMap	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapActivateNode	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapActivateNode    = get(g:, 'NERDTreeMapActivateNode',    'o')$/;"	v
g:NERDTreeMapCWD	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCWD             = get(g:, 'NERDTreeMapCWD',             'CD')$/;"	v
g:NERDTreeMapChangeRoot	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChangeRoot      = get(g:, 'NERDTreeMapChangeRoot',      'C')$/;"	v
g:NERDTreeMapChdir	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChdir           = get(g:, 'NERDTreeMapChdir',           'cd')$/;"	v
g:NERDTreeMapCloseChildren	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseChildren   = get(g:, 'NERDTreeMapCloseChildren',   'X')$/;"	v
g:NERDTreeMapCloseDir	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseDir        = get(g:, 'NERDTreeMapCloseDir',        'x')$/;"	v
g:NERDTreeMapCustomOpen	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      '<CR>')$/;"	v
g:NERDTreeMapDeleteBookmark	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapDeleteBookmark  = get(g:, 'NERDTreeMapDeleteBookmark',  'D')$/;"	v
g:NERDTreeMapHelp	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapHelp            = get(g:, 'NERDTreeMapHelp',            '?')$/;"	v
g:NERDTreeMapJumpBookmarks	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpBookmarks   = get(g:, 'NERDTreeMapJumpBookmarks',   'gb')$/;"	v
g:NERDTreeMapJumpFirstChild	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpFirstChild  = get(g:, 'NERDTreeMapJumpFirstChild',  'K')$/;"	v
g:NERDTreeMapJumpLastChild	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpLastChild   = get(g:, 'NERDTreeMapJumpLastChild',   'J')$/;"	v
g:NERDTreeMapJumpNextSibling	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpNextSibling = get(g:, 'NERDTreeMapJumpNextSibling', '<C-j>')$/;"	v
g:NERDTreeMapJumpParent	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpParent      = get(g:, 'NERDTreeMapJumpParent',      'p')$/;"	v
g:NERDTreeMapJumpPrevSibling	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpPrevSibling = get(g:, 'NERDTreeMapJumpPrevSibling', '<C-k>')$/;"	v
g:NERDTreeMapJumpRoot	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpRoot        = get(g:, 'NERDTreeMapJumpRoot',        'P')$/;"	v
g:NERDTreeMapMenu	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapMenu            = get(g:, 'NERDTreeMapMenu',            'm')$/;"	v
g:NERDTreeMapOpenExpl	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenExpl        = get(g:, 'NERDTreeMapOpenExpl',        'e')$/;"	v
g:NERDTreeMapOpenInTab	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTab       = get(g:, 'NERDTreeMapOpenInTab',       't')$/;"	v
g:NERDTreeMapOpenInTabSilent	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTabSilent = get(g:, 'NERDTreeMapOpenInTabSilent', 'T')$/;"	v
g:NERDTreeMapOpenRecursively	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenRecursively = get(g:, 'NERDTreeMapOpenRecursively', 'O')$/;"	v
g:NERDTreeMapOpenSplit	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenSplit       = get(g:, 'NERDTreeMapOpenSplit',       'i')$/;"	v
g:NERDTreeMapOpenVSplit	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenVSplit      = get(g:, 'NERDTreeMapOpenVSplit',      's')$/;"	v
g:NERDTreeMapPreview	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreview         = get(g:, 'NERDTreeMapPreview',         'g'.NERDTreeMapActivate/;"	v
g:NERDTreeMapPreviewSplit	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewSplit    = get(g:, 'NERDTreeMapPreviewSplit',    'g'.NERDTreeMapOpenSpli/;"	v
g:NERDTreeMapPreviewVSplit	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewVSplit   = get(g:, 'NERDTreeMapPreviewVSplit',   'g'.NERDTreeMapOpenVSpl/;"	v
g:NERDTreeMapQuit	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapQuit            = get(g:, 'NERDTreeMapQuit',            'q')$/;"	v
g:NERDTreeMapRefresh	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefresh         = get(g:, 'NERDTreeMapRefresh',         'r')$/;"	v
g:NERDTreeMapRefreshRoot	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefreshRoot     = get(g:, 'NERDTreeMapRefreshRoot',     'R')$/;"	v
g:NERDTreeMapToggleBookmarks	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleBookmarks = get(g:, 'NERDTreeMapToggleBookmarks', 'B')$/;"	v
g:NERDTreeMapToggleFileLines	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFileLines = get(g:, 'NERDTreeMapToggleFileLines', 'FL')$/;"	v
g:NERDTreeMapToggleFiles	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFiles     = get(g:, 'NERDTreeMapToggleFiles',     'F')$/;"	v
g:NERDTreeMapToggleFilters	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFilters   = get(g:, 'NERDTreeMapToggleFilters',   'f')$/;"	v
g:NERDTreeMapToggleHidden	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleHidden    = get(g:, 'NERDTreeMapToggleHidden',    'I')$/;"	v
g:NERDTreeMapToggleZoom	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleZoom      = get(g:, 'NERDTreeMapToggleZoom',      'A')$/;"	v
g:NERDTreeMapUpdir	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdir           = get(g:, 'NERDTreeMapUpdir',           'u')$/;"	v
g:NERDTreeMapUpdirKeepOpen	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdirKeepOpen   = get(g:, 'NERDTreeMapUpdirKeepOpen',   'U')$/;"	v
g:NERDTreeMarkBookmarks	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMarkBookmarks         = get(g:, 'NERDTreeMarkBookmarks',         1)$/;"	v
g:NERDTreeMenuController	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuDown	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuDown           = get(g:, 'NERDTreeMenuDown',           'j')$/;"	v
g:NERDTreeMenuItem	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeMenuUp	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuUp             = get(g:, 'NERDTreeMenuUp',             'k')$/;"	v
g:NERDTreeMinimalMenu	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalMenu           = get(g:, 'NERDTreeMinimalMenu',           0)$/;"	v
g:NERDTreeMinimalUI	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalUI             = get(g:, 'NERDTreeMinimalUI',             0)$/;"	v
g:NERDTreeMouseMode	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMouseMode             = get(g:, 'NERDTreeMouseMode',             1)$/;"	v
g:NERDTreeNaturalSort	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNaturalSort           = get(g:, 'NERDTreeNaturalSort',           0)$/;"	v
g:NERDTreeNodeDelimiter	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00a0")$/;"	v
g:NERDTreeNodeDelimiter	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00b7")$/;"	v
g:NERDTreeNodeDelimiter	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\x07")$/;"	v
g:NERDTreeNotificationThreshold	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNotificationThreshold = get(g:, 'NERDTreeNotificationThreshold', 100)$/;"	v
g:NERDTreeOldSortOrder	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^    let g:NERDTreeOldSortOrder = g:NERDTreeSortOrder$/;"	v
g:NERDTreeOldSortOrder	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^                let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^        let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	./vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeQuitOnOpen	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeQuitOnOpen            = get(g:, 'NERDTreeQuitOnOpen',            0)$/;"	v
g:NERDTreeRemoveDirCmd	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rm -rf ')$/;"	v
g:NERDTreeRemoveDirCmd	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rmdir \/s \/q ')$/;"	v
g:NERDTreeRespectWildIgnore	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeRespectWildIgnore     = get(g:, 'NERDTreeRespectWildIgnore',     0)$/;"	v
g:NERDTreeShowBookmarks	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowBookmarks         = get(g:, 'NERDTreeShowBookmarks',         0)$/;"	v
g:NERDTreeShowFiles	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowFiles             = get(g:, 'NERDTreeShowFiles',             1)$/;"	v
g:NERDTreeShowHidden	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowHidden            = get(g:, 'NERDTreeShowHidden',            0)$/;"	v
g:NERDTreeShowLineNumbers	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowLineNumbers       = get(g:, 'NERDTreeShowLineNumbers',       0)$/;"	v
g:NERDTreeSortDirs	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortDirs              = get(g:, 'NERDTreeSortDirs',              1)$/;"	v
g:NERDTreeSortHiddenFirst	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortHiddenFirst       = get(g:, 'NERDTreeSortHiddenFirst',       1)$/;"	v
g:NERDTreeSortOrder	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortOrder    = get(g:, 'NERDTreeSortOrder', ['\\\/$', '*', '\\.swp$', '\\.bak$', '/;"	v
g:NERDTreeStatusline	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeStatusline = get(g:, 'NERDTreeStatusline', "%{exists('b:NERDTree')?b:NERDTree.root/;"	v
g:NERDTreeUI	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeUseTCD	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeUseTCD                = get(g:, 'NERDTreeUseTCD',                0)$/;"	v
g:NERDTreeWinPos	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinPos  = get(g:, 'NERDTreeWinPos', 'left')$/;"	v
g:NERDTreeWinSize	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinSize = get(g:, 'NERDTreeWinSize', 31)$/;"	v
g:__fzf_command	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let g:__fzf_command = "normal ".prefix.item."\\<cr>"$/;"	v
g:_plug_bang	./vim/autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:airline#extensions#example#number_of_cats	./vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^  let g:airline#extensions#example#number_of_cats = 42$/;"	v
g:airline#extensions#localsearch#inverted	./vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#inverted = get(g:, 'airline#extensions#localsearch#inverted/;"	v
g:airline#extensions#localsearch#loaded	./vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#loaded = 001$/;"	v
g:airline#extensions#obsession#indicator_text	./vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^  let g:airline#extensions#obsession#indicator_text = '$'$/;"	v
g:airline#extensions#obsession#indicator_text_paused	./vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^  let g:airline#extensions#obsession#indicator_text_paused = '' " vim-obsession defaults to 'S'$/;"	v
g:airline#extensions#quickfix#location_text	./vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#location_text = 'Location'$/;"	v
g:airline#extensions#quickfix#quickfix_text	./vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'$/;"	v
g:airline#extensions#rufo#symbol	./vim/plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^  let g:airline#extensions#rufo#symbol = 'RuFo'$/;"	v
g:airline#extensions#tabline#enabled	./.vimrc	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#exclude_buffers	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:airline#extensions#tabline#exclude_buffers = []$/;"	v
g:airline#extensions#tabline#exclude_buffers	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:airline#extensions#tabline#exclude_buffers = []$/;"	v
g:airline#extensions#tabline#show_tabs	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:airline#extensions#tabline#show_tabs = 0$/;"	v
g:airline#extensions#tabline#show_tabs	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:airline#extensions#tabline#show_tabs = 1$/;"	v
g:airline#extensions#whitespace#enabled	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^    let g:airline#extensions#whitespace#enabled = s:enabled$/;"	v
g:airline#extensions#windowswap#indicator_text	./vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^  let g:airline#extensions#windowswap#indicator_text = 'WS'$/;"	v
g:airline#extensions#wordcount#filetypes	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^  let g:airline#extensions#wordcount#filetypes = filetypes$/;"	v
g:airline#highlighter#normal_fg_hi	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^      let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cter/;"	v
g:airline#init#bootstrapping	./vim/plugged/vim-airline/autoload/airline/init.vim	/^  let g:airline#init#bootstrapping = 1$/;"	v
g:airline#init#is_windows	./vim/plugged/vim-airline/autoload/airline/init.vim	/^  let g:airline#init#is_windows = has('win32') || has('win64')$/;"	v
g:airline#init#vim_async	./vim/plugged/vim-airline/autoload/airline/init.vim	/^  let g:airline#init#vim_async = (v:version >= 800 && has('job'))$/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^  let g:airline#themes#dark#palette.ctrlp = airline#extensions#ctrlp#generate_color_map($/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette = {}$/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.accents = {$/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.commandline = airline#themes#generate_color_map(s:airline_a_co/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive = airline#themes#generate_color_map(s:airline_a_inact/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive_modified = {$/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert = airline#themes#generate_color_map(s:airline_a_insert,/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_modified = {$/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_paste = {$/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal = airline#themes#generate_color_map(s:airline_a_normal,/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal_modified = {$/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace = copy(g:airline#themes#dark#palette.insert)$/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace.airline_a = [ s:airline_b_insert[0]   , '#af0000' , s:/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace_modified = g:airline#themes#dark#palette.insert_modifi/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.terminal = airline#themes#generate_color_map(s:airline_a_inser/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual = airline#themes#generate_color_map(s:airline_a_visual,/;"	v
g:airline#themes#dark#palette	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual_modified = {$/;"	v
g:airline#visual_active	./vim/plugged/vim-airline/autoload/airline.vim	/^  let g:airline#visual_active = (mode() =~? '[vs]')$/;"	v
g:airline_inactive_funcrefs	./vim/plugged/vim-airline/autoload/airline.vim	/^let g:airline_inactive_funcrefs = get(g:, 'airline_inactive_statusline_funcrefs', [])$/;"	v
g:airline_last_window_changed	./vim/plugged/vim-airline/plugin/airline.vim	/^  let g:airline_last_window_changed = l:key$/;"	v
g:airline_powerline_fonts	./.vimrc	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_section_a	./vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_a = airline#section#create_left(['mode', 'crypt', 'paste', 'keymap', '/;"	v
g:airline_section_b	./vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_b = airline#section#create(['hunks', 'branch', 'battery'])$/;"	v
g:airline_section_b	./vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_b = airline#section#create(['hunks', 'branch'])$/;"	v
g:airline_section_c	./vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_c = airline#section#create(['%<', 'file', spc, 'readonly', 'coc_stat/;"	v
g:airline_section_c	./vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_c = airline#section#create(['%<', 'path', spc, 'readonly', 'coc_stat/;"	v
g:airline_section_error	./vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_error = airline#section#create(['ycm_error_count', 'syntastic-err', 'e/;"	v
g:airline_section_gutter	./vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_gutter = airline#section#create(['%='])$/;"	v
g:airline_section_warning	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^      let g:airline_section_warning .= airline#section#create(['whitespace'])$/;"	v
g:airline_section_warning	./vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_warning = airline#section#create(['ycm_warning_count',  'syntastic-war/;"	v
g:airline_section_x	./vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_x = airline#section#create_right(['coc_current_function', 'bookmark', /;"	v
g:airline_section_y	./vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_y = airline#section#create_right(['ffenc'])$/;"	v
g:airline_section_z	./vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_z = airline#section#create(['%p%%', 'linenr', 'colnr'])$/;"	v
g:airline_section_z	./vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_z = airline#section#create(['windowswap', 'obsession', '%p%%', 'line/;"	v
g:airline_statusline_funcrefs	./vim/plugged/vim-airline/autoload/airline.vim	/^let g:airline_statusline_funcrefs = get(g:, 'airline_statusline_funcrefs', [])$/;"	v
g:airline_theme	./vim/plugged/vim-airline/autoload/airline.vim	/^      let g:airline_theme = 'dark'$/;"	v
g:airline_theme	./vim/plugged/vim-airline/autoload/airline.vim	/^      let g:airline_theme = a:name$/;"	v
g:airline_theme	./vim/plugged/vim-airline/autoload/airline.vim	/^  let g:airline_theme = get(g:, 'airline_theme', 'dark')$/;"	v
g:airline_theme	./vim/plugged/vim-airline/plugin/airline.vim	/^        let g:airline_theme=s:random_theme()$/;"	v
g:airline_theme	./vim/plugged/vim-airline/plugin/airline.vim	/^      let g:airline_theme = 'dark'$/;"	v
g:airline_theme	./vim/plugged/vim-airline/plugin/airline.vim	/^    let g:airline_theme = 'dark'$/;"	v
g:battery#update_statusline	./vim/plugged/vim-airline/autoload/airline/extensions/battery.vim	/^    let g:battery#update_statusline = 1$/;"	v
g:bufferline_active_buffer_left	./vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_buffer_left = ''$/;"	v
g:bufferline_active_buffer_right	./vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_buffer_right = ''$/;"	v
g:bufferline_active_highlight	./vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_highlight = 'bufferline_selected'$/;"	v
g:bufferline_inactive_highlight	./vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_inactive_highlight = 'airline_c'$/;"	v
g:bufferline_separator	./vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_separator = g:airline_symbols.space$/;"	v
g:ctrlp_status_func	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^  let g:ctrlp_status_func = {$/;"	v
g:cursormode_exit_mode	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^  let g:cursormode_exit_mode='n'$/;"	v
g:fern_force_overwrite_statusline	./vim/plugged/vim-airline/autoload/airline/extensions/fern.vim	/^  let g:fern_force_overwrite_statusline = 0$/;"	v
g:fzf#vim#buffers	./vim/plugged/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:fzf_action	./.vimrc	/^let g:fzf_action = {$/;"	v
g:fzf_binary_path	./.vimrc	/^let g:fzf_binary_path = s:vim_bin_path . '\/fzf'$/;"	v
g:fzf_command_prefix	./.vimrc	/^let g:fzf_command_prefix = ''$/;"	v
g:fzf_completion	./.vimrc	/^let g:fzf_completion = {$/;"	v
g:fzf_ipc	./vim/plugged/fzf.vim/autoload/fzf/vim/ipc.vim	/^    let g:fzf_ipc.job = job_start($/;"	v
g:fzf_ipc	./vim/plugged/fzf.vim/autoload/fzf/vim/ipc.vim	/^    let g:fzf_ipc.job = jobstart($/;"	v
g:fzf_ipc	./vim/plugged/fzf.vim/autoload/fzf/vim/ipc.vim	/^  let g:fzf_ipc = { 'fifo': tempname(), 'callback': a:Callback }$/;"	v
g:fzf_layout	./.vimrc	/^let g:fzf_layout = { 'down': '~40%' }$/;"	v
g:fzf_preview_window	./.vimrc	/^let g:fzf_preview_window = ['right:50%:hidden', 'ctrl-\/']$/;"	v
g:gina#component#repo#commit_length	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^    let g:gina#component#repo#commit_length = s:sha1size$/;"	v
g:gina_force_overwrite_statusline	./vim/plugged/vim-airline/autoload/airline/extensions/gina.vim	/^  let g:gina_force_overwrite_statusline = 0$/;"	v
g:loaded_airline	./vim/plugged/vim-airline/plugin/airline.vim	/^let g:loaded_airline = 1$/;"	v
g:loaded_cursormode	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let g:loaded_cursormode = 1$/;"	v
g:loaded_fzf	./vim/plugged/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_fzf_vim	./vim/plugged/fzf.vim/plugin/fzf.vim	/^let g:loaded_fzf_vim = 1$/;"	v
g:loaded_nerdtree_autoload	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	./vim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_netrw	./.vimrc	/^let g:loaded_netrw = 1$/;"	v
g:loaded_netrwPlugin	./.vimrc	/^let g:loaded_netrwPlugin = 1$/;"	v
g:loaded_plug	./vim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_vim_airline_zoomwintab	./vim/plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^let g:loaded_vim_airline_zoomwintab = 1$/;"	v
g:loaded_xtabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:loaded_xtabline = 1$/;"	v
g:netrw_force_overwrite_statusline	./vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^  let g:netrw_force_overwrite_statusline = 0$/;"	v
g:obsession_append	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:obsession_append = [string]$/;"	v
g:plug_home	./vim/autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	./vim/autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	./vim/autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	./vim/autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	./vim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:promptline_symbols	./vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^    let g:promptline_symbols = {$/;"	v
g:syntastic_stl_format	./vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^    let g:syntastic_stl_format = _backup$/;"	v
g:syntastic_stl_format	./vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^    let g:syntastic_stl_format = get(g:, 'airline#extensions#syntastic#stl_format_err', '%E{[%fe/;"	v
g:syntastic_stl_format	./vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^    let g:syntastic_stl_format = get(g:, 'airline#extensions#syntastic#stl_format_warn', '%W{[%f/;"	v
g:taboo_tabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  let g:taboo_tabline = 0$/;"	v
g:tagbar_status_func	./vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^  let g:tagbar_status_func = 'airline#extensions#tagbar#get_status'$/;"	v
g:unite_force_overwrite_statusline	./vim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^  let g:unite_force_overwrite_statusline = 0$/;"	v
g:vimfiler_force_overwrite_statusline	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^    let g:vimfiler_force_overwrite_statusline = 0$/;"	v
g:xtab_cwds	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:xtab_cwds[tabpagenr()-1] = t:cwd$/;"	v
g:xtabline_alt_action	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:xtabline_alt_action = get(g:, 'xtabline_alt_action', "buffer #")$/;"	v
g:xtabline_changing_buffer	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:xtabline_changing_buffer = 1$/;"	v
g:xtabline_include_previews	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:xtabline_include_previews = get(g:, 'xtabline_include_previews', 1)$/;"	v
gD	./.vimrc	/^nnoremap <silent> gD :tselect <C-R>=expand('<cword>')<CR><CR>$/;"	m
gap	./vim/plugged/fzf/src/terminal.go	/^	gap                int$/;"	m	struct:fzf.Terminal	typeref:typename:int
gapLine	./vim/plugged/fzf/src/terminal.go	/^	gapLine            labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
gapLineLen	./vim/plugged/fzf/src/terminal.go	/^	gapLineLen         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
gd	./.vimrc	/^nnoremap <silent> gd <C-]>$/;"	m
generate	./vim/plugged/fzf/Makefile	/^generate:$/;"	t
getBytes	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() ([]byte, error) {$/;"	f	struct:tui.LightRenderer	typeref:typename:([]byte, error)
getBytesInternal	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) ([]byte, error) {$/;"	f	struct:tui.LightRenderer	typeref:typename:([]byte, error)
getEnv	./vim/plugged/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
getHandler	./vim/plugged/fzf/src/server.go	/^	getHandler    func(getParams) string$/;"	m	struct:fzf.httpServer	typeref:typename:func(getParams) string
getParams	./vim/plugged/fzf/src/server.go	/^type getParams struct {$/;"	s	package:fzf
getRegex	./vim/plugged/fzf/src/server.go	/^var getRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
getScreen	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) getScreen() (tcell.Screen, error) {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:(tcell.Screen, error)
getScrollbar	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) getScrollbar() (int, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int)
getScrollbar	./vim/plugged/fzf/src/terminal.go	/^func getScrollbar(perLine int, total int, height int, offset int) (int, int) {$/;"	f	package:fzf	typeref:typename:(int, int)
getch	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
getch	./vim/plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
ghost	./vim/plugged/fzf/src/terminal.go	/^	ghost              string$/;"	m	struct:fzf.Terminal	typeref:typename:string
gi	./.vimrc	/^nnoremap <silent> gi :tjump <C-R>=expand('<cword>')<CR><CR>$/;"	m
give	./vim/plugged/fzf/src/terminal_test.go	/^	give$/;"	M	struct:fzf.testCase	typeref:typename:give
give	./vim/plugged/fzf/src/terminal_test.go	/^type give struct {$/;"	s	package:fzf
go	./vim/plugged/fzf/test/lib/common.rb	/^  def go(args)$/;"	f	class:Tmux
handleHttpRequest	./vim/plugged/fzf/src/server.go	/^func (server *httpServer) handleHttpRequest(conn net.Conn) string {$/;"	f	struct:fzf.httpServer	typeref:typename:string
hasBar	./vim/plugged/fzf/src/terminal.go	/^	hasBar    bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
hasFocusActions	./vim/plugged/fzf/src/terminal.go	/^	hasFocusActions    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hasHeaderLinesWindow	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) hasHeaderLinesWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasHeaderWindow	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) hasHeaderWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasLoadActions	./vim/plugged/fzf/src/terminal.go	/^	hasLoadActions     bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hasPreviewFlags	./vim/plugged/fzf/src/terminal.go	/^func hasPreviewFlags(template string) (slot bool, plus bool, asterisk bool, forceUpdate bool) {$/;"	f	package:fzf	typeref:typename:(slot bool, plus bool, asterisk bool, forceUpdate bool)
hasPreviewWindow	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasPreviewWindowOnRight	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindowOnRight() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasPreviewer	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasReloadOrTransformOnStart	./vim/plugged/fzf/src/options.go	/^func (opts *Options) hasReloadOrTransformOnStart() bool {$/;"	f	struct:fzf.Options	typeref:typename:bool
hasResizeActions	./vim/plugged/fzf/src/terminal.go	/^	hasResizeActions   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hasResultActions	./vim/plugged/fzf/src/terminal.go	/^	hasResultActions   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hasStartActions	./vim/plugged/fzf/src/terminal.go	/^	hasStartActions    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
header	./vim/plugged/fzf/src/terminal.go	/^	header             []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
header0	./vim/plugged/fzf/src/terminal.go	/^	header0            []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
headerBorder	./vim/plugged/fzf/src/terminal.go	/^	headerBorder       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
headerBorderShape	./vim/plugged/fzf/src/terminal.go	/^	headerBorderShape  tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
headerFirst	./vim/plugged/fzf/src/terminal.go	/^	headerFirst        bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
headerIndent	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) headerIndent(borderShape tui.BorderShape) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
headerLabel	./vim/plugged/fzf/src/terminal.go	/^	headerLabel        labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
headerLabelLen	./vim/plugged/fzf/src/terminal.go	/^	headerLabelLen     int$/;"	m	struct:fzf.Terminal	typeref:typename:int
headerLabelOpts	./vim/plugged/fzf/src/terminal.go	/^	headerLabelOpts    labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
headerLines	./vim/plugged/fzf/src/options.go	/^	headerLines int$/;"	m	struct:fzf.previewOpts	typeref:typename:int
headerLines	./vim/plugged/fzf/src/terminal.go	/^	headerLines        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
headerLinesBorder	./vim/plugged/fzf/src/terminal.go	/^	headerLinesBorder  tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
headerLinesShape	./vim/plugged/fzf/src/terminal.go	/^	headerLinesShape   tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
headerLinesWindow	./vim/plugged/fzf/src/terminal.go	/^	headerLinesWindow  tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
headerVisible	./vim/plugged/fzf/src/terminal.go	/^	headerVisible      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
headerWindow	./vim/plugged/fzf/src/terminal.go	/^	headerWindow       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
height	./vim/plugged/fzf/src/options.go	/^	height   sizeSpec$/;"	m	struct:fzf.tmuxOptions	typeref:typename:sizeSpec
height	./vim/plugged/fzf/src/tui/light.go	/^	height        int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
height	./vim/plugged/fzf/src/tui/light.go	/^	height        int$/;"	m	struct:tui.LightWindow	typeref:typename:int
height	./vim/plugged/fzf/src/tui/tcell.go	/^	height        int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
heightSpec	./vim/plugged/fzf/src/options.go	/^type heightSpec struct {$/;"	s	package:fzf
hidden	./vim/plugged/fzf/src/options.go	/^	hidden      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
hidden	./vim/plugged/fzf/src/options.go	/^	hidden bool$/;"	m	struct:fzf.walkerOpts	typeref:typename:bool
highlightLine	./vim/plugged/fzf/src/terminal.go	/^	highlightLine      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
history	./vim/plugged/fzf/src/terminal.go	/^	history            *History$/;"	m	struct:fzf.Terminal	typeref:typename:*History
host	./vim/plugged/fzf/src/server.go	/^	host string$/;"	m	struct:fzf.listenAddress	typeref:typename:string
hscroll	./vim/plugged/fzf/src/terminal.go	/^	hscroll            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hscrollOff	./vim/plugged/fzf/src/terminal.go	/^	hscrollOff         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
httpBadRequest	./vim/plugged/fzf/src/server.go	/^	httpBadRequest   = "HTTP\/1.1 400 Bad Request" + crlf$/;"	c	package:fzf
httpOk	./vim/plugged/fzf/src/server.go	/^	httpOk           = "HTTP\/1.1 200 OK" + crlf$/;"	c	package:fzf
httpReadTimeout	./vim/plugged/fzf/src/server.go	/^	httpReadTimeout  = 10 * time.Second$/;"	c	package:fzf
httpServer	./vim/plugged/fzf/src/server.go	/^type httpServer struct {$/;"	s	package:fzf
httpUnauthorized	./vim/plugged/fzf/src/server.go	/^	httpUnauthorized = "HTTP\/1.1 401 Unauthorized" + crlf$/;"	c	package:fzf
httpUnavailable	./vim/plugged/fzf/src/server.go	/^	httpUnavailable  = "HTTP\/1.1 503 Service Unavailable" + crlf$/;"	c	package:fzf
hunks ([vim-gitgutter][29], [vim-signify][30], [coc-git][59] & [gitsigns.nvim][63])	./vim/plugged/vim-airline/README.md	/^#### hunks ([vim-gitgutter][29], [vim-signify][30], [coc-git][59] & [gitsigns.nvim][63])$/;"	t	section:Installation""Seamless integration
ignore	./vim/plugged/fzf/src/util/eventbox.go	/^	ignore map[EventType]bool$/;"	m	struct:util.EventBox	typeref:typename:map[EventType]bool
image	./vim/plugged/fzf/src/terminal.go	/^	image     bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
inBytes	./vim/plugged/fzf/src/util/chars.go	/^	inBytes         bool$/;"	m	struct:util.Chars	typeref:typename:bool
inHandle	./vim/plugged/fzf/src/tui/light.go	/^	inHandle        uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
inListWindow	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) inListWindow() bool {$/;"	f	unknown:fzf.Terminal	typeref:typename:bool
index	./vim/plugged/fzf/src/matcher.go	/^	index   int$/;"	m	struct:fzf.partialResult	typeref:typename:int
index	./vim/plugged/fzf/src/options.go	/^	index    int$/;"	m	struct:fzf.tmuxOptions	typeref:typename:int
index	./vim/plugged/fzf/src/options.go	/^	index   int$/;"	m	struct:fzf.heightSpec	typeref:typename:int
indexAt	./vim/plugged/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f	package:algo	typeref:typename:int
info	./vim/plugged/fzf/src/options.go	/^	info        bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
infoCommand	./vim/plugged/fzf/src/terminal.go	/^	infoCommand        string$/;"	m	struct:fzf.Terminal	typeref:typename:string
infoDefault	./vim/plugged/fzf/src/options.go	/^	infoDefault infoStyle = iota$/;"	c	package:fzf	typeref:type:infoStyle
infoHidden	./vim/plugged/fzf/src/options.go	/^	infoHidden$/;"	c	package:fzf
infoInline	./vim/plugged/fzf/src/options.go	/^	infoInline$/;"	c	package:fzf
infoInlineRight	./vim/plugged/fzf/src/options.go	/^	infoInlineRight$/;"	c	package:fzf
infoPrefix	./vim/plugged/fzf/src/terminal.go	/^	infoPrefix         string$/;"	m	struct:fzf.Terminal	typeref:typename:string
infoRight	./vim/plugged/fzf/src/options.go	/^	infoRight$/;"	c	package:fzf
infoStyle	./vim/plugged/fzf/src/options.go	/^type infoStyle int$/;"	t	package:fzf	typeref:typename:int
infoStyle	./vim/plugged/fzf/src/terminal.go	/^	infoStyle          infoStyle$/;"	m	struct:fzf.Terminal	typeref:typename:infoStyle
init	./vim/plugged/fzf/src/algo/algo_test.go	/^func init() {$/;"	f	package:algo
init	./vim/plugged/fzf/src/options.go	/^func init() {$/;"	f	package:fzf
init	./vim/plugged/fzf/src/pattern.go	/^func init() {$/;"	f	package:fzf
init	./vim/plugged/fzf/src/pattern_test.go	/^func init() {$/;"	f	package:fzf
init	./vim/plugged/fzf/src/server.go	/^func init() {$/;"	f	package:fzf
init	./vim/plugged/fzf/src/terminal.go	/^func init() {$/;"	f	package:fzf
init	./vim/plugged/fzf/src/tui/tui.go	/^func init() {$/;"	f	package:tui
initDelay	./vim/plugged/fzf/src/terminal.go	/^	initDelay          time.Duration$/;"	m	struct:fzf.Terminal	typeref:typename:time.Duration
initFunc	./vim/plugged/fzf/src/terminal.go	/^	initFunc           func() error$/;"	m	struct:fzf.Terminal	typeref:typename:func() error
initPalette	./vim/plugged/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f	package:tui
initPlatform	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) initPlatform() (err error) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(err error)
initPlatform	./vim/plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initProfiling	./vim/plugged/fzf/src/options_no_pprof.go	/^func (o *Options) initProfiling() error {$/;"	f	unknown:fzf.Options	typeref:typename:error
initProfiling	./vim/plugged/fzf/src/options_pprof.go	/^func (o *Options) initProfiling() error {$/;"	f	unknown:fzf.Options	typeref:typename:error
initScreen	./vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() error {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:error
initialCharClass	./vim/plugged/fzf/src/algo/algo.go	/^	initialCharClass = charWhite$/;"	v	package:algo
initialDelay	./vim/plugged/fzf/src/constants.go	/^	initialDelay      = 20 * time.Millisecond$/;"	c	package:fzf
initialDelayTac	./vim/plugged/fzf/src/constants.go	/^	initialDelayTac   = 100 * time.Millisecond$/;"	c	package:fzf
initialPreviewOpts	./vim/plugged/fzf/src/terminal.go	/^	initialPreviewOpts previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
initialize	./vim/plugged/fzf/test/lib/common.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
input	./vim/plugged/fzf/src/terminal.go	/^	input              []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
inputBorder	./vim/plugged/fzf/src/terminal.go	/^	inputBorder        tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
inputBorderShape	./vim/plugged/fzf/src/terminal.go	/^	inputBorderShape   tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
inputLabel	./vim/plugged/fzf/src/terminal.go	/^	inputLabel         labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
inputLabelLen	./vim/plugged/fzf/src/terminal.go	/^	inputLabelLen      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
inputLabelOpts	./vim/plugged/fzf/src/terminal.go	/^	inputLabelOpts     labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
inputOverride	./vim/plugged/fzf/src/terminal.go	/^	inputOverride      *[]rune$/;"	m	struct:fzf.Terminal	typeref:typename:*[]rune
inputWindow	./vim/plugged/fzf/src/terminal.go	/^	inputWindow        tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
inputless	./vim/plugged/fzf/src/terminal.go	/^	inputless          bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
install	./vim/plugged/fzf/Makefile	/^install: bin\/fzf$/;"	t
install_vim_config	./install.sh	/^install_vim_config() {$/;"	f
interpretCode	./vim/plugged/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) ansiState {$/;"	f	package:fzf	typeref:typename:ansiState
inv	./vim/plugged/fzf/src/pattern.go	/^	inv           bool$/;"	m	struct:fzf.term	typeref:typename:bool
inverse	./vim/plugged/fzf/src/options.go	/^	inverse bool$/;"	m	struct:fzf.heightSpec	typeref:typename:bool
is24	./vim/plugged/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f	type:tui.Color	typeref:typename:bool
isAlphabet	./vim/plugged/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isAscii	./vim/plugged/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f	package:algo	typeref:typename:bool
isCtrlSeqStart	./vim/plugged/fzf/src/ansi.go	/^func isCtrlSeqStart(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isDir	./vim/plugged/fzf/src/options.go	/^func isDir(path string) bool {$/;"	f	package:fzf	typeref:typename:bool
isExecuteAction	./vim/plugged/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f	package:fzf	typeref:typename:actionType
isMintty345	./vim/plugged/fzf/src/winpty_windows.go	/^func isMintty345() bool {$/;"	f	package:fzf	typeref:typename:bool
isNumeric	./vim/plugged/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isPrint	./vim/plugged/fzf/src/ansi.go	/^func isPrint(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isSymlinkToDir	./vim/plugged/fzf/src/reader.go	/^func isSymlinkToDir(path string, de os.DirEntry) bool {$/;"	f	package:fzf	typeref:typename:bool
item	./vim/plugged/fzf/src/result.go	/^	item   *Item$/;"	m	struct:fzf.Result	typeref:typename:*Item
item	./vim/plugged/fzf/src/terminal.go	/^	item *Item$/;"	m	struct:fzf.selectedItem	typeref:typename:*Item
itemLine	./vim/plugged/fzf/src/terminal.go	/^type itemLine struct {$/;"	s	package:fzf
itemLines	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) itemLines(item *Item, atMost int) ([][]rune, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:([][]rune, bool)
item_count	./vim/plugged/fzf/test/lib/common.rb	/^          def item_count$/;"	f	method:Tmux.until
items	./vim/plugged/fzf/src/chunklist.go	/^	items [chunkSize]Item$/;"	m	struct:fzf.Chunk	typeref:typename:[chunkSize]Item
iter	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forwa/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
itest	./vim/plugged/fzf/Makefile	/^itest:$/;"	t
jsonContentType	./vim/plugged/fzf/src/server.go	/^	jsonContentType  = "Content-Type: application\/json" + crlf$/;"	c	package:fzf
jumpAcceptEnabled	./vim/plugged/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c	package:fzf
jumpDisabled	./vim/plugged/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c	package:fzf	typeref:type:jumpMode
jumpEnabled	./vim/plugged/fzf/src/terminal.go	/^	jumpEnabled$/;"	c	package:fzf
jumpLabels	./vim/plugged/fzf/src/terminal.go	/^	jumpLabels         string$/;"	m	struct:fzf.Terminal	typeref:typename:string
jumpMode	./vim/plugged/fzf/src/terminal.go	/^type jumpMode int$/;"	t	package:fzf	typeref:typename:int
jumping	./vim/plugged/fzf/src/terminal.go	/^	jumping            jumpMode$/;"	m	struct:fzf.Terminal	typeref:typename:jumpMode
junegunn/seoul256.vim (dark)	./vim/plugged/fzf/ADVANCED.md	/^# junegunn\/seoul256.vim (dark)$/;"	c
junegunn/seoul256.vim (light)	./vim/plugged/fzf/ADVANCED.md	/^# junegunn\/seoul256.vim (light)$/;"	c
keepRight	./vim/plugged/fzf/src/terminal.go	/^	keepRight          bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
keyChan	./vim/plugged/fzf/src/terminal.go	/^	keyChan            chan tui.Event$/;"	m	struct:fzf.Terminal	typeref:typename:chan tui.Event
keyMatch	./vim/plugged/fzf/src/terminal.go	/^func keyMatch(key tui.Event, event tui.Event) bool {$/;"	f	package:fzf	typeref:typename:bool
keymap	./vim/plugged/fzf/src/terminal.go	/^	keymap             map[tui.Event][]*action$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event][]*action
keymapOrg	./vim/plugged/fzf/src/terminal.go	/^	keymapOrg          map[tui.Event][]*action$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event][]*action
kill	./vim/plugged/fzf/test/lib/common.rb	/^  def kill$/;"	f	class:Tmux
killChan	./vim/plugged/fzf/src/terminal.go	/^	killChan           chan bool$/;"	m	struct:fzf.Terminal	typeref:typename:chan bool
killPreview	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) killPreview() {$/;"	f	struct:fzf.Terminal
killed	./vim/plugged/fzf/src/reader.go	/^	killed   bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
label	./vim/plugged/fzf/src/options.go	/^	label  string$/;"	m	struct:fzf.labelOpts	typeref:typename:string
label	./vim/plugged/fzf/src/terminal.go	/^	label     string$/;"	m	struct:fzf.itemLine	typeref:typename:string
labelOpts	./vim/plugged/fzf/src/options.go	/^type labelOpts struct {$/;"	s	package:fzf
labelPrinter	./vim/plugged/fzf/src/terminal.go	/^type labelPrinter func(tui.Window, int)$/;"	t	package:fzf	typeref:typename:func(tui.Window, int)
lastAction	./vim/plugged/fzf/src/terminal.go	/^	lastAction         actionType$/;"	m	struct:fzf.Terminal	typeref:typename:actionType
lastAction	./vim/plugged/fzf/src/terminal.go	/^	lastAction actionType$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:actionType
lastChunk	./vim/plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f	struct:fzf.ChunkList	typeref:typename:*Chunk
lastFocus	./vim/plugged/fzf/src/terminal.go	/^	lastFocus          int32$/;"	m	struct:fzf.Terminal	typeref:typename:int32
lastIndex	./vim/plugged/fzf/src/chunklist.go	/^func (c *Chunk) lastIndex(minValue int32) int32 {$/;"	f	struct:fzf.Chunk	typeref:typename:int32
lastKey	./vim/plugged/fzf/src/terminal.go	/^	lastKey            string$/;"	m	struct:fzf.Terminal	typeref:typename:string
lastX	./vim/plugged/fzf/src/tui/tcell.go	/^	lastX         int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
lastY	./vim/plugged/fzf/src/tui/tcell.go	/^	lastY         int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
layout	./vim/plugged/fzf/src/terminal.go	/^	layout             layoutType$/;"	m	struct:fzf.Terminal	typeref:typename:layoutType
layoutDefault	./vim/plugged/fzf/src/options.go	/^	layoutDefault layoutType = iota$/;"	c	package:fzf	typeref:type:layoutType
layoutReverse	./vim/plugged/fzf/src/options.go	/^	layoutReverse$/;"	c	package:fzf
layoutReverseList	./vim/plugged/fzf/src/options.go	/^	layoutReverseList$/;"	c	package:fzf
layoutType	./vim/plugged/fzf/src/options.go	/^type layoutType int$/;"	t	package:fzf	typeref:typename:int
lbg	./vim/plugged/fzf/src/ansi.go	/^	lbg  tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
left	./vim/plugged/fzf/src/tui/light.go	/^	left          int$/;"	m	struct:tui.LightWindow	typeref:typename:int
left	./vim/plugged/fzf/src/tui/tcell.go	/^	left          int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
left	./vim/plugged/fzf/src/tui/tui.go	/^	left        rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
limit	./vim/plugged/fzf/src/server.go	/^	limit  int$/;"	m	struct:fzf.getParams	typeref:typename:int
line	./vim/plugged/fzf/src/terminal.go	/^	line string$/;"	m	struct:fzf.eachLine	typeref:typename:string
lines	./vim/plugged/fzf/src/history.go	/^	lines    []string$/;"	m	struct:fzf.History	typeref:typename:[]string
lines	./vim/plugged/fzf/src/terminal.go	/^	lines      []string$/;"	m	struct:fzf.previewer	typeref:typename:[]string
lines	./vim/plugged/fzf/src/terminal.go	/^	lines   []string$/;"	m	struct:fzf.previewResult	typeref:typename:[]string
lint	./vim/plugged/fzf/Makefile	/^lint: $(SOURCES) test\/*.rb test\/lib\/*.rb$/;"	t
list	./vim/plugged/fzf/src/terminal.go	/^	list         [3][]*Item \/\/ current, select, and all matched items$/;"	m	struct:fzf.previewRequest	typeref:typename:[3][]*Item
listBorderShape	./vim/plugged/fzf/src/terminal.go	/^	listBorderShape    tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
listLabel	./vim/plugged/fzf/src/terminal.go	/^	listLabel          labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
listLabelLen	./vim/plugged/fzf/src/terminal.go	/^	listLabelLen       int$/;"	m	struct:fzf.Terminal	typeref:typename:int
listLabelOpts	./vim/plugged/fzf/src/terminal.go	/^	listLabelOpts      labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
listenAddr	./vim/plugged/fzf/src/terminal.go	/^	listenAddr         *listenAddress$/;"	m	struct:fzf.Terminal	typeref:typename:*listenAddress
listenAddress	./vim/plugged/fzf/src/server.go	/^type listenAddress struct {$/;"	s	package:fzf
listenPort	./vim/plugged/fzf/src/terminal.go	/^	listenPort         *int$/;"	m	struct:fzf.Terminal	typeref:typename:*int
listenUnsafe	./vim/plugged/fzf/src/terminal.go	/^	listenUnsafe       bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
listener	./vim/plugged/fzf/src/terminal.go	/^	listener           net.Listener$/;"	m	struct:fzf.Terminal	typeref:typename:net.Listener
lists	./vim/plugged/fzf/src/merger.go	/^	lists    [][]Result$/;"	m	struct:fzf.Merger	typeref:typename:[][]Result
loaded_nerd_tree	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
log_error	./install.sh	/^log_error() { echo "$1"; }$/;"	f
log_info	./install.sh	/^log_info() { echo "$1"; }$/;"	f
log_success	./install.sh	/^log_success() { echo "$1"; }$/;"	f
log_warning	./install.sh	/^log_warning() { echo "$1"; }$/;"	f
main	./install.sh	/^main() {$/;"	f
main	./vim/plugged/fzf/main.go	/^func main() {$/;"	f	package:main
main	./vim/plugged/fzf/main.go	/^package main$/;"	p
major	./vim/plugged/fzf/src/core.go	/^	major int$/;"	m	struct:fzf.revision	typeref:typename:int
makeImageBorder	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) makeImageBorder(width int, top bool) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
makeSpace	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f	struct:tui.LightRenderer
makeSpinner	./vim/plugged/fzf/src/terminal.go	/^func makeSpinner(unicode bool) []string {$/;"	f	package:fzf	typeref:typename:[]string
manPage	./vim/plugged/fzf/main.go	/^var manPage []byte$/;"	v	package:main	typeref:typename:[]byte
mapleader	./.vimrc	/^let mapleader = " "$/;"	v
maplocalleader	./.vimrc	/^let maplocalleader = ","$/;"	v
margin	./vim/plugged/fzf/src/terminal.go	/^	margin             [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
markEmptyLine	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) markEmptyLine(line int) {$/;"	f	unknown:fzf.Terminal
markOtherLine	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) markOtherLine(line int) {$/;"	f	unknown:fzf.Terminal
marker	./vim/plugged/fzf/src/terminal.go	/^	marker             string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerBottom	./vim/plugged/fzf/src/terminal.go	/^	markerBottom$/;"	c	package:fzf
markerClass	./vim/plugged/fzf/src/terminal.go	/^type markerClass int$/;"	t	package:fzf	typeref:typename:int
markerEmpty	./vim/plugged/fzf/src/terminal.go	/^	markerEmpty        string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerLen	./vim/plugged/fzf/src/terminal.go	/^	markerLen          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
markerMiddle	./vim/plugged/fzf/src/terminal.go	/^	markerMiddle$/;"	c	package:fzf
markerMultiLine	./vim/plugged/fzf/src/terminal.go	/^	markerMultiLine    [3]string$/;"	m	struct:fzf.Terminal	typeref:typename:[3]string
markerSingle	./vim/plugged/fzf/src/terminal.go	/^	markerSingle markerClass = iota$/;"	c	package:fzf	typeref:type:markerClass
markerTop	./vim/plugged/fzf/src/terminal.go	/^	markerTop$/;"	c	package:fzf
maskActionContents	./vim/plugged/fzf/src/options.go	/^func maskActionContents(action string) string {$/;"	f	package:fzf	typeref:typename:string
match	./vim/plugged/fzf/src/result.go	/^	match  bool$/;"	m	struct:fzf.colorOffset	typeref:typename:bool
match	./vim/plugged/fzf/src/terminal_test.go	/^	match  string \/\/ output is matched against this regex (when output is empty string)$/;"	m	struct:fzf.want	typeref:typename:string
matchChunk	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
matchControlSequence	./vim/plugged/fzf/src/ansi.go	/^func matchControlSequence(s string) int {$/;"	f	package:fzf	typeref:typename:int
matchOperatingSystemCommand	./vim/plugged/fzf/src/ansi.go	/^func matchOperatingSystemCommand(s string, start int) int {$/;"	f	package:fzf	typeref:typename:int
match_count	./vim/plugged/fzf/test/lib/common.rb	/^          def match_count$/;"	f	method:Tmux.until
matches	./vim/plugged/fzf/src/matcher.go	/^	matches []Result$/;"	m	struct:fzf.partialResult	typeref:typename:[]Result
maxBgProcesses	./vim/plugged/fzf/src/constants.go	/^	maxBgProcesses          = 30$/;"	c	package:fzf
maxBgProcessesPerAction	./vim/plugged/fzf/src/constants.go	/^	maxBgProcessesPerAction = 3$/;"	c	package:fzf
maxContentLength	./vim/plugged/fzf/src/server.go	/^	maxContentLength = 1024 * 1024$/;"	c	package:fzf
maxFocusEvents	./vim/plugged/fzf/src/terminal.go	/^const maxFocusEvents = 10000$/;"	c	package:fzf
maxHeightFunc	./vim/plugged/fzf/src/tui/light.go	/^	maxHeightFunc func(int) int$/;"	m	struct:tui.LightRenderer	typeref:typename:func(int) int
maxIndex	./vim/plugged/fzf/src/merger.go	/^	maxIndex int32$/;"	m	struct:fzf.Merger	typeref:typename:int32
maxInputBuffer	./vim/plugged/fzf/src/tui/light.go	/^	maxInputBuffer  = 1024 * 1024$/;"	c	package:tui
maxItems	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
maxMulti	./vim/plugged/fzf/src/constants.go	/^	maxMulti          = math.MaxInt32$/;"	c	package:fzf
maxPartitions	./vim/plugged/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c	package:fzf
maxPatternLength	./vim/plugged/fzf/src/constants.go	/^	maxPatternLength  = 1000$/;"	c	package:fzf
maxSize	./vim/plugged/fzf/src/history.go	/^	maxSize  int$/;"	m	struct:fzf.History	typeref:typename:int
mayTriggerPreview	./vim/plugged/fzf/src/terminal.go	/^func mayTriggerPreview(opts *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
merge	./vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) merge(other ColorPair, except Color) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
merged	./vim/plugged/fzf/src/merger.go	/^	merged   []Result$/;"	m	struct:fzf.Merger	typeref:typename:[]Result
mergedGet	./vim/plugged/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
merger	./vim/plugged/fzf/src/terminal.go	/^	merger             *Merger$/;"	m	struct:fzf.Terminal	typeref:typename:*Merger
mergerCache	./vim/plugged/fzf/src/matcher.go	/^	mergerCache    map[string]*Merger$/;"	m	struct:fzf.Matcher	typeref:typename:map[string]*Merger
mergerCacheMax	./vim/plugged/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c	package:fzf	typeref:typename:int
minHeight	./vim/plugged/fzf/src/terminal.go	/^	minHeight = 3$/;"	c	package:fzf
minIndex	./vim/plugged/fzf/src/merger.go	/^	minIndex int32$/;"	m	struct:fzf.Merger	typeref:typename:int32
minItem	./vim/plugged/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: math.MinInt32}}$/;"	v	package:fzf
minPreviewSize	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) minPreviewSize(opts *previewOpts) (int, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int)
minRank	./vim/plugged/fzf/src/result.go	/^func minRank() Result {$/;"	f	package:fzf	typeref:typename:Result
minWidth	./vim/plugged/fzf/src/terminal.go	/^	minWidth  = 4$/;"	c	package:fzf
minor	./vim/plugged/fzf/src/core.go	/^	minor int$/;"	m	struct:fzf.revision	typeref:typename:int
mkfifo	./vim/plugged/fzf/src/proxy_unix.go	/^func mkfifo(path string, mode uint32) (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
mkfifo	./vim/plugged/fzf/src/proxy_windows.go	/^func mkfifo(path string, mode uint32) (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
modified	./vim/plugged/fzf/src/history.go	/^	modified map[int]string$/;"	m	struct:fzf.History	typeref:typename:map[int]string
morhetz/gruvbox	./vim/plugged/fzf/ADVANCED.md	/^# morhetz\/gruvbox$/;"	c
mouse	./vim/plugged/fzf/src/tui/light.go	/^	mouse         bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
mouse	./vim/plugged/fzf/src/tui/tui.go	/^	mouse        bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
mouseSequence	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
move	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f	struct:fzf.Terminal
move	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f	struct:tui.LightRenderer
moveCursor	./vim/plugged/fzf/src/tui/tcell.go	/^	moveCursor    bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
multi	./vim/plugged/fzf/src/terminal.go	/^	multi              int$/;"	m	struct:fzf.Terminal	typeref:typename:int
multiLine	./vim/plugged/fzf/src/terminal.go	/^	multiLine          bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
mutex	./vim/plugged/fzf/src/cache.go	/^	mutex sync.Mutex$/;"	m	struct:fzf.ChunkCache	typeref:typename:sync.Mutex
mutex	./vim/plugged/fzf/src/chunklist.go	/^	mutex  sync.Mutex$/;"	m	struct:fzf.ChunkList	typeref:typename:sync.Mutex
mutex	./vim/plugged/fzf/src/reader.go	/^	mutex    sync.Mutex$/;"	m	struct:fzf.Reader	typeref:typename:sync.Mutex
mutex	./vim/plugged/fzf/src/terminal.go	/^	mutex              sync.Mutex$/;"	m	struct:fzf.Terminal	typeref:typename:sync.Mutex
mutex	./vim/plugged/fzf/src/tui/light.go	/^	mutex           sync.Mutex$/;"	m	struct:tui.LightRenderer	typeref:typename:sync.Mutex
n	./.vimrc	/^nnoremap <silent> n nzzzv$/;"	m
needPreviewWindow	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) needPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
needWinpty	./vim/plugged/fzf/src/winpty.go	/^func needWinpty(_ *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
needWinpty	./vim/plugged/fzf/src/winpty_windows.go	/^func needWinpty(opts *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
nerdtree#caseSensitiveFS	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#caseSensitiveFS() abort$/;"	f
nerdtree#checkForBrowse	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir) abort$/;"	f
nerdtree#closeBookmarksOnOpen	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeBookmarksOnOpen() abort$/;"	f
nerdtree#closeTreeOnOpen	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeTreeOnOpen() abort$/;"	f
nerdtree#compareNodePaths	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodePaths(p1, p2) abort$/;"	f
nerdtree#compareNodes	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2) abort$/;"	f
nerdtree#completeBookmarks	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P) abort$/;"	f
nerdtree#deprecated	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...) abort$/;"	f
nerdtree#echo	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg) abort$/;"	f
nerdtree#echoError	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg) abort$/;"	f
nerdtree#echoWarning	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg) abort$/;"	f
nerdtree#exec	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll) abort$/;"	f
nerdtree#has_opt	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name) abort$/;"	f
nerdtree#loadClassFiles	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles() abort$/;"	f
nerdtree#onBufLeave	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#onBufLeave() abort$/;"	f
nerdtree#osDefaultCaseSensitiveFS	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#osDefaultCaseSensitiveFS() abort$/;"	f
nerdtree#pathEquals	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#pathEquals(lhs, rhs) abort$/;"	f
nerdtree#postSourceActions	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions() abort$/;"	f
nerdtree#renderView	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView() abort$/;"	f
nerdtree#runningCygwin	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin() abort$/;"	f
nerdtree#runningMac	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningMac() abort$/;"	f
nerdtree#runningWindows	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows() abort$/;"	f
nerdtree#slash	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash() abort$/;"	f
nerdtree#ui_glue#bookmarkNode	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...) abort$/;"	f
nerdtree#ui_glue#chRootCwd	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd() abort$/;"	f
nerdtree#ui_glue#clearBookmarks	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks) abort$/;"	f
nerdtree#ui_glue#createDefaultBindings	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings() abort$/;"	f
nerdtree#ui_glue#invokeKeyMap	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key) abort$/;"	f
nerdtree#ui_glue#openBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name) abort$/;"	f
nerdtree#ui_glue#revealBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name) abort$/;"	f
nerdtree#ui_glue#setupCommands	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands() abort$/;"	f
nerdtree#ui_glue#upDir	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState) abort$/;"	f
nerdtree#version	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...) abort$/;"	f
newItem	./vim/plugged/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f	package:fzf	typeref:typename:*Item
newItems	./vim/plugged/fzf/src/terminal_test.go	/^func newItems(str ...string) [3][]*Item {$/;"	f	package:fzf	typeref:typename:[3][]*Item
newRange	./vim/plugged/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f	package:fzf	typeref:typename:Range
new_shell	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def new_shell$/;"	f	class:TestShell.CompletionTest.TestBash
new_shell	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def new_shell$/;"	f	class:TestShell.CompletionTest.TestFish
new_shell	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def new_shell$/;"	f	class:TestShell.CompletionTest.TestZsh
next	./vim/plugged/fzf/src/history.go	/^func (h *History) next() string {$/;"	f	struct:fzf.History	typeref:typename:string
nextAnsiEscapeSequence	./vim/plugged/fzf/src/ansi.go	/^func nextAnsiEscapeSequence(s string) (int, int) {$/;"	f	package:fzf	typeref:typename:(int, int)
noSeparatorLine	./vim/plugged/fzf/src/options.go	/^func (opts *Options) noSeparatorLine() bool {$/;"	f	struct:fzf.Options	typeref:typename:bool
noSeparatorLine	./vim/plugged/fzf/src/options.go	/^func noSeparatorLine(style infoStyle, separator bool) bool {$/;"	f	package:fzf	typeref:typename:bool
noSeparatorLine	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) noSeparatorLine() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
normal	./vim/plugged/fzf/src/tui/tcell.go	/^	normal        ColorPair$/;"	m	struct:tui.TcellWindow	typeref:typename:ColorPair
normalize	./vim/plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
normalize	./vim/plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.term	typeref:typename:bool
normalizeRune	./vim/plugged/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f	package:algo	typeref:typename:rune
normalized	./vim/plugged/fzf/src/algo/normalize.go	/^var normalized = map[rune]rune{$/;"	v	package:algo
notifyOnResize	./vim/plugged/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	./vim/plugged/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyStop	./vim/plugged/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
notifyStop	./vim/plugged/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
nth	./vim/plugged/fzf/src/pattern.go	/^	nth           []Range$/;"	m	struct:fzf.Pattern	typeref:typename:[]Range
nth	./vim/plugged/fzf/src/terminal.go	/^	nth                []Range$/;"	m	struct:fzf.Terminal	typeref:typename:[]Range
nth	./vim/plugged/fzf/src/terminal.go	/^	nth      *[]Range$/;"	m	struct:fzf.searchRequest	typeref:typename:*[]Range
nthAttr	./vim/plugged/fzf/src/terminal.go	/^	nthAttr            tui.Attr$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Attr
nthCurrent	./vim/plugged/fzf/src/terminal.go	/^	nthCurrent         []Range$/;"	m	struct:fzf.Terminal	typeref:typename:[]Range
nthTransformer	./vim/plugged/fzf/src/options.go	/^func nthTransformer(str string) (func(Delimiter) func([]Token, int32) string, error) {$/;"	f	package:fzf	typeref:typename:(func(Delimiter) func([]Token, int32) string, error)
null	./install.ps1	/^$null = $true$/;"	v
numItemLines	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) numItemLines(item *Item, atMost int) (int, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, bool)
numLines	./vim/plugged/fzf/src/terminal.go	/^	numLines  int$/;"	m	struct:fzf.itemLine	typeref:typename:int
numLines	./vim/plugged/fzf/src/terminal.go	/^	numLines  int$/;"	m	struct:fzf.previewed	typeref:typename:int
numLines	./vim/plugged/fzf/src/terminal.go	/^	numLines int$/;"	m	struct:fzf.numLinesCacheValue	typeref:typename:int
numLinesCache	./vim/plugged/fzf/src/terminal.go	/^	numLinesCache      map[int32]numLinesCacheValue$/;"	m	struct:fzf.Terminal	typeref:typename:map[int32]numLinesCacheValue
numLinesCacheValue	./vim/plugged/fzf/src/terminal.go	/^type numLinesCacheValue struct {$/;"	s	package:fzf
numPartitionsMultiplier	./vim/plugged/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c	package:fzf
number	./vim/plugged/fzf/src/terminal.go	/^	number        bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
o	./vim/autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
offset	./vim/plugged/fzf/src/ansi.go	/^	offset [2]int32$/;"	m	struct:fzf.ansiOffset	typeref:typename:[2]int32
offset	./vim/plugged/fzf/src/result.go	/^	offset [2]int32$/;"	m	struct:fzf.colorOffset	typeref:typename:[2]int32
offset	./vim/plugged/fzf/src/server.go	/^	offset int$/;"	m	struct:fzf.getParams	typeref:typename:int
offset	./vim/plugged/fzf/src/terminal.go	/^	offset             int$/;"	m	struct:fzf.Terminal	typeref:typename:int
offset	./vim/plugged/fzf/src/terminal.go	/^	offset     int$/;"	m	struct:fzf.previewer	typeref:typename:int
offset	./vim/plugged/fzf/src/terminal.go	/^	offset    int$/;"	m	struct:fzf.previewed	typeref:typename:int
offset	./vim/plugged/fzf/src/terminal.go	/^	offset  int$/;"	m	struct:fzf.previewResult	typeref:typename:int
offsetComponentRegex	./vim/plugged/fzf/src/terminal.go	/^var offsetComponentRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
offsetPollTries	./vim/plugged/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c	package:tui
offsetRegexp	./vim/plugged/fzf/src/tui/light.go	/^var offsetRegexp = regexp.MustCompile("(.*?)\\x00?\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v	package:tui
offsetRegexpBegin	./vim/plugged/fzf/src/tui/light.go	/^var offsetRegexpBegin = regexp.MustCompile("^\\x1b\\\\[[0-9]+;[0-9]+R")$/;"	v	package:tui
offsetTrimCharsRegex	./vim/plugged/fzf/src/terminal.go	/^var offsetTrimCharsRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
openTty	./vim/plugged/fzf/src/tui/light_unix.go	/^func openTty(ttyDefault string, mode int) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
openTtyIn	./vim/plugged/fzf/src/tui/light_unix.go	/^func openTtyIn(ttyDefault string) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
openTtyIn	./vim/plugged/fzf/src/tui/light_windows.go	/^func openTtyIn(ttyDefault string) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
openTtyOut	./vim/plugged/fzf/src/tui/light_unix.go	/^func openTtyOut(ttyDefault string) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
openTtyOut	./vim/plugged/fzf/src/tui/light_windows.go	/^func openTtyOut(ttyDefault string) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
optString	./vim/plugged/fzf/src/options.go	/^func optString(arg string, prefix string) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
optionalRunes	./vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
opts.sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! opts.sink(lines) closure$/;"	f
opts.sinklist	./vim/plugged/fzf/plugin/fzf.vim	/^    function! opts.sinklist(lines) abort$/;"	f
optsFor	./vim/plugged/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f	package:fzf	typeref:typename:*Options
origState	./vim/plugged/fzf/src/tui/light.go	/^	origState     *term.State$/;"	m	struct:tui.LightRenderer	typeref:typename:*term.State
origStateInput	./vim/plugged/fzf/src/tui/light.go	/^	origStateInput  uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origStateOutput	./vim/plugged/fzf/src/tui/light.go	/^	origStateOutput uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origText	./vim/plugged/fzf/src/item.go	/^	origText    *[]byte       \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]byte
origin	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f	struct:tui.LightRenderer
other	./vim/plugged/fzf/src/terminal.go	/^	other     bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
outHandle	./vim/plugged/fzf/src/tui/light.go	/^	outHandle       uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
output	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
output	./vim/plugged/fzf/src/terminal_test.go	/^	output string \/\/ literal output$/;"	m	struct:fzf.want	typeref:typename:string
overflow	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
overflow32	./vim/plugged/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c	package:util	typeref:typename:uint32
overflow64	./vim/plugged/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c	package:util	typeref:typename:uint64
override	./vim/plugged/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f	struct:fzf.History
pad	./vim/plugged/fzf/src/terminal.go	/^	pad int$/;"	m	struct:fzf.fitpad	typeref:typename:int
padding	./vim/plugged/fzf/src/terminal.go	/^	padding            [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
params	./vim/plugged/fzf/src/ansi.go	/^	params string$/;"	m	struct:fzf.url	typeref:typename:string
params	./vim/plugged/fzf/src/tui/tcell.go	/^	params        *string$/;"	m	struct:tui.TcellWindow	typeref:typename:*string
parseActionList	./vim/plugged/fzf/src/options.go	/^func parseActionList(masked string, original string, prevActions []*action, putAllowed bool) ([]/;"	f	package:fzf	typeref:typename:([]*action, error)
parseAlgo	./vim/plugged/fzf/src/options.go	/^func parseAlgo(str string) (algo.Algo, error) {$/;"	f	package:fzf	typeref:typename:(algo.Algo, error)
parseAnsiCode	./vim/plugged/fzf/src/ansi.go	/^func parseAnsiCode(s string) (int, string) {$/;"	f	package:fzf	typeref:typename:(int, string)
parseBorder	./vim/plugged/fzf/src/options.go	/^func parseBorder(str string, optional bool) (tui.BorderShape, error) {$/;"	f	package:fzf	typeref:typename:(tui.BorderShape, error)
parseGetParams	./vim/plugged/fzf/src/server.go	/^func parseGetParams(query string) getParams {$/;"	f	package:fzf	typeref:typename:getParams
parseHeight	./vim/plugged/fzf/src/options.go	/^func parseHeight(str string, index int) (heightSpec, error) {$/;"	f	package:fzf	typeref:typename:(heightSpec, error)
parseInfoStyle	./vim/plugged/fzf/src/options.go	/^func parseInfoStyle(str string) (infoStyle, string, error) {$/;"	f	package:fzf	typeref:typename:(infoStyle, string, error)
parseKeyChords	./vim/plugged/fzf/src/options.go	/^func parseKeyChords(str string, message string) (map[tui.Event]string, []tui.Event, error) {$/;"	f	package:fzf	typeref:typename:(map[tui.Event]string, []tui.Event, error)
parseKeymap	./vim/plugged/fzf/src/options.go	/^func parseKeymap(keymap map[tui.Event][]*action, str string) error {$/;"	f	package:fzf	typeref:typename:error
parseLabelPosition	./vim/plugged/fzf/src/options.go	/^func parseLabelPosition(opts *labelOpts, arg string) error {$/;"	f	package:fzf	typeref:typename:error
parseLayout	./vim/plugged/fzf/src/options.go	/^func parseLayout(str string) (layoutType, error) {$/;"	f	package:fzf	typeref:typename:(layoutType, error)
parseListenAddress	./vim/plugged/fzf/src/server.go	/^func parseListenAddress(address string) (listenAddress, error) {$/;"	f	package:fzf	typeref:typename:(listenAddress, error)
parseMargin	./vim/plugged/fzf/src/options.go	/^func parseMargin(opt string, margin string) ([4]sizeSpec, error) {$/;"	f	package:fzf	typeref:typename:([4]sizeSpec, error)
parseMarkerMultiLine	./vim/plugged/fzf/src/options.go	/^func parseMarkerMultiLine(str string) (*[3]string, error) {$/;"	f	package:fzf	typeref:typename:(*[3]string, error)
parseOptions	./vim/plugged/fzf/src/options.go	/^func parseOptions(index *int, opts *Options, allArgs []string) error {$/;"	f	package:fzf	typeref:typename:error
parsePlaceholder	./vim/plugged/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f	package:fzf	typeref:typename:(bool, string, placeholderFlags)
parsePreviewWindow	./vim/plugged/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) error {$/;"	f	package:fzf	typeref:typename:error
parsePreviewWindowImpl	./vim/plugged/fzf/src/options.go	/^func parsePreviewWindowImpl(opts *previewOpts, input string) error {$/;"	f	package:fzf	typeref:typename:error
parsePrompt	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) parsePrompt(prompt string) (func(), int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(func(), int)
parseScheme	./vim/plugged/fzf/src/options.go	/^func parseScheme(str string) (string, []criterion, error) {$/;"	f	package:fzf	typeref:typename:(string, []criterion, error)
parseShellWords	./vim/plugged/fzf/src/options.go	/^func parseShellWords(str string) ([]string, error) {$/;"	f	package:fzf	typeref:typename:([]string, error)
parseSingleActionList	./vim/plugged/fzf/src/options.go	/^func parseSingleActionList(str string) ([]*action, error) {$/;"	f	package:fzf	typeref:typename:([]*action, error)
parseSize	./vim/plugged/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) (sizeSpec, error) {$/;"	f	package:fzf	typeref:typename:(sizeSpec, error)
parseTerms	./vim/plugged/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f	package:fzf	typeref:typename:[]termSet
parseTheme	./vim/plugged/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) (*tui.ColorTheme, error) {$/;"	f	package:fzf	typeref:typename:(*tui.ColorTheme, error)
parseTiebreak	./vim/plugged/fzf/src/options.go	/^func parseTiebreak(str string) ([]criterion, error) {$/;"	f	package:fzf	typeref:typename:([]criterion, error)
parseTmuxOptions	./vim/plugged/fzf/src/options.go	/^func parseTmuxOptions(arg string, index int) (*tmuxOptions, error) {$/;"	f	package:fzf	typeref:typename:(*tmuxOptions, error)
parseToggleSort	./vim/plugged/fzf/src/options.go	/^func parseToggleSort(keymap map[tui.Event][]*action, str string) error {$/;"	f	package:fzf	typeref:typename:error
parseWalkerOpts	./vim/plugged/fzf/src/options.go	/^func parseWalkerOpts(str string) (walkerOpts, error) {$/;"	f	package:fzf	typeref:typename:(walkerOpts, error)
partialResult	./vim/plugged/fzf/src/matcher.go	/^type partialResult struct {$/;"	s	package:fzf
partitions	./vim/plugged/fzf/src/matcher.go	/^	partitions     int$/;"	m	struct:fzf.Matcher	typeref:typename:int
pass	./vim/plugged/fzf/src/merger.go	/^	pass     bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
passThroughBeginRegex	./vim/plugged/fzf/src/terminal.go	/^var passThroughBeginRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
passThroughEndTmuxRegex	./vim/plugged/fzf/src/terminal.go	/^var passThroughEndTmuxRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
paste	./vim/plugged/fzf/test/lib/common.rb	/^  def paste(str)$/;"	f	class:Tmux
pasting	./vim/plugged/fzf/src/terminal.go	/^	pasting            *[]rune$/;"	m	struct:fzf.Terminal	typeref:typename:*[]rune
path	./vim/plugged/fzf/src/history.go	/^	path     string$/;"	m	struct:fzf.History	typeref:typename:string
pattern	./vim/plugged/fzf/src/matcher.go	/^	pattern  *Pattern$/;"	m	struct:fzf.MatchRequest	typeref:typename:*Pattern
pattern	./vim/plugged/fzf/src/merger.go	/^	pattern  *Pattern$/;"	m	struct:fzf.Merger	typeref:typename:*Pattern
patternBuilder	./vim/plugged/fzf/src/matcher.go	/^	patternBuilder func([]rune) *Pattern$/;"	m	struct:fzf.Matcher	typeref:typename:func([]rune) *Pattern
paused	./vim/plugged/fzf/src/terminal.go	/^	paused             bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
pausedState	./vim/plugged/fzf/src/terminal.go	/^	pausedState$/;"	c	package:fzf
pborder	./vim/plugged/fzf/src/terminal.go	/^	pborder            tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
percent	./vim/plugged/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.heightSpec	typeref:typename:bool
percent	./vim/plugged/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.sizeSpec	typeref:typename:bool
placeCursor	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f	struct:fzf.Terminal
placeholder	./vim/plugged/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
placeholderFlags	./vim/plugged/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	s	package:fzf
plug#	./vim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	./vim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	./vim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	./vim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	./vim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	./vim/autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plugin	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    augroup plugin-xtabline$/;"	a
plus	./vim/plugged/fzf/src/terminal.go	/^	plus          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pointer	./vim/plugged/fzf/src/terminal.go	/^	pointer            string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerEmpty	./vim/plugged/fzf/src/terminal.go	/^	pointerEmpty       string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerLen	./vim/plugged/fzf/src/terminal.go	/^	pointerLen         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
points	./vim/plugged/fzf/src/result.go	/^	points [4]uint16$/;"	m	struct:fzf.Result	typeref:typename:[4]uint16
port	./vim/plugged/fzf/src/server.go	/^	port int$/;"	m	struct:fzf.listenAddress	typeref:typename:int
posArray	./vim/plugged/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f	package:algo	typeref:typename:*[]int
posCenter	./vim/plugged/fzf/src/options.go	/^	posCenter$/;"	c	package:fzf
posDown	./vim/plugged/fzf/src/options.go	/^	posDown$/;"	c	package:fzf
posLeft	./vim/plugged/fzf/src/options.go	/^	posLeft$/;"	c	package:fzf
posRight	./vim/plugged/fzf/src/options.go	/^	posRight$/;"	c	package:fzf
posUp	./vim/plugged/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c	package:fzf	typeref:type:windowPosition
position	./vim/plugged/fzf/src/options.go	/^	position    windowPosition$/;"	m	struct:fzf.previewOpts	typeref:typename:windowPosition
position	./vim/plugged/fzf/src/options.go	/^	position windowPosition$/;"	m	struct:fzf.tmuxOptions	typeref:typename:windowPosition
postProcessOptions	./vim/plugged/fzf/src/options.go	/^func postProcessOptions(opts *Options) error {$/;"	f	package:fzf	typeref:typename:error
posx	./vim/plugged/fzf/src/tui/light.go	/^	posx          int$/;"	m	struct:tui.LightWindow	typeref:typename:int
posy	./vim/plugged/fzf/src/tui/light.go	/^	posy          int$/;"	m	struct:tui.LightWindow	typeref:typename:int
prefixLength	./vim/plugged/fzf/src/tokenizer.go	/^	prefixLength int32$/;"	m	struct:fzf.Token	typeref:typename:int32
prepare	./vim/plugged/fzf/test/lib/common.rb	/^  def prepare$/;"	f	class:Tmux
preserveSpace	./vim/plugged/fzf/src/terminal.go	/^	preserveSpace bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pressed	./vim/plugged/fzf/src/terminal.go	/^	pressed            string$/;"	m	struct:fzf.Terminal	typeref:typename:string
prevDownTime	./vim/plugged/fzf/src/tui/light.go	/^	prevDownTime  time.Time$/;"	m	struct:tui.LightRenderer	typeref:typename:time.Time
prevDownTime	./vim/plugged/fzf/src/tui/tui.go	/^	prevDownTime time.Time$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:time.Time
prevLines	./vim/plugged/fzf/src/terminal.go	/^	prevLines          []itemLine$/;"	m	struct:fzf.Terminal	typeref:typename:[]itemLine
previewBox	./vim/plugged/fzf/src/terminal.go	/^	previewBox         *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
previewCancelWait	./vim/plugged/fzf/src/constants.go	/^	previewCancelWait = 500 * time.Millisecond$/;"	c	package:fzf
previewChunkDelay	./vim/plugged/fzf/src/constants.go	/^	previewChunkDelay = 100 * time.Millisecond$/;"	c	package:fzf
previewDelayed	./vim/plugged/fzf/src/constants.go	/^	previewDelayed    = 500 * time.Millisecond$/;"	c	package:fzf
previewLabel	./vim/plugged/fzf/src/terminal.go	/^	previewLabel       labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
previewLabelLen	./vim/plugged/fzf/src/terminal.go	/^	previewLabelLen    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
previewLabelOpts	./vim/plugged/fzf/src/terminal.go	/^	previewLabelOpts   labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
previewOpts	./vim/plugged/fzf/src/options.go	/^type previewOpts struct {$/;"	s	package:fzf
previewOpts	./vim/plugged/fzf/src/terminal.go	/^	previewOpts        previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
previewOptsCompare	./vim/plugged/fzf/src/options.go	/^type previewOptsCompare int$/;"	t	package:fzf	typeref:typename:int
previewOptsDifferentContentLayout	./vim/plugged/fzf/src/options.go	/^	previewOptsDifferentContentLayout$/;"	c	package:fzf
previewOptsDifferentLayout	./vim/plugged/fzf/src/options.go	/^	previewOptsDifferentLayout$/;"	c	package:fzf
previewOptsSame	./vim/plugged/fzf/src/options.go	/^	previewOptsSame previewOptsCompare = iota$/;"	c	package:fzf	typeref:type:previewOptsCompare
previewRequest	./vim/plugged/fzf/src/terminal.go	/^type previewRequest struct {$/;"	s	package:fzf
previewResult	./vim/plugged/fzf/src/terminal.go	/^type previewResult struct {$/;"	s	package:fzf
previewScrollbar	./vim/plugged/fzf/src/terminal.go	/^	previewScrollbar   string$/;"	m	struct:fzf.Terminal	typeref:typename:string
previewed	./vim/plugged/fzf/src/terminal.go	/^	previewed          previewed$/;"	m	struct:fzf.Terminal	typeref:typename:previewed
previewed	./vim/plugged/fzf/src/terminal.go	/^type previewed struct {$/;"	s	package:fzf
previewer	./vim/plugged/fzf/src/terminal.go	/^	previewer          previewer$/;"	m	struct:fzf.Terminal	typeref:typename:previewer
previewer	./vim/plugged/fzf/src/terminal.go	/^type previewer struct {$/;"	s	package:fzf
previous	./vim/plugged/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f	struct:fzf.History	typeref:typename:string
printAll	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f	struct:fzf.Terminal
printBar	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printBar(lineNum int, forceRedraw bool, barRange [2]int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
printColoredString	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printColoredString(window tui.Window, text []rune, offsets []colorOffset, col/;"	f	struct:fzf.Terminal
printFooter	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printFooter() {$/;"	f	struct:fzf.Terminal
printHeader	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f	struct:fzf.Terminal
printHeaderImpl	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printHeaderImpl(window tui.Window, borderShape tui.BorderShape, lines1 []stri/;"	f	struct:fzf.Terminal
printHighlighted	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, colBase tui.ColorPair, colMatch tui.ColorPair/;"	f	struct:fzf.Terminal	typeref:typename:int
printInfo	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f	struct:fzf.Terminal
printInfoImpl	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printInfoImpl() {$/;"	f	struct:fzf.Terminal
printItem	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, maxLine int, index int, current bool, barR/;"	f	struct:fzf.Terminal	typeref:typename:int
printLabel	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printLabel(window tui.Window, render labelPrinter, opts labelOpts, length int/;"	f	struct:fzf.Terminal
printList	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f	struct:fzf.Terminal
printPreview	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f	struct:fzf.Terminal
printPreviewDelayed	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreviewDelayed() {$/;"	f	struct:fzf.Terminal
printPrompt	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f	struct:fzf.Terminal
printQuery	./vim/plugged/fzf/src/terminal.go	/^	printQuery         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
printQueue	./vim/plugged/fzf/src/terminal.go	/^	printQueue         []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
printScript	./vim/plugged/fzf/main.go	/^func printScript(label string, content []byte) {$/;"	f	package:main
printString	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair) {$/;"	f	struct:tui.TcellWindow
printer	./vim/plugged/fzf/src/terminal.go	/^	printer            func(string)$/;"	m	struct:fzf.Terminal	typeref:typename:func(string)
printsep	./vim/plugged/fzf/src/terminal.go	/^	printsep           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
printsep	./vim/plugged/fzf/src/terminal.go	/^	printsep   string$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:string
procFun	./vim/plugged/fzf/src/pattern.go	/^	procFun       map[termType]algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:map[termType]algo.Algo
processExecution	./vim/plugged/fzf/src/terminal.go	/^func processExecution(action actionType) bool {$/;"	f	package:fzf	typeref:typename:bool
processTabs	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(string, int)
progress	./vim/plugged/fzf/src/terminal.go	/^	progress           int$/;"	m	struct:fzf.Terminal	typeref:typename:int
progressMinDuration	./vim/plugged/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c	package:fzf
prompt	./vim/plugged/fzf/src/terminal.go	/^	prompt             func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
prompt	./vim/plugged/fzf/src/terminal.go	/^	prompt     string$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:string
promptLen	./vim/plugged/fzf/src/terminal.go	/^	promptLen          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
promptLine	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) promptLine() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
promptLines	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) promptLines() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
promptString	./vim/plugged/fzf/src/terminal.go	/^	promptString       string$/;"	m	struct:fzf.Terminal	typeref:typename:string
protector	./vim/plugged/fzf/src/protector/protector.go	/^package protector$/;"	p
protector	./vim/plugged/fzf/src/protector/protector_openbsd.go	/^package protector$/;"	p
proxyScript	./vim/plugged/fzf/src/terminal.go	/^	proxyScript        string$/;"	m	struct:fzf.Terminal	typeref:typename:string
push	./vim/plugged/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
pusher	./vim/plugged/fzf/src/reader.go	/^	pusher   func([]byte) bool$/;"	m	struct:fzf.Reader	typeref:typename:func([]byte) bool
pwindow	./vim/plugged/fzf/src/terminal.go	/^	pwindow            tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
pwindowSize	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) pwindowSize() tui.TermSize {$/;"	f	struct:fzf.Terminal	typeref:typename:tui.TermSize
q	./vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :call <SID>close_pane()<cr>$/;"	m
q	./vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
query	./vim/plugged/fzf/src/terminal.go	/^	query        string$/;"	m	struct:fzf.previewRequest	typeref:typename:string
query	./vim/plugged/fzf/src/terminal.go	/^	query      string$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:string
query	./vim/plugged/fzf/src/terminal_test.go	/^	query    string$/;"	m	struct:fzf.give	typeref:typename:string
queryCache	./vim/plugged/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t	package:fzf	typeref:typename:map[string][]Result
queryCacheMax	./vim/plugged/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c	package:fzf	typeref:typename:int
queryLen	./vim/plugged/fzf/src/terminal.go	/^	queryLen           [2]int$/;"	m	struct:fzf.Terminal	typeref:typename:[2]int
queryLen	./vim/plugged/fzf/src/terminal.go	/^	queryLen  int$/;"	m	struct:fzf.itemLine	typeref:typename:int
queued	./vim/plugged/fzf/src/tui/light.go	/^	queued        strings.Builder$/;"	m	struct:tui.LightRenderer	typeref:typename:strings.Builder
quitSignal	./vim/plugged/fzf/src/terminal.go	/^type quitSignal struct {$/;"	s	package:fzf
randResult	./vim/plugged/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f	package:fzf	typeref:typename:Result
rangeEllipsis	./vim/plugged/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c	package:fzf
raw	./vim/plugged/fzf/src/terminal.go	/^	raw           bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
readChannel	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) readChannel(inputChan chan string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFile	./vim/plugged/fzf/src/terminal_test.go	/^func readFile(path string) ([]byte, error) {$/;"	f	package:fzf	typeref:typename:([]byte, error)
readFiles	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) readFiles(roots []string, opts walkerOpts, ignores []string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromCommand	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) readFromCommand(command string, environ []string, signalReady func()) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromStdin	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readerBufferSize	./vim/plugged/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c	package:fzf
readerPollIntervalMax	./vim/plugged/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalMin	./vim/plugged/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalStep	./vim/plugged/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c	package:fzf
readerSlabSize	./vim/plugged/fzf/src/constants.go	/^	readerSlabSize         = 128 * 1024$/;"	c	package:fzf
reading	./vim/plugged/fzf/src/terminal.go	/^	reading            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
regex	./vim/plugged/fzf/src/tokenizer.go	/^	regex *regexp.Regexp$/;"	m	struct:fzf.Delimiter	typeref:typename:*regexp.Regexp
release	./vim/plugged/fzf/Makefile	/^release:$/;"	t
removeFiles	./vim/plugged/fzf/src/functions.go	/^func removeFiles(files []string) {$/;"	f	package:fzf
renderBar	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) renderBar(line int, barRange [2]int) {$/;"	f	struct:fzf.Terminal
renderEmptyLine	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) renderEmptyLine(line int, barRange [2]int) {$/;"	f	struct:fzf.Terminal
renderGapLine	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) renderGapLine(line int, barRange [2]int, drawLine bool) {$/;"	f	struct:fzf.Terminal
renderPreviewArea	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewArea(unchanged bool) {$/;"	f	struct:fzf.Terminal
renderPreviewScrollbar	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewScrollbar(yoff int, barLength int, barStart int) {$/;"	f	struct:fzf.Terminal
renderPreviewSpinner	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewSpinner() {$/;"	f	struct:fzf.Terminal
renderPreviewText	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewText(height int, lines []string, lineNo int, unchanged bool) {$/;"	f	struct:fzf.Terminal
renderer	./vim/plugged/fzf/src/tui/light.go	/^	renderer      *LightRenderer$/;"	m	struct:tui.LightWindow	typeref:typename:*LightRenderer
repeat	./vim/plugged/fzf/src/tui/light.go	/^func repeat(r rune, times int) string {$/;"	f	package:tui	typeref:typename:string
replacePlaceholder	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) replacePlaceholder(template string, forcePlus bool, input string, list [3][]*/;"	f	struct:fzf.Terminal	typeref:typename:(string, []string)
replacePlaceholder	./vim/plugged/fzf/src/terminal.go	/^func replacePlaceholder(params replacePlaceholderParams) (string, []string) {$/;"	f	package:fzf	typeref:typename:(string, []string)
replacePlaceholderInInitialCommand	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) replacePlaceholderInInitialCommand(template string) (string, []string) {$/;"	f	struct:fzf.Terminal	typeref:typename:(string, []string)
replacePlaceholderParams	./vim/plugged/fzf/src/terminal.go	/^type replacePlaceholderParams struct {$/;"	s	package:fzf
replacePlaceholderTest	./vim/plugged/fzf/src/terminal_test.go	/^func replacePlaceholderTest(template string, stripAnsi bool, delimiter Delimiter, printsep strin/;"	f	package:fzf	typeref:typename:string
reqActivate	./vim/plugged/fzf/src/terminal.go	/^	reqActivate$/;"	c	package:fzf
reqBecome	./vim/plugged/fzf/src/terminal.go	/^	reqBecome$/;"	c	package:fzf
reqBox	./vim/plugged/fzf/src/matcher.go	/^	reqBox         *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
reqBox	./vim/plugged/fzf/src/terminal.go	/^	reqBox             *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
reqClose	./vim/plugged/fzf/src/terminal.go	/^	reqClose$/;"	c	package:fzf
reqFatal	./vim/plugged/fzf/src/terminal.go	/^	reqFatal$/;"	c	package:fzf
reqFooter	./vim/plugged/fzf/src/terminal.go	/^	reqFooter$/;"	c	package:fzf
reqFullRedraw	./vim/plugged/fzf/src/terminal.go	/^	reqFullRedraw$/;"	c	package:fzf
reqHeader	./vim/plugged/fzf/src/terminal.go	/^	reqHeader$/;"	c	package:fzf
reqInfo	./vim/plugged/fzf/src/terminal.go	/^	reqInfo$/;"	c	package:fzf
reqJump	./vim/plugged/fzf/src/terminal.go	/^	reqJump$/;"	c	package:fzf
reqList	./vim/plugged/fzf/src/terminal.go	/^	reqList$/;"	c	package:fzf
reqPreviewDelayed	./vim/plugged/fzf/src/terminal.go	/^	reqPreviewDelayed$/;"	c	package:fzf
reqPreviewDisplay	./vim/plugged/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c	package:fzf
reqPreviewEnqueue	./vim/plugged/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c	package:fzf
reqPreviewReady	./vim/plugged/fzf/src/terminal.go	/^	reqPreviewReady$/;"	c	package:fzf
reqPreviewRefresh	./vim/plugged/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c	package:fzf
reqPrintQuery	./vim/plugged/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c	package:fzf
reqPrompt	./vim/plugged/fzf/src/terminal.go	/^	reqPrompt$/;"	c	package:fzf
reqQuit	./vim/plugged/fzf/src/terminal.go	/^	reqQuit$/;"	c	package:fzf
reqRedraw	./vim/plugged/fzf/src/terminal.go	/^	reqRedraw$/;"	c	package:fzf
reqRedrawBorderLabel	./vim/plugged/fzf/src/terminal.go	/^	reqRedrawBorderLabel$/;"	c	package:fzf
reqRedrawFooterLabel	./vim/plugged/fzf/src/terminal.go	/^	reqRedrawFooterLabel$/;"	c	package:fzf
reqRedrawHeaderLabel	./vim/plugged/fzf/src/terminal.go	/^	reqRedrawHeaderLabel$/;"	c	package:fzf
reqRedrawInputLabel	./vim/plugged/fzf/src/terminal.go	/^	reqRedrawInputLabel$/;"	c	package:fzf
reqRedrawListLabel	./vim/plugged/fzf/src/terminal.go	/^	reqRedrawListLabel$/;"	c	package:fzf
reqRedrawPreviewLabel	./vim/plugged/fzf/src/terminal.go	/^	reqRedrawPreviewLabel$/;"	c	package:fzf
reqReinit	./vim/plugged/fzf/src/terminal.go	/^	reqReinit$/;"	c	package:fzf
reqReset	./vim/plugged/fzf/src/matcher.go	/^	reqReset$/;"	c	package:fzf
reqResize	./vim/plugged/fzf/src/terminal.go	/^	reqResize util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
reqRetry	./vim/plugged/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
resizeIfNeeded	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) resizeIfNeeded() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
resizeWindows	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows(forcePreview bool, redrawBorder bool) {$/;"	f	struct:fzf.Terminal
restart	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) restart(command commandSpec, environ []string, readyChan chan bool) {$/;"	f	struct:fzf.Reader
restoreTerminal	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) restoreTerminal() {$/;"	f	unknown:tui.LightRenderer
restoreTerminal	./vim/plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) restoreTerminal() {$/;"	f	unknown:tui.LightRenderer
result	./vim/plugged/fzf/src/terminal.go	/^	result    Result$/;"	m	struct:fzf.itemLine	typeref:typename:Result
resumableState	./vim/plugged/fzf/src/terminal.go	/^type resumableState int$/;"	t	package:fzf	typeref:typename:int
retire	./vim/plugged/fzf/src/cache.go	/^func (cc *ChunkCache) retire(chunk ...*Chunk) {$/;"	f	struct:fzf.ChunkCache
revision	./vim/plugged/fzf/main.go	/^var revision = "devel"$/;"	v	package:main
revision	./vim/plugged/fzf/src/core.go	/^type revision struct {$/;"	s	package:fzf
revision	./vim/plugged/fzf/src/item.go	/^	revision revision$/;"	m	struct:fzf.transformed	typeref:typename:revision
revision	./vim/plugged/fzf/src/matcher.go	/^	revision       revision$/;"	m	struct:fzf.Matcher	typeref:typename:revision
revision	./vim/plugged/fzf/src/matcher.go	/^	revision revision$/;"	m	struct:fzf.MatchRequest	typeref:typename:revision
revision	./vim/plugged/fzf/src/merger.go	/^	revision revision$/;"	m	struct:fzf.Merger	typeref:typename:revision
revision	./vim/plugged/fzf/src/pattern.go	/^	revision      revision$/;"	m	struct:fzf.Pattern	typeref:typename:revision
revision	./vim/plugged/fzf/src/terminal.go	/^	revision           revision$/;"	m	struct:fzf.Terminal	typeref:typename:revision
revision	./vim/plugged/fzf/src/terminal.go	/^	revision revision$/;"	m	struct:fzf.searchRequest	typeref:typename:revision
right	./vim/plugged/fzf/src/tui/tui.go	/^	right       rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
rmcup	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f	struct:tui.LightRenderer
rubout	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f	struct:fzf.Terminal
runInitProfileTests	./vim/plugged/fzf/src/options_pprof_test.go	/^var runInitProfileTests = flag.Bool("test-init-profile", false, "run init profile tests")$/;"	v	package:fzf
runProxy	./vim/plugged/fzf/src/proxy.go	/^func runProxy(commandPrefix string, cmdBuilder func(temp string, needBash bool) (*exec.Cmd, erro/;"	f	package:fzf	typeref:typename:(int, error)
runTmux	./vim/plugged/fzf/src/tmux.go	/^func runTmux(args []string, opts *Options) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
runWinpty	./vim/plugged/fzf/src/winpty.go	/^func runWinpty(_ []string, _ *Options) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
runWinpty	./vim/plugged/fzf/src/winpty_windows.go	/^func runWinpty(args []string, opts *Options) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
runeWidth	./vim/plugged/fzf/src/tui/tui.go	/^func runeWidth(r rune) int {$/;"	f	package:tui	typeref:typename:int
running	./vim/plugged/fzf/src/terminal.go	/^	running            *util.AtomicBool$/;"	m	struct:fzf.Terminal	typeref:typename:*util.AtomicBool
runningCmd	./vim/plugged/fzf/src/terminal.go	/^type runningCmd struct {$/;"	s	package:fzf
runningCmds	./vim/plugged/fzf/src/terminal.go	/^	runningCmds        *util.ConcurrentSet[*runningCmd]$/;"	m	struct:fzf.Terminal	typeref:typename:*util.ConcurrentSet
s:Bookmark	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Bookmark.AddBookmark	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
s:Bookmark.BookmarkExistsFor	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
s:Bookmark.BookmarkFor	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
s:Bookmark.BookmarkNames	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
s:Bookmark.Bookmarks	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
s:Bookmark.CacheBookmarks	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
s:Bookmark.ClearAll	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
s:Bookmark.CompareBookmarksByName	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
s:Bookmark.Edit	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
s:Bookmark.GetNodeForName	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
s:Bookmark.GetSelected	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
s:Bookmark.InvalidBookmarks	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
s:Bookmark.New	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
s:Bookmark.SortBookmarksList	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
s:Bookmark.ToRoot	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
s:Bookmark.Write	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Bookmark.activate	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
s:Bookmark.delete	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
s:Bookmark.getNode	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
s:Bookmark.mustExist	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
s:Bookmark.open	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
s:Bookmark.openInNewTab	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
s:Bookmark.setPath	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
s:Bookmark.str	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
s:Bookmark.toRoot	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
s:Bookmark.validate	./vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
s:CheckDefined	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def s:CheckDefined(colors: list<any>): list<any>$/;"	f
s:CheckDefined	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:CheckDefined(colors) abort$/;"	f
s:CreateTabTreeVCS	./vim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
s:Creator	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Creator.BufNamePrefix	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
s:Creator.CreateExploreTree	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateExploreTree(dir)$/;"	f
s:Creator.CreateMirror	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
s:Creator.CreateTabTree	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
s:Creator.CreateWindowTree	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
s:Creator.New	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
s:Creator.ToggleTabTree	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
s:Creator._bindMappings	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
s:Creator._broadcastInitEvent	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
s:Creator._createNERDTree	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
s:Creator._createTreeWin	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
s:Creator._isBufHidden	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
s:Creator._nextBufferName	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName(...)$/;"	f
s:Creator._nextBufferNumber	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
s:Creator._pathForString	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
s:Creator._removeTreeBufForTab	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
s:Creator._setCommonBufOptions	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
s:Creator._setupStatusline	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
s:Creator._tabpagevar	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
s:Creator._uniq	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:Creator.createMirror	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
s:Creator.createTabTree	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
s:Creator.createWindowTree	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
s:Creator.toggleTabTree	./vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
s:Do	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:Do(action)$/;"	f
s:Event	./vim/plugged/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event.New	./vim/plugged/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:ExcludeOther	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludeOther(nr, exclude_preview)$/;"	f
s:ExcludePaths	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludePaths(nr, exclude_paths)$/;"	f
s:FindParentVCSRoot	./vim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
s:FlagSet	./vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:FlagSet.New	./vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
s:FlagSet._flagsForScope	./vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
s:FlagSet.addFlag	./vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
s:FlagSet.clearFlags	./vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
s:FlagSet.removeFlag	./vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
s:FlagSet.renderToString	./vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:FocusGainedHandler	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:FocusGainedHandler(timer)$/;"	f
s:GetAirlineSection	./vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:GetAirlineSection()$/;"	f
s:GetHiCmd	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def s:GetHiCmd(list: list<string>): string$/;"	f
s:GetHiCmd	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:GetHiCmd(list) abort$/;"	f
s:InitCwds	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:InitCwds()$/;"	f
s:KeyMap	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:KeyMap.Add	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:KeyMap.All	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
s:KeyMap.BindAll	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
s:KeyMap.Compare	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
s:KeyMap.Create	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
s:KeyMap.FindFor	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
s:KeyMap.Invoke	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
s:KeyMap.Remove	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
s:KeyMap.bind	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
s:KeyMap.invoke	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
s:MenuController	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuController.New	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
s:MenuController._allIndexesFor	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
s:MenuController._current	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
s:MenuController._cursorDown	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
s:MenuController._cursorUp	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:MenuController._echoPrompt	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
s:MenuController._handleKeypress	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
s:MenuController._nextIndexFor	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
s:MenuController._restoreOptions	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
s:MenuController._saveOptions	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
s:MenuController._setCmdheight	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
s:MenuController.isMinimal	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
s:MenuController.showMenu	./vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
s:MenuItem	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:MenuItem.All	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
s:MenuItem.AllEnabled	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
s:MenuItem.Create	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
s:MenuItem.CreateSeparator	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
s:MenuItem.CreateSubmenu	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
s:MenuItem.enabled	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
s:MenuItem.execute	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
s:MenuItem.isSeparator	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
s:MenuItem.isSubmenu	./vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:NERDTree	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTree.AddPathFilter	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
s:NERDTree.Close	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
s:NERDTree.CursorToBookmarkTable	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
s:NERDTree.CursorToTreeWin	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin(...)$/;"	f
s:NERDTree.ExistsForBuf	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
s:NERDTree.ExistsForTab	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
s:NERDTree.ForCurrentBuf	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
s:NERDTree.ForCurrentTab	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
s:NERDTree.GetWinNum	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
s:NERDTree.IsOpen	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
s:NERDTree.MustBeOpen	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
s:NERDTree.New	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
s:NERDTree.PathFilters	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
s:NERDTree.changeRoot	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
s:NERDTree.getRoot	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
s:NERDTree.isTabTree	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
s:NERDTree.isWinTree	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
s:NERDTree.previousBuf	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
s:NERDTree.render	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:NERDTree.setPreviousBuf	./vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
s:NotEnoughBuffers	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:NotEnoughBuffers()$/;"	f
s:Notifier	./vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Notifier.AddListener	./vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
s:Notifier.GetListenersForEvent	./vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
s:Notifier.GetListenersMap	./vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
s:Notifier.NotifyListeners	./vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
s:Opener	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Opener.New	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
s:Opener._bufInWindows	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
s:Opener._checkToCloseTree	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
s:Opener._firstUsableWindow	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
s:Opener._gotoTargetWin	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
s:Opener._isWindowUsable	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
s:Opener._newSplit	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
s:Opener._newVSplit	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
s:Opener._openDirectory	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
s:Opener._openFile	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
s:Opener._previousWindow	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
s:Opener._restoreCursorPos	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
s:Opener._reuseWindow	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
s:Opener._saveCursorPos	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:Opener.open	./vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
s:Path	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Path.AbsolutePathFor	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
s:Path.CopyingSupported	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
s:Path.Create	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
s:Path.JoinPathStrings	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
s:Path.New	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
s:Path.Resolve	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
s:Path.WinToUnixPath	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:Path._escChars	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
s:Path._ignorePatternMatches	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
s:Path._splitChunks	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
s:Path._str	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
s:Path._strForCd	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
s:Path._strForEdit	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
s:Path._strForGlob	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
s:Path._strForUI	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
s:Path.addDelimiter	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
s:Path.bookmarkNames	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
s:Path.cacheDisplayString	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
s:Path.changeToDir	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
s:Path.copy	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
s:Path.copyingWillOverwrite	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
s:Path.createParentDirectories	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
s:Path.delete	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
s:Path.displayString	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
s:Path.edit	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
s:Path.equals	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
s:Path.exists	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
s:Path.extractDriveLetter	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
s:Path.getDir	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
s:Path.getLastPathComponent	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
s:Path.getParent	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
s:Path.getSortKey	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
s:Path.getSortOrderIndex	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
s:Path.ignore	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
s:Path.isAncestor	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(child)$/;"	f
s:Path.isHiddenUnder	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
s:Path.isUnder	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(parent)$/;"	f
s:Path.isUnixHiddenFile	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
s:Path.isUnixHiddenPath	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
s:Path.readInfoFromDisk	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
s:Path.refresh	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
s:Path.refreshFlags	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
s:Path.rename	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
s:Path.str	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
s:Path.strTrunk	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
s:Path.tabnr	./vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
s:RefreshTabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:RefreshTabline()$/;"	f
s:SID	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:SID() abort$/;"	f
s:SetDefault	./vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! s:SetDefault(var, val)$/;"	f
s:TYPE	./vim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'bool': type(0), 'dict': type({}), 'funcref': type(function('call')), 'string': ty/;"	v
s:TabBuffers	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:TabBuffers()$/;"	f
s:ToggleTabTreeVCS	./vim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
s:TreeDirNode	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeDirNode.AbsoluteTreeRoot	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
s:TreeDirNode.GetSelected	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
s:TreeDirNode.New	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
s:TreeDirNode._glob	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
s:TreeDirNode._initChildren	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
s:TreeDirNode._openInNewTab	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
s:TreeDirNode.activate	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
s:TreeDirNode.addChild	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
s:TreeDirNode.close	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
s:TreeDirNode.closeChildren	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
s:TreeDirNode.createChild	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
s:TreeDirNode.displayString	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
s:TreeDirNode.findNode	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
s:TreeDirNode.getCascade	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
s:TreeDirNode.getCascadeRoot	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
s:TreeDirNode.getChild	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
s:TreeDirNode.getChildByIndex	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
s:TreeDirNode.getChildCount	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
s:TreeDirNode.getChildIndex	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
s:TreeDirNode.getDirChildren	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
s:TreeDirNode.getVisibleChildCount	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
s:TreeDirNode.getVisibleChildren	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
s:TreeDirNode.hasVisibleChildren	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
s:TreeDirNode.isCascadable	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
s:TreeDirNode.open	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
s:TreeDirNode.openAlong	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
s:TreeDirNode.openExplorer	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
s:TreeDirNode.openInNewTab	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
s:TreeDirNode.openRecursively	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
s:TreeDirNode.refresh	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
s:TreeDirNode.refreshDirFlags	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
s:TreeDirNode.refreshFlags	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
s:TreeDirNode.removeChild	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
s:TreeDirNode.reveal	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
s:TreeDirNode.sortChildren	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
s:TreeDirNode.toggleOpen	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
s:TreeDirNode.transplantChild	./vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:TreeFileNode	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TreeFileNode.GetRootForTab	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
s:TreeFileNode.GetSelected	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
s:TreeFileNode.New	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
s:TreeFileNode._renderToString	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:TreeFileNode.activate	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
s:TreeFileNode.bookmark	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
s:TreeFileNode.cacheParent	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
s:TreeFileNode.clearBookmarks	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
s:TreeFileNode.copy	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
s:TreeFileNode.delete	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
s:TreeFileNode.displayString	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
s:TreeFileNode.equals	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
s:TreeFileNode.findNode	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
s:TreeFileNode.findSibling	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
s:TreeFileNode.getNerdtree	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
s:TreeFileNode.isRoot	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
s:TreeFileNode.isVisible	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
s:TreeFileNode.open	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
s:TreeFileNode.openExplorer	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
s:TreeFileNode.openInNewTab	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
s:TreeFileNode.openSplit	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
s:TreeFileNode.openVSplit	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
s:TreeFileNode.putCursorHere	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
s:TreeFileNode.refresh	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
s:TreeFileNode.refreshFlags	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
s:TreeFileNode.rename	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
s:TreeFileNode.renderToString	./vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
s:UI	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:UI.IndentWid	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
s:UI.MarkupReg	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
s:UI.New	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
s:UI.UpDirLine	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:UI._dumpHelp	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
s:UI._indentLevelFor	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
s:UI._renderBookmarks	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
s:UI._stripMarkup	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
s:UI.centerView	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
s:UI.getLineNum	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
s:UI.getPath	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
s:UI.getRootLineNum	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
s:UI.getShowBookmarks	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
s:UI.getShowFileLines	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFileLines()$/;"	f
s:UI.getShowFiles	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
s:UI.getShowHelp	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
s:UI.getShowHidden	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
s:UI.isIgnoreFilterEnabled	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
s:UI.isMinimal	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
s:UI.render	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
s:UI.renderViewSavingPosition	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
s:UI.restoreScreenState	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
s:UI.saveScreenState	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
s:UI.setShowBookmarks	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowBookmarks(value)$/;"	f
s:UI.setShowHidden	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
s:UI.toggleHelp	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
s:UI.toggleIgnoreFilter	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
s:UI.toggleShowBookmarks	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
s:UI.toggleShowFileLines	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFileLines()$/;"	f
s:UI.toggleShowFiles	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
s:UI.toggleShowHidden	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
s:UI.toggleZoom	./vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
s:accents	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:accents = {}$/;"	v
s:action_for	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
s:activateAll	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll() abort$/;"	f
s:activateBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm) abort$/;"	f
s:activateDirNode	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...) abort$/;"	f
s:activateFileNode	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node) abort$/;"	f
s:active_winnr	./vim/plugged/vim-airline/plugin/airline.vim	/^let s:active_winnr = -1$/;"	v
s:add_section	./vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^  function! s:add_section(builder, context, key)$/;"	f
s:after_dir	./.vimrc	/^        let s:after_dir = s:plugin_dir . '\/after'$/;"	v
s:ag_handler	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(name, lines)$/;"	f
s:ag_to_qf	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line)$/;"	f
s:airline_a_commandline	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_commandline = [ '#00005f' , '#00d700' , 17  , 40 ]$/;"	v
s:airline_a_inactive	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_inactive = [ '#4e4e4e' , '#1c1c1c' , 239 , 234 , '' ]$/;"	v
s:airline_a_insert	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_insert = [ '#00005f' , '#00dfff' , 17  , 45  ]$/;"	v
s:airline_a_normal	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_normal   = [ '#00005f' , '#dfff00' , 17  , 190 ]$/;"	v
s:airline_a_visual	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_visual = [ '#000000' , '#ffaf00' , 232 , 214 ]$/;"	v
s:airline_ale_count	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_count(cnt, symbol)$/;"	f
s:airline_ale_get_line_number	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_get_line_number(cnt, type) abort$/;"	f
s:airline_b_commandline	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_commandline = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_inactive	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_inactive = [ '#4e4e4e' , '#262626' , 239 , 235 , '' ]$/;"	v
s:airline_b_insert	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_insert = [ '#ffffff' , '#005fff' , 255 , 27  ]$/;"	v
s:airline_b_normal	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_normal   = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_visual	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_visual = [ '#000000' , '#ff5f00' , 232 , 202 ]$/;"	v
s:airline_c_commandline	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_commandline = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_inactive	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_inactive = [ '#4e4e4e' , '#303030' , 239 , 236 , '' ]$/;"	v
s:airline_c_insert	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_insert = [ '#ffffff' , '#000080' , 15  , 17  ]$/;"	v
s:airline_c_normal	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_normal   = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_visual	./vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_visual = [ '#ffffff' , '#5f0000' , 15  , 52  ]$/;"	v
s:airline_extensions	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_extensions()$/;"	f
s:airline_initialized	./vim/plugged/vim-airline/plugin/airline.vim	/^let s:airline_initialized = 0$/;"	v
s:airline_languageclient_count	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_count(cnt, symbol)$/;"	f
s:airline_languageclient_get_line_number	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_get_line_number(type) abort$/;"	f
s:airline_lsp_count	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! s:airline_lsp_count(cnt, symbol) abort$/;"	f
s:airline_lsp_get_line_number	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! s:airline_lsp_get_line_number(cnt, type) abort$/;"	f
s:airline_nvimlsp_count	./vim/plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! s:airline_nvimlsp_count(cnt, symbol) abort$/;"	f
s:airline_nvimlsp_get_line_number	./vim/plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! s:airline_nvimlsp_get_line_number(cnt, type) abort$/;"	f
s:airline_refresh	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_refresh(...)$/;"	f
s:airline_tagbar_last_lookup_time	./vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_time = 0$/;"	v
s:airline_tagbar_last_lookup_val	./vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_val = ''$/;"	v
s:airline_theme	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_theme(...)$/;"	f
s:airline_toggle	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_toggle()$/;"	f
s:ale_refresh	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:ale_refresh()$/;"	f
s:align_lists	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
s:align_pairs	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
s:ansi	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:append_ul	./vim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:ask	./vim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	./vim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	./vim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	./vim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:autocmd_handler	./vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! s:autocmd_handler()$/;"	f
s:bang	./vim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	./vim/autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_dir	./vim/plugged/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:base_spec	./vim/autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:bash	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bash()$/;"	f
s:basic16	./vim/plugged/vim-airline/autoload/airline/msdos.vim	/^let s:basic16 = [$/;"	v
s:batchfile	./vim/autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
s:bin	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:border_opt	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:border_opt(window)$/;"	f
s:btags_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
s:btags_source	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
s:buf_min_count	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:buf_min_count = get(g:, 'airline#extensions#tabline#buffer_min_count', 0)$/;"	v
s:buffer_line_handler	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
s:buffer_lines	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
s:buflisted	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
s:bufopen	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
s:build_command	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:build_command(color)$/;"	f
s:build_sections	./vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:build_sections(builder, context, keys)$/;"	f
s:bullet_for	./vim/autoload/plug.vim	/^function! s:bullet_for(job, ...)$/;"	f
s:calc_size	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
s:callback	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
s:chCwd	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node) abort$/;"	f
s:chRoot	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node) abort$/;"	f
s:changes_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:changes_sink(lines)$/;"	f
s:check_defined	./vim/plugged/vim-airline/autoload/airline/init.vim	/^function! s:check_defined(variable, default)$/;"	f
s:check_defined_section	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:check_defined_section(name)$/;"	f
s:check_mixed_indent	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent()$/;"	f
s:check_mixed_indent_file	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent_file()$/;"	f
s:check_requirements	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:check_requirements()$/;"	f
s:check_ruby	./vim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checked	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:checked = 0$/;"	v
s:checked	./vim/plugged/fzf/plugin/fzf.vim	/^let s:checked = {}$/;"	v
s:checkout	./vim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:checkout_command	./vim/autoload/plug.vim	/^function! s:checkout_command(spec)$/;"	f
s:chomp	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
s:chsh	./vim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	./vim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:clean_jobs	./vim/plugged/vim-airline/autoload/airline/async.vim	/^let s:clean_jobs     = {}$/;"	v
s:closeChildren	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node) abort$/;"	f
s:closeCurrentDir	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node) abort$/;"	f
s:closeTreeWindow	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow() abort$/;"	f
s:close_pane	./vim/autoload/plug.vim	/^function! s:close_pane()$/;"	f
s:cmd	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
s:cmd_history_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
s:coc_git_enabled	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:coc_git_enabled() abort$/;"	f
s:collect	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
s:color_template	./vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^let s:color_template = get(g:, 'airline#extensions#ctrlp#color_template', 'insert')$/;"	v
s:color_template	./vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:color_template = get(g:, 'airline#extensions#promptline#color_template', 'normal')$/;"	v
s:color_template	./vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:color_template = get(g:, 'airline#extensions#tmuxline#color_template', 'normal')$/;"	v
s:colors_exit	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:colors_exit(code)$/;"	f
s:column_display	./vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^let s:column_display = get(g:, 'airline#extensions#csv#column_display', 'Number')$/;"	v
s:command_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:commit_mode	./vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^let s:commit_mode = {'ST': 'STAGING', 'CC': 'COMMIT', 'CA': 'AMEND'}$/;"	v
s:commits	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(range, buffer_local, args)$/;"	f
s:commits_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
s:common_sink	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
s:compare_binary_versions	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:compare_binary_versions(a, b)$/;"	f
s:compare_git_uri	./vim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_versions	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:compare_versions(a, b)$/;"	f
s:complete_insert	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
s:complete_trigger	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
s:conf	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:conf(name, default)$/;"	f
s:conf	./vim/plugged/fzf.vim/plugin/fzf.vim	/^function! s:conf(name, default)$/;"	f
s:config_fugitive_branch	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:config_fugitive_branch() abort$/;"	f
s:config_gina_branch	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:config_gina_branch() abort$/;"	f
s:conflict_marker	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:conflict_marker()$/;"	f
s:contexts	./vim/plugged/vim-airline/autoload/airline.vim	/^let s:contexts = {}$/;"	v
s:core_funcrefs	./vim/plugged/vim-airline/autoload/airline.vim	/^let s:core_funcrefs = [$/;"	v
s:cpo_save	./vim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	./vim/plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	./vim/plugged/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:create	./vim/plugged/vim-airline/autoload/airline/section.vim	/^function! s:create(parts, append)$/;"	f
s:create_popup	./vim/plugged/fzf/plugin/fzf.vim	/^  function s:create_popup(opts) abort$/;"	f
s:create_popup	./vim/plugged/fzf/plugin/fzf.vim	/^  function! s:create_popup(opts) abort$/;"	f
s:csi	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
s:ctrlspace	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:ctrlspace = get(g:, 'CtrlSpaceLoaded', 0)$/;"	v
s:current_bufnr	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_bufnr = -1$/;"	v
s:current_modified	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_modified = 0$/;"	v
s:current_tabcnt	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:current_tabcnt = -1$/;"	v
s:current_tabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabnr	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabnr = -1$/;"	v
s:current_visible_buffers	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_visible_buffers = []$/;"	v
s:customOpenBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node) abort$/;"	f
s:customOpenDir	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node) abort$/;"	f
s:customOpenFile	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node) abort$/;"	f
s:decimal_group	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ''$/;"	v
s:decimal_group	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = '.'$/;"	v
s:decimal_group	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = ''$/;"	v
s:decimal_group	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = '.'$/;"	v
s:default_action	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	./vim/plugged/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_checks	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:default_checks = ['indent', 'trailing', 'mixed-indent-file', 'conflicts']$/;"	v
s:default_layout	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:default_layout()$/;"	f
s:defaults	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
s:define_commands	./vim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:defs	./vim/plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
s:delete	./vim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:deleteBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark) abort$/;"	f
s:delete_op	./vim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:denite_ver	./vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^let s:denite_ver = (exists('*denite#get_status_mode') ? 2 : 3)$/;"	v
s:diagnostics	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:diagnostics = {}$/;"	v
s:diagnostics_for_buffer	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:diagnostics_for_buffer()$/;"	f
s:diff	./vim/autoload/plug.vim	/^function! s:diff()$/;"	f
s:dirArrows	./vim/plugged/nerdtree/syntax/nerdtree.vim	/^    let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowEx/;"	v
s:dirpath	./vim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:disable_credential_helper	./vim/autoload/plug.vim	/^function! s:disable_credential_helper()$/;"	f
s:displayHelp	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp() abort$/;"	f
s:display_git_branch	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_git_branch()$/;"	f
s:display_hg_branch	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_hg_branch()$/;"	f
s:do	./vim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:doautocmd	./vim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	./vim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:dopopd	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
s:enabled	./vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:enabled = get(g:, 'airline#extensions#localsearch#enabled', 1)$/;"	v
s:enabled	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:enabled = get(g:, 'airline#extensions#whitespace#enabled', 1)$/;"	v
s:enc_to_cp	./vim/plugged/fzf/plugin/fzf.vim	/^  function! s:enc_to_cp(str)$/;"	f
s:err	./vim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:error	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
s:error_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:error_symbol = get(g:, 'airline#extensions#languageclient#error_symbol', 'E:')$/;"	v
s:error_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:error_symbol = get(g:, 'airline#extensions#neomake#error_symbol', 'E:')$/;"	v
s:error_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:error_symbol = get(g:, 'airline#extensions#syntastic#error_symbol', 'E:')$/;"	v
s:error_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^let s:error_symbol = get(g:, 'airline#extensions#vim9lsp#error_symbol', 'E:')$/;"	v
s:error_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:error_symbol = get(g:, 'airline#extensions#ycm#error_symbol', 'E:')$/;"	v
s:esc	./vim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escape	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
s:escape	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
s:escape_for_bash	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape_for_bash(path)$/;"	f
s:escrtp	./vim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:eval	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
s:evaluate_opts	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
s:evaluate_tabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:evaluate_tabline(tabline)$/;"	f
s:excmds	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
s:exec_separator	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def s:exec_separator(dict: dict<any>, from_arg: string, to_arg: string, inverse: bool, suffix:/;"	f
s:exec_separator	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:exec_separator(dict, from, to, inverse, suffix) abort$/;"	f
s:execute	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
s:execute_silent	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:execute_silent(cmd)$/;"	f
s:execute_term	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
s:execute_tmux	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
s:exit_handler	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:exit_handler(dict, code, command, ...)$/;"	f
s:ext	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext = {}$/;"	v
s:ext	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext._theme_funcrefs = []$/;"	v
s:ext.add_inactive_statusline_func	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_inactive_statusline_func(name) dict$/;"	f
s:ext.add_statusline_func	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_func(name) dict$/;"	f
s:ext.add_statusline_funcref	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_funcref(function) dict$/;"	f
s:ext.add_theme_func	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_theme_func(name) dict$/;"	f
s:extend	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
s:extend_opts	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:extract_name	./vim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:extract_option	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:extract_option(opts, name)$/;"	f
s:file_options	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
s:file_source	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
s:file_split_prefix	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
s:filetype_overrides	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = [ get(g:, 'NERDTreeStatusline', 'NERD'), '' ]$/;"	v
s:filetype_overrides	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = ['NERDTree', '']$/;"	v
s:filetype_overrides	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_overrides = {$/;"	v
s:filetype_regex_overrides	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_regex_overrides = {}$/;"	v
s:fill_quickfix	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(name, list)$/;"	f
s:findAndRevealPath	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr) abort$/;"	f
s:find_name	./vim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_open_window	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
s:finish	./vim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	./vim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_line	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
s:flags	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^let s:flags = {$/;"	v
s:flags_noregion	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^  let s:flags_noregion[split(s:key, '_')[0]] = s:flags[s:key]$/;"	v
s:flags_noregion	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^let s:flags_noregion = {}$/;"	v
s:fmt_excmd	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fname_prefix	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
s:focusgained_ignore_time	./vim/plugged/vim-airline/autoload/airline/util.vim	/^let s:focusgained_ignore_time = 0$/;"	v
s:format_change	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_change(bufnr, offset, item)$/;"	f
s:format_change_offset	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_change_offset(current, index, cursor)$/;"	f
s:format_cmd	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_git_log	./vim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_mark	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
s:format_message	./vim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_name	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
s:format_win	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
s:format_wordcount	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      function! s:format_wordcount(_)$/;"	f
s:format_wordcount	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:format_wordcount(wordcount)$/;"	f
s:formatter	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      let s:formatter = 'default'$/;"	v
s:formatter	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:formatter = get(g:, 'airline#extensions#wordcount#formatter', 'default')$/;"	v
s:function	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
s:function	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
s:fzf	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:fzf_binary	./.vimrc	/^  let s:fzf_binary = s:vim_bin_path . '\/fzf'$/;"	v
s:fzf_call	./vim/plugged/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
s:fzf_expand	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
s:fzf_fnamemodify	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
s:fzf_getcwd	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
s:fzf_go	./vim/plugged/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_restore_colors	./vim/plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
s:fzf_tempname	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
s:fzf_tmux	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
s:fzf_tmux	./vim/plugged/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:fzf_vim_term	./vim/plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
s:get_accented_line	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_accented_line(self, group, contents)$/;"	f
s:get_airline_themes	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:get_airline_themes(a, l, p)$/;"	f
s:get_array	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def s:get_array(guifg: string, guibg: string, ctermfg: string, ctermbg: string, opts: list<str/;"	f
s:get_array	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:get_array(guifg, guibg, ctermfg, ctermbg, opts) abort$/;"	f
s:get_color	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color_map	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_color_map()$/;"	f
s:get_counts	./vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! s:get_counts()$/;"	f
s:get_diagnostics	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:get_diagnostics()$/;"	f
s:get_git_root	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root(dir)$/;"	f
s:get_hunks_changes	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_changes() abort$/;"	f
s:get_hunks_coc	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_coc() abort$/;"	f
s:get_hunks_empty	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_empty() abort$/;"	f
s:get_hunks_gitgutter	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_gitgutter() abort$/;"	f
s:get_hunks_gitsigns	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_gitsigns() abort$/;"	f
s:get_hunks_signify	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_signify() abort$/;"	f
s:get_mode	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_mode()$/;"	f
s:get_number	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:get_number(index)$/;"	f
s:get_section	./vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:get_section(winnr, key, ...)$/;"	f
s:get_separator	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_separator(self, prev_group, group, side)$/;"	f
s:get_separator_change	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change(new_group, old_group, end_group, sep_size, alt_sep_size)$/;"	f
s:get_separator_change_with_end	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change_with_end(new_group, old_group, new_end_group, old_end_group, se/;"	f
s:get_syn	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def s:get_syn(group: string, what: string, mode: string): string$/;"	f
s:get_syn	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:get_syn(group, what, mode) abort$/;"	f
s:get_transitioned_separator	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_transitioned_separator(self, prev_group, group, side)$/;"	f
s:get_version	./vim/plugged/fzf/plugin/fzf.vim	/^function s:get_version(bin)$/;"	f
s:get_wordcount	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^  function! s:get_wordcount(visual_mode_active)$/;"	f
s:getpos	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
s:git_dir	./vim/autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
s:git_local_branch	./vim/autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
s:git_origin_branch	./vim/autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
s:git_origin_url	./vim/autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
s:git_revision	./vim/autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
s:git_validate	./vim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	./vim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:git_version_requirement	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:git_version_requirement(...)$/;"	f
s:given_range	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:given_range(line1, line2)$/;"	f
s:glob	./vim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	./vim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:grep_multi_line	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:grep_multi_line(opts)$/;"	f
s:group_not_done	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def s:group_not_done(list: list<string>, name: string): bool$/;"	f
s:group_not_done	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:group_not_done(list, name) abort$/;"	f
s:gui2cui	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def s:gui2cui(rgb: string, fallback: string): string$/;"	f
s:gui2cui	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:gui2cui(rgb, fallback) abort$/;"	f
s:handleLeftClick	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick() abort$/;"	f
s:handleMiddleMouse	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse() abort$/;"	f
s:handle_ambidouble	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:handle_ambidouble(dict)$/;"	f
s:has_any	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
s:has_percent_eval	./vim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^let s:has_percent_eval = v:version > 802 || (v:version == 802 && has("patch2854"))$/;"	v
s:has_strcharpart	./vim/plugged/vim-airline/autoload/airline/util.vim	/^let s:has_strcharpart = exists('*strcharpart')$/;"	v
s:has_strchars	./vim/plugged/vim-airline/autoload/airline/util.vim	/^let s:has_strchars = exists('*strchars')$/;"	v
s:hash_match	./vim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:head_format	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:head_format = get(g:, 'airline#extensions#branch#format', 0)$/;"	v
s:helptag_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
s:highlight_groups	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
s:highlight_groups	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
s:highlight_keys	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
s:history	./vim/plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, extra, bang)$/;"	f
s:history_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
s:history_source	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
s:hl_group_exists	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  def s:hl_group_exists(group: string): bool$/;"	f
s:hl_group_exists	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:hl_group_exists(group) abort$/;"	f
s:hl_groups	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:hl_groups = {}$/;"	v
s:hunk_symbols	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:hunk_symbols = get(g:, 'airline#extensions#hunks#hunk_symbols', ['+', '~', '-'])$/;"	v
s:iTerm_escape_template	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:iTerm_escape_template = '\\033]Pl%s\\033\\\\'$/;"	v
s:ignore_time	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^let s:ignore_time = 0$/;"	v
s:infer_properties	./vim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:init	./vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:init=0$/;"	v
s:init	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:init()$/;"	f
s:initCustomOpenArgs	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs() abort$/;"	f
s:init_buffer	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:init_buffer()$/;"	f
s:inject_snippet	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
s:inputPrompt	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
s:install	./vim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:invoke_funcrefs	./vim/plugged/vim-airline/autoload/airline.vim	/^function! s:invoke_funcrefs(context, funcrefs)$/;"	f
s:is_AppleTerminal	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_AppleTerminal = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'Apple_Terminal'$/;"	v
s:is_excluded_window	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:is_excluded_window()$/;"	f
s:is_good	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_good = !has('gui_running') && !s:is_win && !s:is_AppleTerminal$/;"	v
s:is_iTerm	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_iTerm = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'iTerm.app'$/;"	v
s:is_local_plug	./vim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	./vim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_powershell	./vim/autoload/plug.vim	/^function! s:is_powershell(shell)$/;"	f
s:is_preview_window_open	./vim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_updated	./vim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	./vim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	./vim/plugged/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	./vim/plugged/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win32term	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:is_win32term = (has('win32') || has('win64')) &&$/;"	v
s:is_wsl_bash	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_wsl_bash = s:is_win && (exepath('bash') =~? 'Windows[\/\\\\]system32[\/\\\\]bash.exe$')$/;"	v
s:isabsolute	./vim/autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
s:job_abort	./vim/autoload/plug.vim	/^function! s:job_abort(cancel)$/;"	f
s:job_cb	./vim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	./vim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	./vim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:jump	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
s:jumpToBookmarks	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToBookmarks() abort$/;"	f
s:jumpToChild	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last) abort$/;"	f
s:jumpToFirstChild	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node) abort$/;"	f
s:jumpToLastChild	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node) abort$/;"	f
s:jumpToNextSibling	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node) abort$/;"	f
s:jumpToParent	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node) abort$/;"	f
s:jumpToPrevSibling	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node) abort$/;"	f
s:jumpToRoot	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot() abort$/;"	f
s:jumpToSibling	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward) abort$/;"	f
s:jump_format	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump_format(line)$/;"	f
s:jump_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump_sink(lines)$/;"	f
s:jump_to_tab	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:jump_to_tab(offset)$/;"	f
s:keyMaps	./vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:key_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
s:languageclient_refresh	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:languageclient_refresh()$/;"	f
s:last_mode	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:last_mode = ''$/;"	v
s:last_non_empty_line	./vim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:lastline	./vim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:launcher	./vim/plugged/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	./vim/plugged/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layout	./vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:layout = get(g:, 'airline#extensions#default#layout', [$/;"	v
s:layout_keys	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	./vim/plugged/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'tmux', 'up', 'down', 'left', 'right']$/;"	v
s:lazy	./vim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:legacy_airline_ale_get_line_number	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:legacy_airline_ale_get_line_number(cnt, type) abort$/;"	f
s:line_handler	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
s:lines	./vim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:load_plugin	./vim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	./vim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	./vim/plugged/vim-airline/autoload/airline/init.vim	/^let s:loaded = 0$/;"	v
s:loaded_ext	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:loaded_ext = []$/;"	v
s:loaded_names	./vim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	./vim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	./vim/autoload/plug.vim	/^  function! s:lod_cmd(cmd, bang, l1, l2, args, mods, names)$/;"	f
s:lod_cmd	./vim/autoload/plug.vim	/^  function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	./vim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	./vim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	./vim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	./vim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	./vim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	./vim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:lsp_progress	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^let s:lsp_progress = []$/;"	v
s:mac_gui	./vim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:map_keys	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:map_keys()$/;"	f
s:mapkeys	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        fun! s:mapkeys(keys, plug)$/;"	f
s:mark_aborted	./vim/autoload/plug.vim	/^function! s:mark_aborted(name, message)$/;"	f
s:mark_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
s:me	./vim/autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:merge_command	./vim/autoload/plug.vim	/^function! s:merge_command(spec)$/;"	f
s:merge_opts	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:min_version	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:min_version = '0.56.0'$/;"	v
s:min_version	./vim/plugged/fzf/plugin/fzf.vim	/^let s:min_version = '0.53.0'$/;"	v
s:mq_jobs	./vim/plugged/vim-airline/autoload/airline/async.vim	/^let s:mq_jobs        = {}$/;"	v
s:names	./vim/autoload/plug.vim	/^function! s:names(...)$/;"	f
s:names	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:names = {'0': 'index', '1': 'orig', '2':'fetch', '3':'merge'}$/;"	v
s:need_cmd_window	./vim/plugged/fzf/plugin/fzf.vim	/^let s:need_cmd_window = has('win32unix') && $TERM_PROGRAM ==# 'mintty' && s:compare_versions($TE/;"	v
s:neoterm_id	./vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:neoterm_id(bufnr) abort$/;"	f
s:new_airline_ale_get_line_number	./vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:new_airline_ale_get_line_number(cnt, type) abort$/;"	f
s:new_window	./vim/autoload/plug.vim	/^function! s:new_window()$/;"	f
s:nomodeline	./vim/plugged/vim-airline/autoload/airline/util.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has("patch438"))) ? '<nomodeline>' :/;"	v
s:non_zero_only	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:non_zero_only = get(g:, 'airline#extensions#hunks#non_zero_only', 0)$/;"	v
s:number_map	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = &encoding == 'utf-8'$/;"	v
s:number_map	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = {$/;"	v
s:nvim	./vim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	./vim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:nvim_mq_job_handler	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_mq_job_handler(job_id, data, event) dict$/;"	f
s:nvim_output_handler	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_output_handler(job_id, data, event) dict$/;"	f
s:nvim_po_job_handler	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_po_job_handler(job_id, data, event) dict$/;"	f
s:nvim_untracked_job_handler	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_untracked_job_handler(job_id, data, event) dict$/;"	f
s:old_cpo	./vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpoptions$/;"	v
s:on_colorscheme_changed	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_colorscheme_changed()$/;"	f
s:on_cursor_moved	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_cursor_moved()$/;"	f
s:on_exit_clean	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:on_exit_clean(...) dict abort$/;"	f
s:on_exit_mq	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_mq(channel) dict abort$/;"	f
s:on_exit_po	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_po(channel) dict abort$/;"	f
s:on_exit_untracked	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_untracked(channel) dict abort$/;"	f
s:on_focus_gained	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_focus_gained()$/;"	f
s:on_stdout	./vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_stdout(channel, msg) dict abort$/;"	f
s:on_window_changed	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_window_changed(event)$/;"	f
s:open	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(target)$/;"	f
s:open	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
s:openExplorer	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node) abort$/;"	f
s:openHSplit	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target) abort$/;"	f
s:openHSplitBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplitBookmark(bm) abort$/;"	f
s:openInNewTab	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target) abort$/;"	f
s:openInNewTabSilent	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target) abort$/;"	f
s:openNodeRecursively	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node) abort$/;"	f
s:openVSplit	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target) abort$/;"	f
s:openVSplitBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplitBookmark(bm) abort$/;"	f
s:osDefaultCaseSensitiveFS	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^    let s:osDefaultCaseSensitiveFS = 0$/;"	v
s:osDefaultCaseSensitiveFS	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^    let s:osDefaultCaseSensitiveFS = 1$/;"	v
s:parse_hunk_status_decorated	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:parse_hunk_status_decorated(hunks) abort$/;"	f
s:parse_hunk_status_dict	./vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:parse_hunk_status_dict(hunks) abort$/;"	f
s:parse_options	./vim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parts	./vim/plugged/vim-airline/autoload/airline/parts.vim	/^let s:parts = {}$/;"	v
s:path	./vim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:pluck	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
s:plug_buf	./vim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_call	./vim/autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
s:plug_expand	./vim/autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
s:plug_fnamemodify	./vim/autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
s:plug_getcwd	./vim/autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
s:plug_roots	./.vimrc	/^let s:plug_roots = [$/;"	v
s:plug_src	./vim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	./vim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tempname	./vim/autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
s:plug_window_exists	./vim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:po_jobs	./vim/plugged/vim-airline/autoload/airline/async.vim	/^let s:po_jobs        = {}$/;"	v
s:po_output	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:po_output(buf, file)$/;"	f
s:popup	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:popup(opts) abort$/;"	f
s:popup_support	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:popup_support()$/;"	f
s:prepare	./vim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prepend_opts	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:present	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
s:previewBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark) abort$/;"	f
s:previewNodeCurrent	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node) abort$/;"	f
s:previewNodeHSplit	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node) abort$/;"	f
s:previewNodeHSplitBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplitBookmark(bookmark) abort$/;"	f
s:previewNodeVSplit	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node) abort$/;"	f
s:previewNodeVSplitBookmark	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplitBookmark(bookmark) abort$/;"	f
s:preview_commit	./vim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:progress_bar	./vim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	./vim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:promptToDelBuffer	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
s:prompt_snapshot_file	./vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:prompt_snapshot_file = get(g:, 'airline#extensions#promptline#snapshot_file', '')$/;"	v
s:prototype	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype.overflow_group = 'airline_tab'$/;"	v
s:prototype.add_raw	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_raw(text) dict$/;"	f
s:prototype.add_section	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section(group, contents) dict$/;"	f
s:prototype.add_section_spaced	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section_spaced(group, contents) dict$/;"	f
s:prototype.build	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.build() dict$/;"	f
s:prototype.build	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.build() dict$/;"	f
s:prototype.get_position	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.get_position() dict$/;"	f
s:prototype.insert_raw	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_raw(text, position) dict$/;"	f
s:prototype.insert_section	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_section(group, contents, position) dict$/;"	f
s:prototype.insert_titles	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.insert_titles(current, first, last) dict$/;"	f
s:prototype.split	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.split(...) dict$/;"	f
s:prototype.try_insert_title	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.try_insert_title(index, group, pos, sep_size, force) dict$/;"	f
s:pushd	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
s:rand	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:rand(max) abort$/;"	f
s:random_theme	./vim/plugged/vim-airline/plugin/airline.vim	/^function! s:random_theme() abort$/;"	f
s:reap	./vim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:record_diagnostics	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:record_diagnostics(state)$/;"	f
s:reduce_line	./vim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
s:refreshCurrent	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node) abort$/;"	f
s:refreshRoot	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot() abort$/;"	f
s:regress_bar	./vim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reload_plugins	./vim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remove_layout	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
s:remove_rtp	./vim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	./vim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:renameBuffer	./vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
s:reorg_rtp	./vim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:repo_root	./.vimrc	/^let s:repo_root = expand('<sfile>:p:h')$/;"	v
s:reset_untracked_cache	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:reset_untracked_cache(shellcmdpost)$/;"	f
s:retry	./vim/autoload/plug.vim	/^function! s:retry()$/;"	f
s:reuseWin	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
s:reverse_list	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:reverse_list(opts)$/;"	f
s:revert	./vim/autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	./vim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rootNERDTreePath	./vim/plugged/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:rstrip	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:rstrip(str)$/;"	f
s:rtp	./vim/autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s:save_cpo	./vim/plugged/vim-airline/plugin/airline.vim	/^let s:save_cpo = &cpo$/;"	v
s:script_path	./vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:script_path = tolower(resolve(expand('<sfile>:p:h')))$/;"	v
s:search_history_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
s:search_term	./vim/plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! s:search_term()$/;"	f
s:section	./vim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:section_is_empty	./vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:section_is_empty(self, content)$/;"	f
s:section_truncate_width	./vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_truncate_width = get(g:, 'airline#extensions#default#section_truncate_width', {$/;"	v
s:section_use_groups	./vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_use_groups     = get(g:, 'airline#extensions#default#section_use_groupitems', 1)$/;"	v
s:sections	./vim/plugged/vim-airline/autoload/airline.vim	/^let s:sections = ['a','b','c','gutter','x','y','z', 'error', 'warning']$/;"	v
s:select_tab	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:select_tab(buf_index)$/;"	f
s:separators	./vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:separators = {}$/;"	v
s:set_clean_jobs_variable	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_jobs_variable(vcs, file, id)$/;"	f
s:set_clean_variables	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_variables(file, vcs, val)$/;"	f
s:set_cursor_color_for	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:set_cursor_color_for(mode)$/;"	f
s:severity_error	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_error = 1$/;"	v
s:severity_hint	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_hint = 4$/;"	v
s:severity_info	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_info = 3$/;"	v
s:severity_warning	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_warning = 2$/;"	v
s:sh_autocmd_handler	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:sh_autocmd_handler()$/;"	f
s:sh_autocmd_handler	./vim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! s:sh_autocmd_handler()$/;"	f
s:sha1size	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:sha1size = get(g:, 'airline#extensions#branch#sha1_len', 7)$/;"	v
s:shellesc_cmd	./vim/autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
s:shellesc_cmd	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shellesc_ps1	./vim/autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
s:shellesc_sh	./vim/autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
s:shortpath	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
s:shortpath	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
s:showMenu	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node) abort$/;"	f
s:show_buffers	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)$/;"	v
s:show_coc_status	./vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^let s:show_coc_status = get(g:, 'airline#extensions#coc#show_coc_status', 1)$/;"	v
s:show_line_numbers	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:show_line_numbers = get(g:, 'airline#extensions#languageclient#show_line_numbers', 1)$/;"	v
s:show_message	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:show_message = get(g:, 'airline#extensions#whitespace#show_message', 1)$/;"	v
s:show_tabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! s:show_tabline(min_count, total_count)$/;"	f
s:skip_check_ft	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:skip_check_ft = {'make': ['indent', 'mixed-indent-file'],$/;"	v
s:skip_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^let s:skip_symbol = '…'$/;"	v
s:snapshot	./vim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:sort_buffers	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
s:source	./vim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:spawn	./vim/autoload/plug.vim	/^function! s:spawn(name, spec, queue, opts)$/;"	f
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/dirvish.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/section.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	./vim/plugged/vim-airline/autoload/airline/util.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:split	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
s:split_rtp	./vim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:splittable	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
s:status	./vim/autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	./vim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	./vim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:strip	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
s:switch_in	./vim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	./vim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:symbol	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:symbol = get(g:, 'airline#extensions#whitespace#symbol', g:airline_symbols.whitespace)$/;"	v
s:syntax	./vim/autoload/plug.vim	/^function! s:syntax()$/;"	f
s:system	./vim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	./vim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tab	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:tab = "\\t"$/;"	v
s:tab_min_count	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:tab_min_count = get(g:, 'airline#extensions#tabline#tab_min_count', 0)$/;"	v
s:tabline_evaluated_length	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:tabline_evaluated_length(tabline)$/;"	f
s:taboo	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:taboo = get(g:, 'airline#extensions#taboo#enabled', 1) && get(g:, 'loaded_taboo', 0)$/;"	v
s:tabws	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:tabws = get(g:, 'tabws_loaded', 0)$/;"	v
s:tags_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
s:tail	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path_improved.vim	/^function! s:tail(bufnr) abort$/;"	f
s:tails	./vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path_improved.vim	/^function! s:tails(self, buffers) abort$/;"	f
s:term_marker	./vim/plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	./vim/plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:termname	./vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:termname(bufnr) abort$/;"	f
s:tick	./vim/autoload/plug.vim	/^function! s:tick()$/;"	f
s:timer	./vim/plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^let s:timer = 0$/;"	v
s:tmux_enabled	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
s:tmuxline_snapshot_file	./vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:tmuxline_snapshot_file = get(g:, 'airline#extensions#tmuxline#snapshot_file', '')$/;"	v
s:to_a	./vim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	./vim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:toggleIgnoreFilter	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter() abort$/;"	f
s:toggleShowBookmarks	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks() abort$/;"	f
s:toggleShowFileLines	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFileLines() abort$/;"	f
s:toggleShowFiles	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles() abort$/;"	f
s:toggleShowHidden	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden() abort$/;"	f
s:toggleZoom	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom() abort$/;"	f
s:toggle_off	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def s:toggle_off(): void$/;"	f
s:toggle_off	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! s:toggle_off()$/;"	f
s:toggle_on	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def s:toggle_on(): void$/;"	f
s:toggle_on	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! s:toggle_on()$/;"	f
s:tree_up_dir_line	./vim/plugged/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:triggers	./vim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	./vim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:untracked_jobs	./vim/plugged/vim-airline/autoload/airline/async.vim	/^let s:untracked_jobs = {}$/;"	v
s:untracked_output	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:untracked_output(dict, buf)$/;"	f
s:upDirCurrentRootClosed	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed() abort$/;"	f
s:upDirCurrentRootOpen	./vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen() abort$/;"	f
s:update	./vim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_branch	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_branch()$/;"	f
s:update_finish	./vim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_git_branch	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_git_branch()$/;"	f
s:update_hg_branch	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_hg_branch()$/;"	f
s:update_impl	./vim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_python	./vim/autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_ruby	./vim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_tabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  def s:update_tabline(forceit: number): void$/;"	f
s:update_tabline	./vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! s:update_tabline(forceit)$/;"	f
s:update_untracked	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_untracked()$/;"	f
s:update_vim	./vim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:update_wordcount	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:update_wordcount(force_update)$/;"	f
s:upgrade	./vim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	./vim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:use_sh	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
s:valid_dir	./vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:valid_dir(dir)$/;"	f
s:validate_layout	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
s:vcs_config	./vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:vcs_config = {$/;"	v
s:version_requirement	./vim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:version_requirement	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:version_requirement(val, min)$/;"	f
s:versions	./vim/plugged/fzf/plugin/fzf.vim	/^let s:versions = {}$/;"	v
s:vim8	./vim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_bin_path	./.vimrc	/^    let s:vim_bin_path = s:repo_root . '\/.vim\/bin'$/;"	v
s:vim_bin_path	./.vimrc	/^    let s:vim_bin_path = s:repo_root . '\/vim\/bin'$/;"	v
s:vim_bin_path	./.vimrc	/^  let s:vim_bin_path = s:repo_root . '\\vim\\bin'$/;"	v
s:warn	./vim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warn	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
s:warn	./vim/plugged/fzf.vim/autoload/fzf/vim/ipc.vim	/^function! s:warn(message)$/;"	f
s:warn	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
s:warned	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:warned = 0$/;"	v
s:warned	./vim/plugged/fzf/plugin/fzf.vim	/^let s:warned = 0$/;"	v
s:warning_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#languageclient#warning_symbol', 'W:')$/;"	v
s:warning_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#neomake#warning_symbol', 'W:')$/;"	v
s:warning_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#syntastic#warning_symbol', 'W:')$/;"	v
s:warning_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#vim9lsp#warning_symbol', 'W:')$/;"	v
s:warning_symbol	./vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#ycm#warning_symbol', 'W:')$/;"	v
s:wide	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:windows_sink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
s:winpath	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:winpath(path)$/;"	f
s:winpath	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:winpath = {}$/;"	v
s:with_cd	./vim/autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
s:wordcount_cache	./vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:wordcount_cache = 0  " cache wordcount for performance when force_update=0$/;"	v
s:wrap	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
s:wrap_accent	./vim/plugged/vim-airline/autoload/airline/section.vim	/^function! s:wrap_accent(part, value)$/;"	f
s:wrap_cmds	./vim/autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrap_cmds	./vim/plugged/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:writefile	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:writefile(...)$/;"	f
s:ws_refresh	./vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:ws_refresh()$/;"	f
s:xterm_escape_template	./vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:xterm_escape_template = '\\033]12;%s\\007'$/;"	v
s:xterm_launcher	./vim/plugged/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
s:yank_to_register	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
s:zoomwintab_status_zoomed_in	./vim/plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^let s:zoomwintab_status_zoomed_in =$/;"	v
s:zoomwintab_status_zoomed_out	./vim/plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^let s:zoomwintab_status_zoomed_out =$/;"	v
scan	./vim/plugged/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f	struct:fzf.Matcher	typeref:typename:(*Merger, bool)
scoreGapExtension	./vim/plugged/fzf/src/algo/algo.go	/^	scoreGapExtension = -1$/;"	c	package:algo
scoreGapStart	./vim/plugged/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c	package:algo
scoreMatch	./vim/plugged/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c	package:algo
scroll	./vim/plugged/fzf/src/options.go	/^	scroll      string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
scrollOff	./vim/plugged/fzf/src/terminal.go	/^	scrollOff          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
scrollOffset	./vim/plugged/fzf/src/terminal.go	/^	scrollOffset int$/;"	m	struct:fzf.previewRequest	typeref:typename:int
scrollable	./vim/plugged/fzf/src/terminal.go	/^	scrollable bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
scrollbar	./vim/plugged/fzf/src/terminal.go	/^	scrollbar          string$/;"	m	struct:fzf.Terminal	typeref:typename:string
searchRequest	./vim/plugged/fzf/src/terminal.go	/^type searchRequest struct {$/;"	s	package:fzf
selectItem	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
selectItemChanged	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
select_count	./vim/plugged/fzf/test/lib/common.rb	/^          def select_count$/;"	f	method:Tmux.until
selected	./vim/plugged/fzf/src/terminal.go	/^	selected           map[int32]selectedItem$/;"	m	struct:fzf.Terminal	typeref:typename:map[int32]selectedItem
selected	./vim/plugged/fzf/src/terminal.go	/^	selected  bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
selectedItem	./vim/plugged/fzf/src/terminal.go	/^type selectedItem struct {$/;"	s	package:fzf
send_keys	./vim/plugged/fzf/test/lib/common.rb	/^  def send_keys(*args)$/;"	f	class:Tmux
separator	./vim/plugged/fzf/src/terminal.go	/^	separator          labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
separatorLen	./vim/plugged/fzf/src/terminal.go	/^	separatorLen       int$/;"	m	struct:fzf.Terminal	typeref:typename:int
serverInputChan	./vim/plugged/fzf/src/terminal.go	/^	serverInputChan    chan []*action$/;"	m	struct:fzf.Terminal	typeref:typename:chan []*action
setBg	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() string {$/;"	f	struct:tui.LightWindow	typeref:typename:string
set_var	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def set_var(name, val)$/;"	f	class:TestShell.CompletionTest.TestFish
set_var	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def set_var(name, val)$/;"	f	module:TestShell
setup	./vim/plugged/fzf/test/lib/common.rb	/^  def setup$/;"	f	class:TestBase
setup	./vim/plugged/fzf/test/lib/common.rb	/^  def setup$/;"	f	class:TestInteractive
setup	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def setup$/;"	f	module:TestShell
setupTerminal	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) setupTerminal() {$/;"	f	unknown:tui.LightRenderer
setupTerminal	./vim/plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) setupTerminal() {$/;"	f	unknown:tui.LightRenderer
setup_fzf_binary	./install.sh	/^setup_fzf_binary() {$/;"	f
sh	./vim/plugged/fzf/src/proxy_unix.go	/^func sh(bash bool) (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
sh	./vim/plugged/fzf/src/proxy_windows.go	/^func sh(bash bool) (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
shPath	./vim/plugged/fzf/src/proxy_windows.go	/^var shPath atomic.Value$/;"	v	package:fzf	typeref:typename:atomic.Value
shape	./vim/plugged/fzf/src/tui/tui.go	/^	shape       BorderShape$/;"	m	struct:tui.BorderStyle	typeref:typename:BorderShape
shell	./vim/plugged/fzf/src/util/util_unix.go	/^	shell   string$/;"	m	struct:util.Executor	typeref:typename:string
shell	./vim/plugged/fzf/src/util/util_windows.go	/^	shell     string$/;"	m	struct:util.Executor	typeref:typename:string
shell	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def shell$/;"	f	class:TestShell.CompletionTest.TestBash
shell	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def shell$/;"	f	class:TestShell.CompletionTest.TestFish
shell	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def shell$/;"	f	class:TestShell.CompletionTest.TestZsh
shellPath	./vim/plugged/fzf/src/util/util_windows.go	/^	shellPath atomic.Value$/;"	m	struct:util.Executor	typeref:typename:atomic.Value
shellType	./vim/plugged/fzf/src/util/util_windows.go	/^	shellType shellType$/;"	m	struct:util.Executor	typeref:typename:shellType
shellType	./vim/plugged/fzf/src/util/util_windows.go	/^type shellType int$/;"	t	package:util	typeref:typename:int
shellTypeCmd	./vim/plugged/fzf/src/util/util_windows.go	/^	shellTypeCmd$/;"	c	package:util
shellTypePowerShell	./vim/plugged/fzf/src/util/util_windows.go	/^	shellTypePowerShell$/;"	c	package:util
shellTypeUnknown	./vim/plugged/fzf/src/util/util_windows.go	/^	shellTypeUnknown shellType = iota$/;"	c	package:util	typeref:type:shellType
showCursor	./vim/plugged/fzf/src/tui/light.go	/^	showCursor    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
showCursor	./vim/plugged/fzf/src/tui/tcell.go	/^	showCursor    bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
showCursor	./vim/plugged/fzf/src/tui/tui.go	/^	showCursor   bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
sigstop	./vim/plugged/fzf/src/terminal.go	/^	sigstop            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
size	./vim/plugged/fzf/src/options.go	/^	size        sizeSpec$/;"	m	struct:fzf.previewOpts	typeref:typename:sizeSpec
size	./vim/plugged/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.heightSpec	typeref:typename:float64
size	./vim/plugged/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.sizeSpec	typeref:typename:float64
sizeSpec	./vim/plugged/fzf/src/options.go	/^type sizeSpec struct {$/;"	s	package:fzf
slab	./vim/plugged/fzf/src/matcher.go	/^	slab           []*util.Slab$/;"	m	struct:fzf.Matcher	typeref:typename:[]*util.Slab
slab	./vim/plugged/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v	package:fzf	typeref:typename:*util.Slab
slab	./vim/plugged/fzf/src/terminal.go	/^	slab               *util.Slab$/;"	m	struct:fzf.Terminal	typeref:typename:*util.Slab
slab16Size	./vim/plugged/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c	package:fzf	typeref:typename:int
slab32Size	./vim/plugged/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c	package:fzf	typeref:typename:int
slice	./vim/plugged/fzf/src/util/chars.go	/^	slice           []byte \/\/ or []rune$/;"	m	struct:util.Chars	typeref:typename:[]byte
sliceChunks	./vim/plugged/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f	struct:fzf.Matcher	typeref:typename:[][]*Chunk
smcup	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f	struct:tui.LightRenderer
sort	./vim/plugged/fzf/src/matcher.go	/^	sort           bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
sort	./vim/plugged/fzf/src/matcher.go	/^	sort     bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
sort	./vim/plugged/fzf/src/terminal.go	/^	sort               bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
sort	./vim/plugged/fzf/src/terminal.go	/^	sort     bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
sortCriteria	./vim/plugged/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v	package:fzf	typeref:typename:[]criterion
sortSelected	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f	struct:fzf.Terminal	typeref:typename:[]selectedItem
sortable	./vim/plugged/fzf/src/pattern.go	/^	sortable      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
sorted	./vim/plugged/fzf/src/merger.go	/^	sorted   bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
spinner	./vim/plugged/fzf/src/terminal.go	/^	spinner            []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
spinner	./vim/plugged/fzf/src/terminal.go	/^	spinner    string$/;"	m	struct:fzf.previewer	typeref:typename:string
spinner	./vim/plugged/fzf/src/terminal.go	/^	spinner string$/;"	m	struct:fzf.previewResult	typeref:typename:string
spinnerDuration	./vim/plugged/fzf/src/constants.go	/^	spinnerDuration   = 100 * time.Millisecond$/;"	c	package:fzf
splitNth	./vim/plugged/fzf/src/options.go	/^func splitNth(str string) ([]Range, error) {$/;"	f	package:fzf	typeref:typename:([]Range, error)
splitRegexp	./vim/plugged/fzf/src/options.go	/^	splitRegexp      *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
startChan	./vim/plugged/fzf/src/terminal.go	/^	startChan          chan fitpad$/;"	m	struct:fzf.Terminal	typeref:typename:chan fitpad
startEventPoller	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f	struct:fzf.Reader
startHttpServer	./vim/plugged/fzf/src/server.go	/^func startHttpServer(address listenAddress, actionChannel chan []*action, getHandler func(getPar/;"	f	package:fzf	typeref:typename:(net.Listener, int, error)
state	./vim/plugged/fzf/src/util/atomicbool.go	/^	state int32 \/\/ "1" is true, "0" is false$/;"	m	struct:util.AtomicBool	typeref:typename:int32
statusline on top	./vim/plugged/vim-airline/README.md	/^### statusline on top$/;"	S	section:Installation""Extras
stderr	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	./vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool, resetCode string) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	./vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool, resetCode string) {$/;"	f	struct:tui.LightWindow
str	./vim/plugged/fzf/src/tokenizer.go	/^	str   *string$/;"	m	struct:fzf.Delimiter	typeref:typename:*string
strLines	./vim/plugged/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f	package:fzf	typeref:typename:[]string
stringBytes	./vim/plugged/fzf/src/functions.go	/^func stringBytes(data string) []byte {$/;"	f	package:fzf	typeref:typename:[]byte
stripAnsi	./vim/plugged/fzf/src/terminal.go	/^	stripAnsi  bool$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:bool
style	./vim/plugged/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f	unknown:tui.ColorPair	typeref:typename:tcell.Style
suppress	./vim/plugged/fzf/src/terminal.go	/^	suppress           bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
sync	./vim/plugged/fzf/src/terminal.go	/^	sync     bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
t	./vim/plugged/fzf/src/terminal.go	/^	t actionType$/;"	m	struct:fzf.action	typeref:typename:actionType
tabstop	./vim/plugged/fzf/src/terminal.go	/^	tabstop            int$/;"	m	struct:fzf.Terminal	typeref:typename:int
tabstop	./vim/plugged/fzf/src/tui/light.go	/^	tabstop       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
tabstop	./vim/plugged/fzf/src/tui/light.go	/^	tabstop       int$/;"	m	struct:tui.LightWindow	typeref:typename:int
tac	./vim/plugged/fzf/src/matcher.go	/^	tac            bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
tac	./vim/plugged/fzf/src/merger.go	/^	tac      bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
target/$(BINARY32)	./vim/plugged/fzf/Makefile	/^target\/$(BINARY32): $(SOURCES)$/;"	t
target/$(BINARY64)	./vim/plugged/fzf/Makefile	/^target\/$(BINARY64): $(SOURCES)$/;"	t
target/$(BINARYARM5)	./vim/plugged/fzf/Makefile	/^target\/$(BINARYARM5): $(SOURCES)$/;"	t
target/$(BINARYARM6)	./vim/plugged/fzf/Makefile	/^target\/$(BINARYARM6): $(SOURCES)$/;"	t
target/$(BINARYARM7)	./vim/plugged/fzf/Makefile	/^target\/$(BINARYARM7): $(SOURCES)$/;"	t
target/$(BINARYARM8)	./vim/plugged/fzf/Makefile	/^target\/$(BINARYARM8): $(SOURCES)$/;"	t
target/$(BINARYLOONG64)	./vim/plugged/fzf/Makefile	/^target\/$(BINARYLOONG64): $(SOURCES)$/;"	t
target/$(BINARYPPC64LE)	./vim/plugged/fzf/Makefile	/^target\/$(BINARYPPC64LE): $(SOURCES)$/;"	t
target/$(BINARYRISCV64)	./vim/plugged/fzf/Makefile	/^target\/$(BINARYRISCV64): $(SOURCES)$/;"	t
target/$(BINARYS390)	./vim/plugged/fzf/Makefile	/^target\/$(BINARYS390): $(SOURCES)$/;"	t
teardown	./vim/plugged/fzf/test/lib/common.rb	/^  def teardown$/;"	f	class:TestBase
teardown	./vim/plugged/fzf/test/lib/common.rb	/^  def teardown$/;"	f	class:TestInteractive
teardown	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def teardown$/;"	f	module:TestShell
tempFiles	./vim/plugged/fzf/src/terminal.go	/^	tempFiles []string$/;"	m	struct:fzf.commandSpec	typeref:typename:[]string
tempFiles	./vim/plugged/fzf/src/terminal.go	/^	tempFiles []string$/;"	m	struct:fzf.runningCmd	typeref:typename:[]string
template	./vim/plugged/fzf/src/terminal.go	/^	template     string$/;"	m	struct:fzf.previewRequest	typeref:typename:string
template	./vim/plugged/fzf/src/terminal.go	/^	template   string$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:string
template	./vim/plugged/fzf/src/terminal_test.go	/^	template string$/;"	m	struct:fzf.give	typeref:typename:string
templateToString	./vim/plugged/fzf/src/terminal_test.go	/^func templateToString(format string, data any) string {$/;"	f	package:fzf	typeref:typename:string
tempname	./vim/plugged/fzf/test/lib/common.rb	/^  def tempname$/;"	f	class:TestBase
term	./vim/plugged/fzf/src/pattern.go	/^type term struct {$/;"	s	package:fzf
termEqual	./vim/plugged/fzf/src/pattern.go	/^	termEqual$/;"	c	package:fzf
termExact	./vim/plugged/fzf/src/pattern.go	/^	termExact$/;"	c	package:fzf
termExactBoundary	./vim/plugged/fzf/src/pattern.go	/^	termExactBoundary$/;"	c	package:fzf
termFunc	./vim/plugged/fzf/src/reader.go	/^	termFunc func()$/;"	m	struct:fzf.Reader	typeref:typename:func()
termFuzzy	./vim/plugged/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c	package:fzf	typeref:type:termType
termPrefix	./vim/plugged/fzf/src/pattern.go	/^	termPrefix$/;"	c	package:fzf
termSet	./vim/plugged/fzf/src/pattern.go	/^type termSet []term$/;"	t	package:fzf	typeref:typename:[]term
termSets	./vim/plugged/fzf/src/pattern.go	/^	termSets      []termSet$/;"	m	struct:fzf.Pattern	typeref:typename:[]termSet
termSize	./vim/plugged/fzf/src/terminal.go	/^	termSize           tui.TermSize$/;"	m	struct:fzf.Terminal	typeref:typename:tui.TermSize
termSuffix	./vim/plugged/fzf/src/pattern.go	/^	termSuffix$/;"	c	package:fzf
termType	./vim/plugged/fzf/src/pattern.go	/^type termType int$/;"	t	package:fzf	typeref:typename:int
terminate	./vim/plugged/fzf/src/reader.go	/^func (r *Reader) terminate() {$/;"	f	struct:fzf.Reader
test	./vim/plugged/fzf/Makefile	/^test: $(SOURCES)$/;"	t
testCase	./vim/plugged/fzf/src/terminal_test.go	/^type testCase struct {$/;"	s	package:fzf
testCommands	./vim/plugged/fzf/src/terminal_test.go	/^func testCommands(t *testing.T, tests []testCase) {$/;"	f	package:fzf
testParserReference	./vim/plugged/fzf/src/ansi_test.go	/^func testParserReference(t testing.TB, str string) {$/;"	f	package:fzf
test_abort_action_chain	./vim/plugged/fzf/test/test_core.rb	/^  def test_abort_action_chain$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_accept_non_empty	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_non_empty$/;"	f	class:TestCore
test_accept_non_empty_with_empty_list	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestCore
test_accept_non_empty_with_multi_selection	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestCore
test_accept_nth	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_nth$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_accept_nth_regex_delimiter	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_nth_regex_delimiter$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_accept_nth_regex_delimiter_strip_last	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_nth_regex_delimiter_strip_last$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_accept_nth_string_delimiter	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_nth_string_delimiter$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_accept_nth_template	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_nth_template$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_accept_or_print_query_with_match	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_or_print_query_with_match$/;"	f	class:TestCore
test_accept_or_print_query_with_multi_selection	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_or_print_query_with_multi_selection$/;"	f	class:TestCore
test_accept_or_print_query_without_match	./vim/plugged/fzf/test/test_core.rb	/^  def test_accept_or_print_query_without_match$/;"	f	class:TestCore
test_all_borders	./vim/plugged/fzf/test/test_layout.rb	/^  def test_all_borders$/;"	f	class:TestLayout
test_all_borders_header_first	./vim/plugged/fzf/test/test_layout.rb	/^  def test_all_borders_header_first$/;"	f	class:TestLayout
test_alt_c	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_alt_c$/;"	f	module:TestShell
test_alt_c_command	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_alt_c_command$/;"	f	module:TestShell
test_alternative_preview_window_opts	./vim/plugged/fzf/test/test_preview.rb	/^  def test_alternative_preview_window_opts$/;"	f	method:TestPreview.test_preview_clear_screen
test_async_transform	./vim/plugged/fzf/test/test_core.rb	/^  def test_async_transform$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_backward_delete_char_eof	./vim/plugged/fzf/test/test_core.rb	/^  def test_backward_delete_char_eof$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_backward_eof	./vim/plugged/fzf/test/test_core.rb	/^  def test_backward_eof$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_become	./vim/plugged/fzf/test/test_exec.rb	/^  def test_become$/;"	f	class:TestExec
test_become_tty	./vim/plugged/fzf/test/test_exec.rb	/^  def test_become_tty$/;"	f	class:TestExec
test_bg_cancel	./vim/plugged/fzf/test/test_core.rb	/^  def test_bg_cancel$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_bind	./vim/plugged/fzf/test/test_core.rb	/^  def test_bind$/;"	f	class:TestCore
test_bind_print_query	./vim/plugged/fzf/test/test_core.rb	/^  def test_bind_print_query$/;"	f	class:TestCore
test_bind_replace_query	./vim/plugged/fzf/test/test_core.rb	/^  def test_bind_replace_query$/;"	f	class:TestCore
test_boundary_match	./vim/plugged/fzf/test/test_filter.rb	/^  def test_boundary_match$/;"	f	class:TestFilter
test_cancel	./vim/plugged/fzf/test/test_core.rb	/^  def test_cancel$/;"	f	class:TestCore
test_change_and_transform_header	./vim/plugged/fzf/test/test_layout.rb	/^  def test_change_and_transform_header$/;"	f	class:TestLayout
test_change_first_last	./vim/plugged/fzf/test/test_core.rb	/^  def test_change_first_last$/;"	f	class:TestCore
test_change_header	./vim/plugged/fzf/test/test_layout.rb	/^  def test_change_header$/;"	f	class:TestLayout
test_change_header_and_label_at_once	./vim/plugged/fzf/test/test_layout.rb	/^  def test_change_header_and_label_at_once$/;"	f	class:TestLayout
test_change_header_on_header_window	./vim/plugged/fzf/test/test_core.rb	/^  def test_change_header_on_header_window$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_change_nth	./vim/plugged/fzf/test/test_core.rb	/^  def test_change_nth$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_change_nth_unset_default	./vim/plugged/fzf/test/test_core.rb	/^  def test_change_nth_unset_default$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_change_pointer	./vim/plugged/fzf/test/test_core.rb	/^  def test_change_pointer$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_change_preview_window	./vim/plugged/fzf/test/test_preview.rb	/^  def test_change_preview_window$/;"	f	method:TestPreview.test_preview_clear_screen
test_change_preview_window_rotate	./vim/plugged/fzf/test/test_preview.rb	/^  def test_change_preview_window_rotate$/;"	f	method:TestPreview.test_preview_clear_screen
test_change_preview_window_rotate_hidden	./vim/plugged/fzf/test/test_preview.rb	/^  def test_change_preview_window_rotate_hidden$/;"	f	method:TestPreview.test_preview_clear_screen
test_change_preview_window_rotate_hidden_down	./vim/plugged/fzf/test/test_preview.rb	/^  def test_change_preview_window_rotate_hidden_down$/;"	f	method:TestPreview.test_preview_clear_screen
test_change_preview_window_should_not_reset_change_preview	./vim/plugged/fzf/test/test_preview.rb	/^  def test_change_preview_window_should_not_reset_change_preview$/;"	f	method:TestPreview.test_preview_clear_screen
test_change_prompt	./vim/plugged/fzf/test/test_core.rb	/^  def test_change_prompt$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_change_query	./vim/plugged/fzf/test/test_core.rb	/^  def test_change_query$/;"	f	class:TestCore
test_clear_list_when_header_lines_changed_due_to_reload	./vim/plugged/fzf/test/test_exec.rb	/^  def test_clear_list_when_header_lines_changed_due_to_reload$/;"	f	class:TestExec
test_clear_query	./vim/plugged/fzf/test/test_core.rb	/^  def test_clear_query$/;"	f	class:TestCore
test_clear_selection	./vim/plugged/fzf/test/test_core.rb	/^  def test_clear_selection$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_close	./vim/plugged/fzf/test/test_preview.rb	/^  def test_close$/;"	f	method:TestPreview.test_preview_clear_screen
test_combinations	./vim/plugged/fzf/test/test_layout.rb	/^  def test_combinations$/;"	f	class:TestLayout
test_complete_quoted_command	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_complete_quoted_command$/;"	f	class:TestShell.CompletionTest.TestZsh
test_completion_in_command_sequence	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_completion_in_command_sequence$/;"	f	method:TestShell.CompletionTest.test_file_completion
test_ctrl_r	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_ctrl_r$/;"	f	module:TestShell
test_ctrl_r_abort	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_ctrl_r_abort$/;"	f	method:TestShell.test_ctrl_r_multiline
test_ctrl_r_multi	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_ctrl_r_multi$/;"	f	class:TestShell.CompletionTest.TestFish
test_ctrl_r_multiline	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_ctrl_r_multiline$/;"	f	module:TestShell
test_ctrl_t	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_ctrl_t$/;"	f	module:TestShell
test_ctrl_t_unicode	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_ctrl_t_unicode$/;"	f	module:TestShell
test_custom_completion	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_custom_completion$/;"	f	method:TestShell.CompletionTest.test_file_completion
test_custom_completion_api	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_custom_completion_api$/;"	f	method:TestShell.CompletionTest.test_file_completion
test_cycle	./vim/plugged/fzf/test/test_core.rb	/^  def test_cycle$/;"	f	class:TestCore
test_default_extended	./vim/plugged/fzf/test/test_filter.rb	/^  def test_default_extended$/;"	f	class:TestFilter
test_delete_with_modifiers	./vim/plugged/fzf/test/test_core.rb	/^  def test_delete_with_modifiers$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_dir_completion	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_dir_completion$/;"	f	method:TestShell.CompletionTest.test_file_completion
test_disabled	./vim/plugged/fzf/test/test_core.rb	/^  def test_disabled$/;"	f	class:TestCore
test_disabled_preview_update	./vim/plugged/fzf/test/test_exec.rb	/^  def test_disabled_preview_update$/;"	f	class:TestExec
test_dynamic_completion_loader	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestShell.CompletionTest.TestBash
test_ellipsis	./vim/plugged/fzf/test/test_core.rb	/^  def test_ellipsis$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_env_vars	./vim/plugged/fzf/test/test_core.rb	/^  def test_env_vars$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_escaped_meta_characters	./vim/plugged/fzf/test/test_filter.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestFilter
test_exact	./vim/plugged/fzf/test/test_filter.rb	/^  def test_exact$/;"	f	class:TestFilter
test_exclude	./vim/plugged/fzf/test/test_core.rb	/^  def test_exclude$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_exclude_multi	./vim/plugged/fzf/test/test_core.rb	/^  def test_exclude_multi$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_execute	./vim/plugged/fzf/test/test_exec.rb	/^  def test_execute$/;"	f	class:TestExec
test_execute_multi	./vim/plugged/fzf/test/test_exec.rb	/^  def test_execute_multi$/;"	f	class:TestExec
test_execute_plus_flag	./vim/plugged/fzf/test/test_exec.rb	/^  def test_execute_plus_flag$/;"	f	class:TestExec
test_execute_shell	./vim/plugged/fzf/test/test_exec.rb	/^  def test_execute_shell$/;"	f	class:TestExec
test_exit_0	./vim/plugged/fzf/test/test_core.rb	/^  def test_exit_0$/;"	f	class:TestCore
test_exit_0_exit_code	./vim/plugged/fzf/test/test_core.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestCore
test_exitstatus_empty	./vim/plugged/fzf/test/test_core.rb	/^  def test_exitstatus_empty$/;"	f	class:TestCore
test_expect	./vim/plugged/fzf/test/test_core.rb	/^  def test_expect$/;"	f	class:TestCore
test_expect_print_query	./vim/plugged/fzf/test/test_core.rb	/^  def test_expect_print_query$/;"	f	class:TestCore
test_expect_print_query_select_1	./vim/plugged/fzf/test/test_core.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestCore
test_expect_printable_character_print_query	./vim/plugged/fzf/test/test_core.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestCore
test_expect_with_bound_actions	./vim/plugged/fzf/test/test_core.rb	/^  def test_expect_with_bound_actions$/;"	f	class:TestCore
test_file_completion	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_file_completion$/;"	f	module:TestShell.CompletionTest
test_file_completion_root	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_file_completion_root$/;"	f	method:TestShell.CompletionTest.test_file_completion
test_file_completion_unicode	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_file_completion_unicode$/;"	f	method:TestShell.CompletionTest.test_file_completion
test_file_word	./vim/plugged/fzf/test/test_core.rb	/^  def test_file_word$/;"	f	class:TestCore
test_filter_exitstatus	./vim/plugged/fzf/test/test_filter.rb	/^  def test_filter_exitstatus$/;"	f	class:TestFilter
test_focus_event	./vim/plugged/fzf/test/test_core.rb	/^  def test_focus_event$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_fzf_default_command	./vim/plugged/fzf/test/test_core.rb	/^  def test_fzf_default_command$/;"	f	class:TestCore
test_fzf_default_command_failure	./vim/plugged/fzf/test/test_core.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestCore
test_fzf_multi_line	./vim/plugged/fzf/test/test_layout.rb	/^  def test_fzf_multi_line$/;"	f	class:TestLayout
test_fzf_multi_line_no_pointer_and_marker	./vim/plugged/fzf/test/test_layout.rb	/^  def test_fzf_multi_line_no_pointer_and_marker$/;"	f	class:TestLayout
test_fzf_multi_line_reverse	./vim/plugged/fzf/test/test_layout.rb	/^  def test_fzf_multi_line_reverse$/;"	f	class:TestLayout
test_fzf_pos	./vim/plugged/fzf/test/test_core.rb	/^  def test_fzf_pos$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_gap	./vim/plugged/fzf/test/test_layout.rb	/^  def test_gap$/;"	f	class:TestLayout
test_gap_2	./vim/plugged/fzf/test/test_layout.rb	/^  def test_gap_2$/;"	f	class:TestLayout
test_ghost	./vim/plugged/fzf/test/test_core.rb	/^  def test_ghost$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_ghost_inline	./vim/plugged/fzf/test/test_core.rb	/^  def test_ghost_inline$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_header	./vim/plugged/fzf/test/test_core.rb	/^  def test_header$/;"	f	class:TestCore
test_header_and_header_lines	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_and_header_lines$/;"	f	class:TestCore
test_header_and_header_lines_reverse	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestCore
test_header_and_header_lines_reverse_list	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_and_header_lines_reverse_list$/;"	f	class:TestCore
test_header_border_and_label	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_and_label$/;"	f	class:TestLayout
test_header_border_and_label_header_first	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_and_label_header_first$/;"	f	class:TestLayout
test_header_border_and_label_with_list_border	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_and_label_with_list_border$/;"	f	class:TestLayout
test_header_border_and_label_with_list_border_header_first	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_and_label_with_list_border_header_first$/;"	f	class:TestLayout
test_header_border_no_pointer_and_marker	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_no_pointer_and_marker$/;"	f	class:TestLayout
test_header_border_toggle	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_toggle$/;"	f	class:TestLayout
test_header_border_toggle_with_header_lines	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_toggle_with_header_lines$/;"	f	class:TestLayout
test_header_border_toggle_with_header_lines_header_first	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_toggle_with_header_lines_header_first$/;"	f	class:TestLayout
test_header_border_toggle_with_header_lines_header_first_header_lines_border	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_toggle_with_header_lines_header_first_header_lines_border$/;"	f	class:TestLayout
test_header_border_toggle_with_header_lines_header_lines_border	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_border_toggle_with_header_lines_header_lines_border$/;"	f	class:TestLayout
test_header_first	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_first$/;"	f	class:TestLayout
test_header_first_reverse	./vim/plugged/fzf/test/test_layout.rb	/^  def test_header_first_reverse$/;"	f	class:TestLayout
test_header_lines	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_lines$/;"	f	class:TestCore
test_header_lines_overflow	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_lines_overflow$/;"	f	class:TestCore
test_header_lines_reverse	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_lines_reverse$/;"	f	class:TestCore
test_header_lines_reverse_list	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_lines_reverse_list$/;"	f	class:TestCore
test_header_lines_with_nth	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestCore
test_header_reverse	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_reverse$/;"	f	class:TestCore
test_header_reverse_list	./vim/plugged/fzf/test/test_core.rb	/^  def test_header_reverse_list$/;"	f	class:TestCore
test_height_range_fit	./vim/plugged/fzf/test/test_layout.rb	/^  def test_height_range_fit$/;"	f	class:TestLayout
test_height_range_fit_preview_above	./vim/plugged/fzf/test/test_layout.rb	/^  def test_height_range_fit_preview_above$/;"	f	class:TestLayout
test_height_range_fit_preview_above_alternative	./vim/plugged/fzf/test/test_layout.rb	/^  def test_height_range_fit_preview_above_alternative$/;"	f	class:TestLayout
test_height_range_fit_preview_left	./vim/plugged/fzf/test/test_layout.rb	/^  def test_height_range_fit_preview_left$/;"	f	class:TestLayout
test_height_range_overflow	./vim/plugged/fzf/test/test_layout.rb	/^  def test_height_range_overflow$/;"	f	class:TestLayout
test_height_range_with_exit_0	./vim/plugged/fzf/test/test_core.rb	/^  def test_height_range_with_exit_0$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_history	./vim/plugged/fzf/test/test_core.rb	/^  def test_history$/;"	f	class:TestCore
test_hscroll_off	./vim/plugged/fzf/test/test_core.rb	/^  def test_hscroll_off$/;"	f	class:TestCore
test_info_command	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_command$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_command_and_focus	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_command_and_focus$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_command_inline	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_command_inline$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_command_inline_right	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_command_inline_right$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_command_inline_right_no_ansi	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_command_inline_right_no_ansi$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_command_right	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_command_right$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_hidden	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_hidden$/;"	f	class:TestCore
test_info_inline_right	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_inline_right$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_inline_right_clearance	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_inline_right_clearance$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_inline_separator	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_inline_separator$/;"	f	class:TestCore
test_info_no_separator	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_no_separator$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_right	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_right$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_separator_ansi_colors_and_tabs	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_separator_ansi_colors_and_tabs$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_separator_no_unicode	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_separator_no_unicode$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_separator_repeat	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_separator_repeat$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_info_separator_unicode	./vim/plugged/fzf/test/test_core.rb	/^  def test_info_separator_unicode$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_input_border_and_label	./vim/plugged/fzf/test/test_layout.rb	/^  def test_input_border_and_label$/;"	f	class:TestLayout
test_input_border_and_label_header_first	./vim/plugged/fzf/test/test_layout.rb	/^  def test_input_border_and_label_header_first$/;"	f	class:TestLayout
test_interrupt_execute	./vim/plugged/fzf/test/test_exec.rb	/^  def test_interrupt_execute$/;"	f	class:TestExec
test_invalid_cache	./vim/plugged/fzf/test/test_core.rb	/^  def test_invalid_cache$/;"	f	class:TestCore
test_invalid_cache_query_type	./vim/plugged/fzf/test/test_core.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestCore
test_invalid_option	./vim/plugged/fzf/test/test_core.rb	/^  def test_invalid_option$/;"	f	class:TestCore
test_inverse_only_search_should_not_sort_the_result	./vim/plugged/fzf/test/test_core.rb	/^  def test_inverse_only_search_should_not_sort_the_result$/;"	f	class:TestCore
test_item_index_reset_on_reload	./vim/plugged/fzf/test/test_exec.rb	/^  def test_item_index_reset_on_reload$/;"	f	class:TestExec
test_jump	./vim/plugged/fzf/test/test_core.rb	/^  def test_jump$/;"	f	class:TestCore
test_jump_accept	./vim/plugged/fzf/test/test_core.rb	/^  def test_jump_accept$/;"	f	class:TestCore
test_jump_events	./vim/plugged/fzf/test/test_core.rb	/^  def test_jump_events$/;"	f	class:TestCore
test_jump_no_pointer	./vim/plugged/fzf/test/test_core.rb	/^  def test_jump_no_pointer$/;"	f	class:TestCore
test_jump_no_pointer_no_marker	./vim/plugged/fzf/test/test_core.rb	/^  def test_jump_no_pointer_no_marker$/;"	f	class:TestCore
test_keep_right	./vim/plugged/fzf/test/test_core.rb	/^  def test_keep_right$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_key_bindings	./vim/plugged/fzf/test/test_core.rb	/^  def test_key_bindings$/;"	f	class:TestCore
test_kill_default_command_on_abort	./vim/plugged/fzf/test/test_exec.rb	/^  def test_kill_default_command_on_abort$/;"	f	class:TestExec
test_kill_default_command_on_accept	./vim/plugged/fzf/test/test_exec.rb	/^  def test_kill_default_command_on_accept$/;"	f	class:TestExec
test_kill_reload_command_on_abort	./vim/plugged/fzf/test/test_exec.rb	/^  def test_kill_reload_command_on_abort$/;"	f	class:TestExec
test_kill_reload_command_on_accept	./vim/plugged/fzf/test/test_exec.rb	/^  def test_kill_reload_command_on_accept$/;"	f	class:TestExec
test_label_truncation	./vim/plugged/fzf/test/test_layout.rb	/^  def test_label_truncation$/;"	f	class:TestLayout
test_labels_bottom	./vim/plugged/fzf/test/test_core.rb	/^  def test_labels_bottom$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_labels_center	./vim/plugged/fzf/test/test_core.rb	/^  def test_labels_center$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_labels_left	./vim/plugged/fzf/test/test_core.rb	/^  def test_labels_left$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_labels_right	./vim/plugged/fzf/test/test_core.rb	/^  def test_labels_right$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_labels_variables	./vim/plugged/fzf/test/test_core.rb	/^  def test_labels_variables$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_layout_default_with_footer	./vim/plugged/fzf/test/test_layout.rb	/^  def test_layout_default_with_footer$/;"	f	class:TestLayout
test_layout_reverse_list	./vim/plugged/fzf/test/test_layout.rb	/^  def test_layout_reverse_list$/;"	f	class:TestLayout
test_layout_reverse_list_with_footer	./vim/plugged/fzf/test/test_layout.rb	/^  def test_layout_reverse_list_with_footer$/;"	f	class:TestLayout
test_list_border_and_label	./vim/plugged/fzf/test/test_layout.rb	/^  def test_list_border_and_label$/;"	f	class:TestLayout
test_list_input_border_and_label	./vim/plugged/fzf/test/test_layout.rb	/^  def test_list_input_border_and_label$/;"	f	class:TestLayout
test_list_input_border_and_label_header_first	./vim/plugged/fzf/test/test_layout.rb	/^  def test_list_input_border_and_label_header_first$/;"	f	class:TestLayout
test_listen	./vim/plugged/fzf/test/test_server.rb	/^  def test_listen$/;"	f	class:TestServer
test_listen_with_api_key	./vim/plugged/fzf/test/test_server.rb	/^  def test_listen_with_api_key$/;"	f	class:TestServer
test_long_line	./vim/plugged/fzf/test/test_filter.rb	/^  def test_long_line$/;"	f	class:TestFilter
test_margin	./vim/plugged/fzf/test/test_core.rb	/^  def test_margin$/;"	f	class:TestCore
test_margin_reverse	./vim/plugged/fzf/test/test_core.rb	/^  def test_margin_reverse$/;"	f	class:TestCore
test_margin_reverse_list	./vim/plugged/fzf/test/test_core.rb	/^  def test_margin_reverse_list$/;"	f	class:TestCore
test_marker	./vim/plugged/fzf/test/test_core.rb	/^  def test_marker$/;"	f	class:TestCore
test_min_height_auto	./vim/plugged/fzf/test/test_layout.rb	/^  def test_min_height_auto$/;"	f	class:TestLayout
test_min_height_auto_no_input	./vim/plugged/fzf/test/test_layout.rb	/^  def test_min_height_auto_no_input$/;"	f	class:TestLayout
test_min_height_auto_no_input_reverse_list	./vim/plugged/fzf/test/test_layout.rb	/^  def test_min_height_auto_no_input_reverse_list$/;"	f	class:TestLayout
test_min_height_no_auto	./vim/plugged/fzf/test/test_layout.rb	/^  def test_min_height_no_auto$/;"	f	class:TestLayout
test_multi_action	./vim/plugged/fzf/test/test_core.rb	/^  def test_multi_action$/;"	f	class:TestCore
test_multi_event	./vim/plugged/fzf/test/test_core.rb	/^  def test_multi_event$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_multi_max	./vim/plugged/fzf/test/test_core.rb	/^  def test_multi_max$/;"	f	class:TestCore
test_multi_order	./vim/plugged/fzf/test/test_core.rb	/^  def test_multi_order$/;"	f	class:TestCore
test_no_clear	./vim/plugged/fzf/test/test_core.rb	/^  def test_no_clear$/;"	f	class:TestCore
test_no_extra_newline_issue_3209	./vim/plugged/fzf/test/test_layout.rb	/^  def test_no_extra_newline_issue_3209$/;"	f	class:TestLayout
test_no_input_change_query	./vim/plugged/fzf/test/test_core.rb	/^  def test_no_input_change_query$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_no_input_query	./vim/plugged/fzf/test/test_core.rb	/^  def test_no_input_query$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_normalized_match	./vim/plugged/fzf/test/test_filter.rb	/^  def test_normalized_match$/;"	f	class:TestFilter
test_nth_suffix_match	./vim/plugged/fzf/test/test_filter.rb	/^  def test_nth_suffix_match$/;"	f	class:TestFilter
test_offset_middle	./vim/plugged/fzf/test/test_core.rb	/^  def test_offset_middle$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_one_and_zero	./vim/plugged/fzf/test/test_core.rb	/^  def test_one_and_zero$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_or_operator	./vim/plugged/fzf/test/test_filter.rb	/^  def test_or_operator$/;"	f	class:TestFilter
test_partial_caching	./vim/plugged/fzf/test/test_core.rb	/^  def test_partial_caching$/;"	f	class:TestCore
test_pointer	./vim/plugged/fzf/test/test_core.rb	/^  def test_pointer$/;"	f	class:TestCore
test_pointer_with_jump	./vim/plugged/fzf/test/test_core.rb	/^  def test_pointer_with_jump$/;"	f	class:TestCore
test_pos	./vim/plugged/fzf/test/test_core.rb	/^  def test_pos$/;"	f	class:TestCore
test_preserve_selection_on_revision_bump	./vim/plugged/fzf/test/test_core.rb	/^  def test_preserve_selection_on_revision_bump$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_prev_next_selected	./vim/plugged/fzf/test/test_core.rb	/^  def test_prev_next_selected$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_preview	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview$/;"	f	class:TestPreview
test_preview_asterisk	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_asterisk$/;"	f	class:TestPreview
test_preview_bindings_with_default_preview	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_bindings_with_default_preview$/;"	f	class:TestPreview
test_preview_bindings_without_default_preview	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_bindings_without_default_preview$/;"	f	class:TestPreview
test_preview_clear_screen	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_clear_screen$/;"	f	class:TestPreview
test_preview_correct_tab_width_after_ansi_reset_code	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_correct_tab_width_after_ansi_reset_code$/;"	f	class:TestPreview
test_preview_file	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_file$/;"	f	class:TestPreview
test_preview_flags	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_flags$/;"	f	class:TestPreview
test_preview_header	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_header$/;"	f	method:TestPreview.test_preview_clear_screen
test_preview_hidden	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_hidden$/;"	f	class:TestPreview
test_preview_q_no_match	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_q_no_match$/;"	f	class:TestPreview
test_preview_q_no_match_with_initial_query	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_q_no_match_with_initial_query$/;"	f	class:TestPreview
test_preview_query_should_not_be_affected_by_search	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_query_should_not_be_affected_by_search$/;"	f	method:TestPreview.test_preview_clear_screen
test_preview_scroll_begin_and_offset	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_scroll_begin_and_offset$/;"	f	class:TestPreview
test_preview_scroll_begin_constant	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_scroll_begin_constant$/;"	f	class:TestPreview
test_preview_scroll_begin_expr	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_scroll_begin_expr$/;"	f	class:TestPreview
test_preview_size_0	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_size_0$/;"	f	class:TestPreview
test_preview_size_0_hidden	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_size_0_hidden$/;"	f	class:TestPreview
test_preview_update_on_select	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_update_on_select$/;"	f	class:TestPreview
test_preview_window_follow	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_window_follow$/;"	f	method:TestPreview.test_preview_clear_screen
test_preview_window_hidden_on_focus	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_window_hidden_on_focus$/;"	f	method:TestPreview.test_preview_clear_screen
test_preview_window_noinfo	./vim/plugged/fzf/test/test_layout.rb	/^  def test_preview_window_noinfo$/;"	f	class:TestLayout
test_preview_window_width_exception	./vim/plugged/fzf/test/test_preview.rb	/^  def test_preview_window_width_exception$/;"	f	method:TestPreview.test_preview_clear_screen
test_process_completion	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_process_completion$/;"	f	method:TestShell.CompletionTest.test_file_completion
test_put	./vim/plugged/fzf/test/test_core.rb	/^  def test_put$/;"	f	class:TestCore
test_query_unicode	./vim/plugged/fzf/test/test_core.rb	/^  def test_query_unicode$/;"	f	class:TestCore
test_read0	./vim/plugged/fzf/test/test_filter.rb	/^  def test_read0$/;"	f	class:TestFilter
test_reload	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload$/;"	f	class:TestExec
test_reload_and_change	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_and_change$/;"	f	class:TestExec
test_reload_and_change_cache	./vim/plugged/fzf/test/test_layout.rb	/^  def test_reload_and_change_cache$/;"	f	class:TestLayout
test_reload_and_change_preview_should_update_preview	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_and_change_preview_should_update_preview$/;"	f	class:TestExec
test_reload_disabled_case1	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_disabled_case1$/;"	f	class:TestExec
test_reload_disabled_case2	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_disabled_case2$/;"	f	class:TestExec
test_reload_disabled_case3	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_disabled_case3$/;"	f	class:TestExec
test_reload_disabled_case4	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_disabled_case4$/;"	f	class:TestExec
test_reload_disabled_case5	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_disabled_case5$/;"	f	class:TestExec
test_reload_disabled_case6	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_disabled_case6$/;"	f	class:TestExec
test_reload_even_when_theres_no_match	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_even_when_theres_no_match$/;"	f	class:TestExec
test_reload_should_terminate_standard_input_stream	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_should_terminate_standard_input_stream$/;"	f	class:TestExec
test_reload_should_update_preview	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_should_update_preview$/;"	f	class:TestExec
test_reload_sync	./vim/plugged/fzf/test/test_exec.rb	/^  def test_reload_sync$/;"	f	class:TestExec
test_render_order	./vim/plugged/fzf/test/test_core.rb	/^  def test_render_order$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_result_event	./vim/plugged/fzf/test/test_core.rb	/^  def test_result_event$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_scroll	./vim/plugged/fzf/test/test_core.rb	/^  def test_scroll$/;"	f	class:TestCore
test_scroll_off	./vim/plugged/fzf/test/test_core.rb	/^  def test_scroll_off$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_scroll_off_large	./vim/plugged/fzf/test/test_core.rb	/^  def test_scroll_off_large$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_search	./vim/plugged/fzf/test/test_core.rb	/^  def test_search$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_search_override_query_in_no_input_mode	./vim/plugged/fzf/test/test_core.rb	/^  def test_search_override_query_in_no_input_mode$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_select_1	./vim/plugged/fzf/test/test_core.rb	/^  def test_select_1$/;"	f	class:TestCore
test_select_1_accept_nth	./vim/plugged/fzf/test/test_core.rb	/^  def test_select_1_accept_nth$/;"	f	class:TestCore
test_select_1_exit_0_fail	./vim/plugged/fzf/test/test_core.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestCore
test_select_all_deselect_all_toggle_all	./vim/plugged/fzf/test/test_core.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestCore
test_select_deselect	./vim/plugged/fzf/test/test_core.rb	/^  def test_select_deselect$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_separator_no_ellipsis	./vim/plugged/fzf/test/test_layout.rb	/^  def test_separator_no_ellipsis$/;"	f	class:TestLayout
test_show_and_hide_preview	./vim/plugged/fzf/test/test_preview.rb	/^  def test_show_and_hide_preview$/;"	f	class:TestPreview
test_smart_case_for_each_term	./vim/plugged/fzf/test/test_filter.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestFilter
test_ssh_completion	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_ssh_completion$/;"	f	method:TestShell.CompletionTest.test_file_completion
test_start_event	./vim/plugged/fzf/test/test_core.rb	/^  def test_start_event$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_start_on_reload	./vim/plugged/fzf/test/test_exec.rb	/^  def test_start_on_reload$/;"	f	class:TestExec
test_strip_xterm_osc_sequence	./vim/plugged/fzf/test/test_core.rb	/^  def test_strip_xterm_osc_sequence$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_style_full_adaptive_height	./vim/plugged/fzf/test/test_layout.rb	/^  def test_style_full_adaptive_height$/;"	f	class:TestLayout
test_style_full_adaptive_height_double	./vim/plugged/fzf/test/test_layout.rb	/^  def test_style_full_adaptive_height_double$/;"	f	class:TestLayout
test_sync	./vim/plugged/fzf/test/test_core.rb	/^  def test_sync$/;"	f	class:TestCore
test_tabstop	./vim/plugged/fzf/test/test_core.rb	/^  def test_tabstop$/;"	f	class:TestCore
test_tac	./vim/plugged/fzf/test/test_core.rb	/^  def test_tac$/;"	f	class:TestCore
test_tac_nosort	./vim/plugged/fzf/test/test_core.rb	/^  def test_tac_nosort$/;"	f	class:TestCore
test_tac_sort	./vim/plugged/fzf/test/test_core.rb	/^  def test_tac_sort$/;"	f	class:TestCore
test_tiebreak	./vim/plugged/fzf/test/test_filter.rb	/^  def test_tiebreak$/;"	f	class:TestFilter
test_tiebreak_begin_algo_v2	./vim/plugged/fzf/test/test_filter.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestFilter
test_tiebreak_chunk	./vim/plugged/fzf/test/test_filter.rb	/^  def test_tiebreak_chunk$/;"	f	class:TestFilter
test_tiebreak_end	./vim/plugged/fzf/test/test_filter.rb	/^  def test_tiebreak_end$/;"	f	class:TestFilter
test_tiebreak_index_begin	./vim/plugged/fzf/test/test_filter.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestFilter
test_tiebreak_length_with_nth	./vim/plugged/fzf/test/test_filter.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestFilter
test_toggle_alternative_preview_window	./vim/plugged/fzf/test/test_preview.rb	/^  def test_toggle_alternative_preview_window$/;"	f	method:TestPreview.test_preview_clear_screen
test_toggle_header	./vim/plugged/fzf/test/test_layout.rb	/^  def test_toggle_header$/;"	f	class:TestLayout
test_toggle_preview_without_default_preview_command	./vim/plugged/fzf/test/test_preview.rb	/^  def test_toggle_preview_without_default_preview_command$/;"	f	class:TestPreview
test_toggle_preview_wrap	./vim/plugged/fzf/test/test_preview.rb	/^  def test_toggle_preview_wrap$/;"	f	method:TestPreview.test_preview_clear_screen
test_toggle_sort	./vim/plugged/fzf/test/test_core.rb	/^  def test_toggle_sort$/;"	f	class:TestCore
test_track	./vim/plugged/fzf/test/test_core.rb	/^  def test_track$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_track_action	./vim/plugged/fzf/test/test_core.rb	/^  def test_track_action$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_trailing_new_line	./vim/plugged/fzf/test/test_core.rb	/^  def test_trailing_new_line$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_transform	./vim/plugged/fzf/test/test_core.rb	/^  def test_transform$/;"	f	method:TestCore.test_transform_query.test_transform_prompt
test_transform_pointer	./vim/plugged/fzf/test/test_core.rb	/^  def test_transform_pointer$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_transform_prompt	./vim/plugged/fzf/test/test_core.rb	/^  def test_transform_prompt$/;"	f	method:TestCore.test_transform_query
test_transform_query	./vim/plugged/fzf/test/test_core.rb	/^  def test_transform_query$/;"	f	class:TestCore
test_transform_search	./vim/plugged/fzf/test/test_core.rb	/^  def test_transform_search$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_trigger	./vim/plugged/fzf/test/test_core.rb	/^  def test_trigger$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_unbind_rebind_toggle_bind	./vim/plugged/fzf/test/test_core.rb	/^  def test_unbind_rebind_toggle_bind$/;"	f	method:TestCore.test_transform_query.test_transform_prompt.test_transform
test_unicode_case	./vim/plugged/fzf/test/test_filter.rb	/^  def test_unicode_case$/;"	f	class:TestFilter
test_unset_completion	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def test_unset_completion$/;"	f	method:TestShell.CompletionTest.test_file_completion
test_vanilla	./vim/plugged/fzf/test/test_layout.rb	/^  def test_vanilla$/;"	f	class:TestLayout
test_with_nth	./vim/plugged/fzf/test/test_core.rb	/^  def test_with_nth$/;"	f	class:TestCore
test_with_nth_ansi	./vim/plugged/fzf/test/test_filter.rb	/^  def test_with_nth_ansi$/;"	f	class:TestFilter
test_with_nth_basic	./vim/plugged/fzf/test/test_filter.rb	/^  def test_with_nth_basic$/;"	f	class:TestFilter
test_with_nth_no_ansi	./vim/plugged/fzf/test/test_filter.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestFilter
test_with_nth_template	./vim/plugged/fzf/test/test_filter.rb	/^  def test_with_nth_template$/;"	f	class:TestFilter
text	./vim/plugged/fzf/src/item.go	/^	text        util.Chars    \/\/ 32 = 24 + 1 + 1 + 2 + 4$/;"	m	struct:fzf.Item	typeref:typename:util.Chars
text	./vim/plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.Pattern	typeref:typename:[]rune
text	./vim/plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.term	typeref:typename:[]rune
text	./vim/plugged/fzf/src/tokenizer.go	/^	text         *util.Chars$/;"	m	struct:fzf.Token	typeref:typename:*util.Chars
text	./vim/plugged/fzf/src/tui/light.go	/^	text         string$/;"	m	struct:tui.wrappedLine	typeref:typename:string
theme	./vim/plugged/fzf/src/terminal.go	/^	theme              *tui.ColorTheme$/;"	m	struct:fzf.Terminal	typeref:typename:*tui.ColorTheme
theme	./vim/plugged/fzf/src/tui/light.go	/^	theme         *ColorTheme$/;"	m	struct:tui.LightRenderer	typeref:typename:*ColorTheme
theme	./vim/plugged/fzf/src/tui/tui.go	/^	theme        *ColorTheme$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:*ColorTheme
threshold	./vim/plugged/fzf/src/options.go	/^	threshold   int$/;"	m	struct:fzf.previewOpts	typeref:typename:int
timeoutInterval	./vim/plugged/fzf/src/tui/light_windows.go	/^	timeoutInterval = 10$/;"	c	package:tui
tmux	./vim/plugged/fzf/test/lib/common.rb	/^  attr_reader :tmux$/;"	A	class:TestInteractive
tmux	./vim/plugged/fzf/test/test_shell_integration.rb	/^  attr_reader :tmux$/;"	A	module:TestShell
tmuxOptions	./vim/plugged/fzf/src/options.go	/^type tmuxOptions struct {$/;"	s	package:fzf
to avoid parse errors and add more actions to the same key	./vim/plugged/fzf/CHANGELOG.md	/^  # to avoid parse errors and add more actions to the same key$/;"	c
toActions	./vim/plugged/fzf/src/terminal.go	/^func toActions(types ...actionType) []*action {$/;"	f	package:fzf	typeref:typename:[]*action
toAnsiString	./vim/plugged/fzf/src/ansi.go	/^func toAnsiString(color tui.Color, offset int) string {$/;"	f	package:fzf	typeref:typename:string
toggleItem	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
toggleSort	./vim/plugged/fzf/src/terminal.go	/^	toggleSort         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
tokens	./vim/plugged/fzf/src/item.go	/^	tokens   []Token$/;"	m	struct:fzf.transformed	typeref:typename:[]Token
tomasr/molokai	./vim/plugged/fzf/ADVANCED.md	/^# tomasr\/molokai$/;"	c
top	./vim/plugged/fzf/src/tui/light.go	/^	top           int$/;"	m	struct:tui.LightWindow	typeref:typename:int
top	./vim/plugged/fzf/src/tui/tcell.go	/^	top           int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
top	./vim/plugged/fzf/src/tui/tui.go	/^	top         rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topLeft	./vim/plugged/fzf/src/tui/tui.go	/^	topLeft     rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topRight	./vim/plugged/fzf/src/tui/tui.go	/^	topRight    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
track	./vim/plugged/fzf/src/terminal.go	/^	track              trackOption$/;"	m	struct:fzf.Terminal	typeref:typename:trackOption
trackCurrent	./vim/plugged/fzf/src/options.go	/^	trackCurrent$/;"	c	package:fzf
trackDisabled	./vim/plugged/fzf/src/options.go	/^	trackDisabled trackOption = iota$/;"	c	package:fzf	typeref:type:trackOption
trackEnabled	./vim/plugged/fzf/src/options.go	/^	trackEnabled$/;"	c	package:fzf
trackOption	./vim/plugged/fzf/src/options.go	/^type trackOption int$/;"	t	package:fzf	typeref:typename:int
trans	./vim/plugged/fzf/src/chunklist.go	/^	trans  ItemBuilder$/;"	m	struct:fzf.ChunkList	typeref:typename:ItemBuilder
transformInput	./vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Token
transformed	./vim/plugged/fzf/src/item.go	/^	transformed *transformed  \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*transformed
transformed	./vim/plugged/fzf/src/item.go	/^type transformed struct {$/;"	s	package:fzf
triggerLoad	./vim/plugged/fzf/src/terminal.go	/^	triggerLoad        bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
trimLeft	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, int32)
trimLength	./vim/plugged/fzf/src/util/chars.go	/^	trimLength      uint16$/;"	m	struct:util.Chars	typeref:typename:uint16
trimLengthKnown	./vim/plugged/fzf/src/util/chars.go	/^	trimLengthKnown bool$/;"	m	struct:util.Chars	typeref:typename:bool
trimMessage	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) trimMessage(message string, maxWidth int) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
trimPath	./vim/plugged/fzf/src/reader.go	/^func trimPath(path string) string {$/;"	f	package:fzf	typeref:typename:string
trimQuery	./vim/plugged/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
trimRight	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, bool)
truncateQuery	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f	struct:fzf.Terminal
tryLock	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) tryLock(timeout time.Duration) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
trySkip	./vim/plugged/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f	package:algo	typeref:typename:int
tty	./vim/plugged/fzf/src/tui/ttyname_unix.go	/^var tty atomic.Value$/;"	v	package:tui	typeref:typename:atomic.Value
ttyDefault	./vim/plugged/fzf/src/terminal.go	/^	ttyDefault         string$/;"	m	struct:fzf.Terminal	typeref:typename:string
ttyin	./vim/plugged/fzf/src/terminal.go	/^	ttyin              *os.File$/;"	m	struct:fzf.Terminal	typeref:typename:*os.File
ttyin	./vim/plugged/fzf/src/terminal.go	/^var ttyin *os.File$/;"	v	package:fzf	typeref:typename:*os.File
ttyin	./vim/plugged/fzf/src/tui/light.go	/^	ttyin         *os.File$/;"	m	struct:tui.LightRenderer	typeref:typename:*os.File
ttyinChannel	./vim/plugged/fzf/src/tui/light.go	/^	ttyinChannel    chan byte$/;"	m	struct:tui.LightRenderer	typeref:typename:chan byte
ttyname	./vim/plugged/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
ttyname	./vim/plugged/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
ttyout	./vim/plugged/fzf/src/tui/light.go	/^	ttyout        *os.File$/;"	m	struct:tui.LightRenderer	typeref:typename:*os.File
tui	./vim/plugged/fzf/src/terminal.go	/^	tui                tui.Renderer$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Renderer
tui	./vim/plugged/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/eventtype_string.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/light.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/light_unix.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/light_windows.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/tcell_test.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	./vim/plugged/fzf/src/tui/tui_test.go	/^package tui$/;"	p
typ	./vim/plugged/fzf/src/pattern.go	/^	typ           termType$/;"	m	struct:fzf.term	typeref:typename:termType
uiMutex	./vim/plugged/fzf/src/terminal.go	/^	uiMutex            sync.Mutex$/;"	m	struct:fzf.Terminal	typeref:typename:sync.Mutex
unicode	./vim/plugged/fzf/src/terminal.go	/^	unicode            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
unset_var	./vim/plugged/fzf/test/test_shell_integration.rb	/^  def unset_var(name)$/;"	f	module:TestShell
until	./vim/plugged/fzf/test/lib/common.rb	/^  def until(refresh = false, timeout: DEFAULT_TIMEOUT)$/;"	f	class:Tmux
upOneLine	./vim/plugged/fzf/src/tui/light.go	/^	upOneLine     bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
update	./vim/plugged/fzf/Makefile	/^update:$/;"	t
update	./vim/plugged/fzf/shell/update-common.sh	/^update() {$/;"	f
updatePromptOffset	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) updatePromptOffset() ([]rune, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, []rune)
updateTerminalSize	./vim/plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
updateTerminalSize	./vim/plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
uri	./vim/plugged/fzf/src/ansi.go	/^	uri    string$/;"	m	struct:fzf.url	typeref:typename:string
uri	./vim/plugged/fzf/src/tui/tcell.go	/^	uri           *string$/;"	m	struct:tui.TcellWindow	typeref:typename:*string
url	./vim/plugged/fzf/src/ansi.go	/^	url  *url$/;"	m	struct:fzf.ansiState	typeref:typename:*url
url	./vim/plugged/fzf/src/ansi.go	/^type url struct {$/;"	s	package:fzf
url	./vim/plugged/fzf/src/result.go	/^	url    *url$/;"	m	struct:fzf.colorOffset	typeref:typename:*url
usage: _fzf_setup_completion path|dir COMMANDS...	./vim/plugged/fzf/CHANGELOG.md	/^  # usage: _fzf_setup_completion path|dir COMMANDS...$/;"	c
useTmux	./vim/plugged/fzf/src/options.go	/^func (opts *Options) useTmux() bool {$/;"	f	struct:fzf.Options	typeref:typename:bool
util	./vim/plugged/fzf/src/util/atexit.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/atexit_test.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/chars.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/chars_test.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/concurrent_set.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/eventbox.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/slab.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/util.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/util_test.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/util_unix.go	/^package util$/;"	p
util	./vim/plugged/fzf/src/util/util_windows.go	/^package util$/;"	p
valid	./vim/plugged/fzf/src/terminal.go	/^	valid     bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
validateOptions	./vim/plugged/fzf/src/options.go	/^func validateOptions(opts *Options) error {$/;"	f	package:fzf	typeref:typename:error
validateSign	./vim/plugged/fzf/src/options.go	/^func validateSign(sign string, signOptName string) error {$/;"	f	package:fzf	typeref:typename:error
version	./vim/plugged/fzf/install.ps1	/^$version="0.65.1"$/;"	v
version	./vim/plugged/fzf/main.go	/^var version = "0.65"$/;"	v	package:main
version	./vim/plugged/fzf/src/terminal.go	/^	version            int64$/;"	m	struct:fzf.Terminal	typeref:typename:int64
version	./vim/plugged/fzf/src/terminal.go	/^	version    int64$/;"	m	struct:fzf.previewer	typeref:typename:int64
version	./vim/plugged/fzf/src/terminal.go	/^	version   int64$/;"	m	struct:fzf.previewed	typeref:typename:int64
version	./vim/plugged/fzf/src/terminal.go	/^	version  int64$/;"	m	struct:fzf.versionedCallback	typeref:typename:int64
version	./vim/plugged/fzf/src/terminal.go	/^	version int64$/;"	m	struct:fzf.previewResult	typeref:typename:int64
versionedCallback	./vim/plugged/fzf/src/terminal.go	/^type versionedCallback struct {$/;"	s	package:fzf
vim-airline	./vim/plugged/vim-airline/README.md	/^# vim-airline$/;"	c
visibleHeaderLines	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) visibleHeaderLines() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
visibleHeaderLinesInList	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) visibleHeaderLinesInList() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
visibleInputLinesInList	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) visibleInputLinesInList() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
vmove	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f	struct:fzf.Terminal
vset	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
vv	./.vimrc	/^nnoremap <silent> vv V$/;"	m
wait	./vim/plugged/fzf/src/reader.go	/^	wait     bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
wait	./vim/plugged/fzf/test/lib/common.rb	/^def wait(timeout = DEFAULT_TIMEOUT)$/;"	f
walkerOpts	./vim/plugged/fzf/src/options.go	/^type walkerOpts struct {$/;"	s	package:fzf
want	./vim/plugged/fzf/src/terminal_test.go	/^	want$/;"	M	struct:fzf.testCase	typeref:typename:want
want	./vim/plugged/fzf/src/terminal_test.go	/^type want struct {$/;"	s	package:fzf
wborder	./vim/plugged/fzf/src/terminal.go	/^	wborder            tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
whiteChars	./vim/plugged/fzf/src/algo/algo.go	/^const whiteChars = " \\t\\n\\v\\f\\r\\x85\\xA0"$/;"	c	package:algo
whiteSuffix	./vim/plugged/fzf/src/terminal.go	/^var whiteSuffix *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
whitespace	./vim/plugged/vim-airline/README.md	/^#### whitespace$/;"	t	section:Installation""Extras
width	./vim/plugged/fzf/src/options.go	/^	width    sizeSpec$/;"	m	struct:fzf.tmuxOptions	typeref:typename:sizeSpec
width	./vim/plugged/fzf/src/terminal.go	/^	width     int$/;"	m	struct:fzf.itemLine	typeref:typename:int
width	./vim/plugged/fzf/src/tui/light.go	/^	width         int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
width	./vim/plugged/fzf/src/tui/light.go	/^	width         int$/;"	m	struct:tui.LightWindow	typeref:typename:int
width	./vim/plugged/fzf/src/tui/tcell.go	/^	width         int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
win	./vim/plugged/fzf/test/lib/common.rb	/^  attr_reader :win$/;"	A	class:Tmux
window	./vim/plugged/fzf/src/terminal.go	/^	window             tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
windowPosition	./vim/plugged/fzf/src/options.go	/^type windowPosition int$/;"	t	package:fzf	typeref:typename:int
windowType	./vim/plugged/fzf/src/tui/light.go	/^	windowType    WindowType$/;"	m	struct:tui.LightWindow	typeref:typename:WindowType
windowType	./vim/plugged/fzf/src/tui/tcell.go	/^	windowType    WindowType$/;"	m	struct:tui.TcellWindow	typeref:typename:WindowType
wipe	./vim/plugged/fzf/src/terminal.go	/^	wipe      bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
wireframe	./vim/plugged/fzf/src/terminal.go	/^	wireframe bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
withIndex	./vim/plugged/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f	package:fzf	typeref:typename:*Item
withInputPipe	./vim/plugged/fzf/src/proxy_unix.go	/^func withInputPipe(input string, task func(io.WriteCloser)) error {$/;"	f	package:fzf	typeref:typename:error
withInputPipe	./vim/plugged/fzf/src/proxy_windows.go	/^func withInputPipe(input string, task func(io.WriteCloser)) error {$/;"	f	package:fzf	typeref:typename:error
withOutputPipe	./vim/plugged/fzf/src/proxy_unix.go	/^func withOutputPipe(output string, task func(io.ReadCloser)) error {$/;"	f	package:fzf	typeref:typename:error
withOutputPipe	./vim/plugged/fzf/src/proxy_windows.go	/^func withOutputPipe(output string, task func(io.ReadCloser)) error {$/;"	f	package:fzf	typeref:typename:error
withPos	./vim/plugged/fzf/src/pattern.go	/^	withPos       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
withPrefixLengths	./vim/plugged/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
withUrl	./vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) withUrl(style tcell.Style) tcell.Style {$/;"	f	struct:tui.TcellWindow	typeref:typename:tcell.Style
withWindow	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) withWindow(w tui.Window, f func()) {$/;"	f	struct:fzf.Terminal
wordNext	./vim/plugged/fzf/src/terminal.go	/^	wordNext           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wordRubout	./vim/plugged/fzf/src/terminal.go	/^	wordRubout         string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wrap	./vim/plugged/fzf/src/options.go	/^	wrap        bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
wrap	./vim/plugged/fzf/src/terminal.go	/^	wrap               bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
wrapCols	./vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) wrapCols() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
wrapLine	./vim/plugged/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, initialMax int, tabstop int, wrapSignWidth int) []/;"	f	package:tui	typeref:typename:[]wrappedLine
wrapSign	./vim/plugged/fzf/src/terminal.go	/^	wrapSign           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wrapSign	./vim/plugged/fzf/src/tui/light.go	/^	wrapSign      string$/;"	m	struct:tui.LightWindow	typeref:typename:string
wrapSign	./vim/plugged/fzf/src/tui/tcell.go	/^	wrapSign      string$/;"	m	struct:tui.TcellWindow	typeref:typename:string
wrapSignWidth	./vim/plugged/fzf/src/terminal.go	/^	wrapSignWidth      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
wrapSignWidth	./vim/plugged/fzf/src/tui/light.go	/^	wrapSignWidth int$/;"	m	struct:tui.LightWindow	typeref:typename:int
wrapSignWidth	./vim/plugged/fzf/src/tui/tcell.go	/^	wrapSignWidth int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
wrapped.newsink	./vim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! wrapped.newsink(lines)$/;"	f
wrappedLine	./vim/plugged/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	s	package:tui
writelines	./vim/plugged/fzf/test/lib/common.rb	/^  def writelines(lines)$/;"	f	class:TestBase
x	./vim/plugged/fzf/src/tui/light.go	/^	x             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
xoffset	./vim/plugged/fzf/src/terminal.go	/^	xoffset            int$/;"	m	struct:fzf.Terminal	typeref:typename:int
xw	./vim/plugged/fzf/src/terminal.go	/^	xw         [2]int$/;"	m	struct:fzf.previewer	typeref:typename:[2]int
y	./vim/plugged/fzf/src/tui/light.go	/^	y             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
yanked	./vim/plugged/fzf/src/terminal.go	/^	yanked             []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
yoffset	./vim/plugged/fzf/src/tui/light.go	/^	yoffset       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
zsh	./vim/plugged/fzf/test/lib/common.rb	/^    def zsh$/;"	S	class:Shell
zshCompletion	./vim/plugged/fzf/main.go	/^var zshCompletion []byte$/;"	v	package:main	typeref:typename:[]byte
zshKeyBindings	./vim/plugged/fzf/main.go	/^var zshKeyBindings []byte$/;"	v	package:main	typeref:typename:[]byte
